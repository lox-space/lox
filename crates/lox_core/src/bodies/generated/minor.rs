/*
 * Copyright (c) 2023. Helge Eichhorn and the LOX contributors
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

// Auto-generated by `lox_gen`. Do not edit!

use crate::bodies::{
    Bennu, Braille, Ceres, Dactyl, Davida, Ellipsoid, Eros, Gaspra, Ida, Itokawa, Kleopatra,
    Lutetia, Mathilde, NutationPrecessionCoefficients, Pallas, PointMass, PolynomialCoefficients,
    Psyche, RotationalElements, Steins, Toutatis, TriAxial, Vesta, WilsonHarrington,
};
impl Ellipsoid for Gaspra {
    fn polar_radius() -> f64 {
        4.4f64
    }
    fn mean_radius() -> f64 {
        6.233333333333334f64
    }
}
impl TriAxial for Gaspra {
    fn subplanetary_radius() -> f64 {
        9.1f64
    }
    fn along_orbit_radius() -> f64 {
        5.2f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Gaspra {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients =
        (0.16528268016386302f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients =
        (0.46600291028248597f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        1.4603169851436555f64,
        21.41364504378302f64,
        0f64,
        &[] as &[f64],
    );
}
impl Ellipsoid for Ida {
    fn polar_radius() -> f64 {
        7.6f64
    }
    fn mean_radius() -> f64 {
        15.466666666666667f64
    }
}
impl TriAxial for Ida {
    fn subplanetary_radius() -> f64 {
        26.8f64
    }
    fn along_orbit_radius() -> f64 {
        12f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Ida {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients =
        (2.9454176456656302f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients =
        (-1.5205308443374599f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        4.78307481509046f64,
        32.54389804704987f64,
        0f64,
        &[] as &[f64],
    );
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Dactyl {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl PointMass for Ceres {
    fn gravitational_parameter() -> f64 {
        62.62888864440993f64
    }
}
impl Ellipsoid for Ceres {
    fn polar_radius() -> f64 {
        446f64
    }
    fn mean_radius() -> f64 {
        473.5333333333333f64
    }
}
impl TriAxial for Ceres {
    fn subplanetary_radius() -> f64 {
        487.3f64
    }
    fn along_orbit_radius() -> f64 {
        487.3f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Ceres {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients =
        (5.0862035995768355f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients =
        (1.165251621801494f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        2.9784043685283237f64,
        16.618208323400072f64,
        0f64,
        &[] as &[f64],
    );
}
impl PointMass for Pallas {
    fn gravitational_parameter() -> f64 {
        13.665878145967422f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Pallas {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients =
        (0.5759586531581288f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients =
        (-0.05235987755982989f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        0.6632251157578453f64,
        19.299913700406368f64,
        0f64,
        &[] as &[f64],
    );
}
impl PointMass for Vesta {
    fn gravitational_parameter() -> f64 {
        17.288232879171513f64
    }
}
impl Ellipsoid for Vesta {
    fn polar_radius() -> f64 {
        229f64
    }
    fn mean_radius() -> f64 {
        266f64
    }
}
impl TriAxial for Vesta {
    fn subplanetary_radius() -> f64 {
        289f64
    }
    fn along_orbit_radius() -> f64 {
        280f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Vesta {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients =
        (5.393608440730596f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients =
        (0.7371398095798051f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        4.980995152266617f64,
        28.22778495282912f64,
        0f64,
        &[] as &[f64],
    );
}
impl PointMass for Psyche {
    fn gravitational_parameter() -> f64 {
        1.5896582441709424f64
    }
}
impl Ellipsoid for Psyche {
    fn polar_radius() -> f64 {
        94.5f64
    }
    fn mean_radius() -> f64 {
        116.66666666666667f64
    }
}
impl TriAxial for Psyche {
    fn subplanetary_radius() -> f64 {
        139.5f64
    }
    fn along_orbit_radius() -> f64 {
        116f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Psyche {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl Ellipsoid for Lutetia {
    fn polar_radius() -> f64 {
        46.5f64
    }
    fn mean_radius() -> f64 {
        53f64
    }
}
impl TriAxial for Lutetia {
    fn subplanetary_radius() -> f64 {
        62f64
    }
    fn along_orbit_radius() -> f64 {
        50.5f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Lutetia {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients =
        (0.9075712110370514f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients =
        (0.20943951023931956f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        1.6406094968746698f64,
        18.4612463429088f64,
        0f64,
        &[] as &[f64],
    );
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Kleopatra {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl PointMass for Eros {
    fn gravitational_parameter() -> f64 {
        0.0004463f64
    }
}
impl Ellipsoid for Eros {
    fn polar_radius() -> f64 {
        5.5f64
    }
    fn mean_radius() -> f64 {
        9.333333333333334f64
    }
}
impl TriAxial for Eros {
    fn subplanetary_radius() -> f64 {
        17f64
    }
    fn along_orbit_radius() -> f64 {
        5.5f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Eros {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients =
        (0.1980948701013564f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients =
        (0.30054569719342356f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        5.690995091977911f64,
        28.612729617819042f64,
        0f64,
        &[] as &[f64],
    );
}
impl PointMass for Davida {
    fn gravitational_parameter() -> f64 {
        3.8944831481705644f64
    }
}
impl Ellipsoid for Davida {
    fn polar_radius() -> f64 {
        127f64
    }
    fn mean_radius() -> f64 {
        151.33333333333334f64
    }
}
impl TriAxial for Davida {
    fn subplanetary_radius() -> f64 {
        180f64
    }
    fn along_orbit_radius() -> f64 {
        147f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Davida {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients =
        (5.183627878423159f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients =
        (0.08726646259971647f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        4.679227724596798f64,
        29.39866372732388f64,
        0f64,
        &[] as &[f64],
    );
}
impl Ellipsoid for Mathilde {
    fn polar_radius() -> f64 {
        23f64
    }
    fn mean_radius() -> f64 {
        26.666666666666668f64
    }
}
impl TriAxial for Mathilde {
    fn subplanetary_radius() -> f64 {
        33f64
    }
    fn along_orbit_radius() -> f64 {
        24f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Mathilde {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl Ellipsoid for Steins {
    fn polar_radius() -> f64 {
        2.04f64
    }
    fn mean_radius() -> f64 {
        2.6700000000000004f64
    }
}
impl TriAxial for Steins {
    fn subplanetary_radius() -> f64 {
        3.24f64
    }
    fn along_orbit_radius() -> f64 {
        2.73f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Steins {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients =
        (1.5882496193148399f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients =
        (-1.0821041362364843f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        5.615771401216954f64,
        24.925032561498227f64,
        0f64,
        &[] as &[f64],
    );
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Braille {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for WilsonHarrington {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl Ellipsoid for Toutatis {
    fn polar_radius() -> f64 {
        0.85f64
    }
    fn mean_radius() -> f64 {
        1.3316666666666666f64
    }
}
impl TriAxial for Toutatis {
    fn subplanetary_radius() -> f64 {
        2.13f64
    }
    fn along_orbit_radius() -> f64 {
        1.015f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Toutatis {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl Ellipsoid for Itokawa {
    fn polar_radius() -> f64 {
        0.104f64
    }
    fn mean_radius() -> f64 {
        0.17300000000000001f64
    }
}
impl TriAxial for Itokawa {
    fn subplanetary_radius() -> f64 {
        0.268f64
    }
    fn along_orbit_radius() -> f64 {
        0.147f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Itokawa {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients =
        (1.5800465718304666f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients =
        (-1.1571532940722404f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients =
        (0f64, 12.429240095029979f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Bennu {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[cfg(test)]
#[allow(clippy::approx_constant)]
mod tests {
    use crate::bodies::*;
    #[test]
    fn test_tri_axial_9511010() {
        assert_eq!(Gaspra::polar_radius(), 4.4f64);
        assert_eq!(Gaspra::mean_radius(), 6.233333333333334f64);
        assert_eq!(Gaspra::subplanetary_radius(), 9.1f64);
        assert_eq!(Gaspra::along_orbit_radius(), 5.2f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_9511010() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Gaspra::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_9511010() {
        assert_eq!(
            (0.16528268016386302f64, 0f64, 0f64, &[] as &[f64]),
            Gaspra::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_9511010() {
        assert_eq!(
            (0.46600291028248597f64, 0f64, 0f64, &[] as &[f64]),
            Gaspra::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_9511010() {
        assert_eq!(
            (
                1.4603169851436555f64,
                21.41364504378302f64,
                0f64,
                &[] as &[f64]
            ),
            Gaspra::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_2431010() {
        assert_eq!(Ida::polar_radius(), 7.6f64);
        assert_eq!(Ida::mean_radius(), 15.466666666666667f64);
        assert_eq!(Ida::subplanetary_radius(), 26.8f64);
        assert_eq!(Ida::along_orbit_radius(), 12f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_2431010() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Ida::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_2431010() {
        assert_eq!(
            (2.9454176456656302f64, 0f64, 0f64, &[] as &[f64]),
            Ida::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_2431010() {
        assert_eq!(
            (-1.5205308443374599f64, 0f64, 0f64, &[] as &[f64]),
            Ida::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_2431010() {
        assert_eq!(
            (
                4.78307481509046f64,
                32.54389804704987f64,
                0f64,
                &[] as &[f64]
            ),
            Ida::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_2431011() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Dactyl::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_2431011() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Dactyl::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_2431011() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Dactyl::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_2431011() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Dactyl::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_2000001() {
        assert_eq!(Ceres::gravitational_parameter(), 62.62888864440993f64);
    }
    #[test]
    fn test_tri_axial_2000001() {
        assert_eq!(Ceres::polar_radius(), 446f64);
        assert_eq!(Ceres::mean_radius(), 473.5333333333333f64);
        assert_eq!(Ceres::subplanetary_radius(), 487.3f64);
        assert_eq!(Ceres::along_orbit_radius(), 487.3f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_2000001() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Ceres::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_2000001() {
        assert_eq!(
            (5.0862035995768355f64, 0f64, 0f64, &[] as &[f64]),
            Ceres::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_2000001() {
        assert_eq!(
            (1.165251621801494f64, 0f64, 0f64, &[] as &[f64]),
            Ceres::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_2000001() {
        assert_eq!(
            (
                2.9784043685283237f64,
                16.618208323400072f64,
                0f64,
                &[] as &[f64]
            ),
            Ceres::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_2000002() {
        assert_eq!(Pallas::gravitational_parameter(), 13.665878145967422f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_2000002() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Pallas::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_2000002() {
        assert_eq!(
            (0.5759586531581288f64, 0f64, 0f64, &[] as &[f64]),
            Pallas::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_2000002() {
        assert_eq!(
            (-0.05235987755982989f64, 0f64, 0f64, &[] as &[f64]),
            Pallas::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_2000002() {
        assert_eq!(
            (
                0.6632251157578453f64,
                19.299913700406368f64,
                0f64,
                &[] as &[f64]
            ),
            Pallas::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_2000004() {
        assert_eq!(Vesta::gravitational_parameter(), 17.288232879171513f64);
    }
    #[test]
    fn test_tri_axial_2000004() {
        assert_eq!(Vesta::polar_radius(), 229f64);
        assert_eq!(Vesta::mean_radius(), 266f64);
        assert_eq!(Vesta::subplanetary_radius(), 289f64);
        assert_eq!(Vesta::along_orbit_radius(), 280f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_2000004() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Vesta::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_2000004() {
        assert_eq!(
            (5.393608440730596f64, 0f64, 0f64, &[] as &[f64]),
            Vesta::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_2000004() {
        assert_eq!(
            (0.7371398095798051f64, 0f64, 0f64, &[] as &[f64]),
            Vesta::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_2000004() {
        assert_eq!(
            (
                4.980995152266617f64,
                28.22778495282912f64,
                0f64,
                &[] as &[f64]
            ),
            Vesta::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_2000016() {
        assert_eq!(Psyche::gravitational_parameter(), 1.5896582441709424f64);
    }
    #[test]
    fn test_tri_axial_2000016() {
        assert_eq!(Psyche::polar_radius(), 94.5f64);
        assert_eq!(Psyche::mean_radius(), 116.66666666666667f64);
        assert_eq!(Psyche::subplanetary_radius(), 139.5f64);
        assert_eq!(Psyche::along_orbit_radius(), 116f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_2000016() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Psyche::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_2000016() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Psyche::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_2000016() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Psyche::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_2000016() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Psyche::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_2000021() {
        assert_eq!(Lutetia::polar_radius(), 46.5f64);
        assert_eq!(Lutetia::mean_radius(), 53f64);
        assert_eq!(Lutetia::subplanetary_radius(), 62f64);
        assert_eq!(Lutetia::along_orbit_radius(), 50.5f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_2000021() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Lutetia::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_2000021() {
        assert_eq!(
            (0.9075712110370514f64, 0f64, 0f64, &[] as &[f64]),
            Lutetia::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_2000021() {
        assert_eq!(
            (0.20943951023931956f64, 0f64, 0f64, &[] as &[f64]),
            Lutetia::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_2000021() {
        assert_eq!(
            (
                1.6406094968746698f64,
                18.4612463429088f64,
                0f64,
                &[] as &[f64]
            ),
            Lutetia::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_2000216() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Kleopatra::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_2000216() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kleopatra::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_2000216() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kleopatra::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_2000216() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kleopatra::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_2000433() {
        assert_eq!(Eros::gravitational_parameter(), 0.0004463f64);
    }
    #[test]
    fn test_tri_axial_2000433() {
        assert_eq!(Eros::polar_radius(), 5.5f64);
        assert_eq!(Eros::mean_radius(), 9.333333333333334f64);
        assert_eq!(Eros::subplanetary_radius(), 17f64);
        assert_eq!(Eros::along_orbit_radius(), 5.5f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_2000433() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Eros::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_2000433() {
        assert_eq!(
            (0.1980948701013564f64, 0f64, 0f64, &[] as &[f64]),
            Eros::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_2000433() {
        assert_eq!(
            (0.30054569719342356f64, 0f64, 0f64, &[] as &[f64]),
            Eros::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_2000433() {
        assert_eq!(
            (
                5.690995091977911f64,
                28.612729617819042f64,
                0f64,
                &[] as &[f64]
            ),
            Eros::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_2000511() {
        assert_eq!(Davida::gravitational_parameter(), 3.8944831481705644f64);
    }
    #[test]
    fn test_tri_axial_2000511() {
        assert_eq!(Davida::polar_radius(), 127f64);
        assert_eq!(Davida::mean_radius(), 151.33333333333334f64);
        assert_eq!(Davida::subplanetary_radius(), 180f64);
        assert_eq!(Davida::along_orbit_radius(), 147f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_2000511() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Davida::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_2000511() {
        assert_eq!(
            (5.183627878423159f64, 0f64, 0f64, &[] as &[f64]),
            Davida::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_2000511() {
        assert_eq!(
            (0.08726646259971647f64, 0f64, 0f64, &[] as &[f64]),
            Davida::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_2000511() {
        assert_eq!(
            (
                4.679227724596798f64,
                29.39866372732388f64,
                0f64,
                &[] as &[f64]
            ),
            Davida::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_2000253() {
        assert_eq!(Mathilde::polar_radius(), 23f64);
        assert_eq!(Mathilde::mean_radius(), 26.666666666666668f64);
        assert_eq!(Mathilde::subplanetary_radius(), 33f64);
        assert_eq!(Mathilde::along_orbit_radius(), 24f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_2000253() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Mathilde::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_2000253() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Mathilde::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_2000253() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Mathilde::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_2000253() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Mathilde::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_2002867() {
        assert_eq!(Steins::polar_radius(), 2.04f64);
        assert_eq!(Steins::mean_radius(), 2.6700000000000004f64);
        assert_eq!(Steins::subplanetary_radius(), 3.24f64);
        assert_eq!(Steins::along_orbit_radius(), 2.73f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_2002867() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Steins::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_2002867() {
        assert_eq!(
            (1.5882496193148399f64, 0f64, 0f64, &[] as &[f64]),
            Steins::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_2002867() {
        assert_eq!(
            (-1.0821041362364843f64, 0f64, 0f64, &[] as &[f64]),
            Steins::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_2002867() {
        assert_eq!(
            (
                5.615771401216954f64,
                24.925032561498227f64,
                0f64,
                &[] as &[f64]
            ),
            Steins::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_2009969() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Braille::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_2009969() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Braille::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_2009969() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Braille::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_2009969() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Braille::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_2004015() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            WilsonHarrington::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_2004015() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            WilsonHarrington::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_2004015() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            WilsonHarrington::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_2004015() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            WilsonHarrington::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_2004179() {
        assert_eq!(Toutatis::polar_radius(), 0.85f64);
        assert_eq!(Toutatis::mean_radius(), 1.3316666666666666f64);
        assert_eq!(Toutatis::subplanetary_radius(), 2.13f64);
        assert_eq!(Toutatis::along_orbit_radius(), 1.015f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_2004179() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Toutatis::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_2004179() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Toutatis::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_2004179() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Toutatis::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_2004179() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Toutatis::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_2025143() {
        assert_eq!(Itokawa::polar_radius(), 0.104f64);
        assert_eq!(Itokawa::mean_radius(), 0.17300000000000001f64);
        assert_eq!(Itokawa::subplanetary_radius(), 0.268f64);
        assert_eq!(Itokawa::along_orbit_radius(), 0.147f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_2025143() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Itokawa::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_2025143() {
        assert_eq!(
            (1.5800465718304666f64, 0f64, 0f64, &[] as &[f64]),
            Itokawa::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_2025143() {
        assert_eq!(
            (-1.1571532940722404f64, 0f64, 0f64, &[] as &[f64]),
            Itokawa::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_2025143() {
        assert_eq!(
            (0f64, 12.429240095029979f64, 0f64, &[] as &[f64]),
            Itokawa::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_2101955() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Bennu::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_2101955() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Bennu::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_2101955() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Bennu::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_2101955() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Bennu::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
}
