/*
 * Copyright (c) 2023. Helge Eichhorn and the LOX contributors
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

// Auto-generated by `lox_gen`. Do not edit!

use super::{NaifId, PointMass};
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct SolarSystemBarycenter;
impl NaifId for SolarSystemBarycenter {
    fn id() -> i32 {
        0i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct MercuryBarycenter;
impl NaifId for MercuryBarycenter {
    fn id() -> i32 {
        1i32
    }
}
impl PointMass for MercuryBarycenter {
    fn gravitational_parameter() -> f64 {
        22031.868551400003f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct VenusBarycenter;
impl NaifId for VenusBarycenter {
    fn id() -> i32 {
        2i32
    }
}
impl PointMass for VenusBarycenter {
    fn gravitational_parameter() -> f64 {
        324858.592f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct EarthBarycenter;
impl NaifId for EarthBarycenter {
    fn id() -> i32 {
        3i32
    }
}
impl PointMass for EarthBarycenter {
    fn gravitational_parameter() -> f64 {
        403503.2356254802f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct MarsBarycenter;
impl NaifId for MarsBarycenter {
    fn id() -> i32 {
        4i32
    }
}
impl PointMass for MarsBarycenter {
    fn gravitational_parameter() -> f64 {
        42828.3758157561f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct JupiterBarycenter;
impl NaifId for JupiterBarycenter {
    fn id() -> i32 {
        5i32
    }
}
impl PointMass for JupiterBarycenter {
    fn gravitational_parameter() -> f64 {
        126712764.09999998f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct SaturnBarycenter;
impl NaifId for SaturnBarycenter {
    fn id() -> i32 {
        6i32
    }
}
impl PointMass for SaturnBarycenter {
    fn gravitational_parameter() -> f64 {
        37940584.8418f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct UranusBarycenter;
impl NaifId for UranusBarycenter {
    fn id() -> i32 {
        7i32
    }
}
impl PointMass for UranusBarycenter {
    fn gravitational_parameter() -> f64 {
        5794556.3999999985f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct NeptuneBarycenter;
impl NaifId for NeptuneBarycenter {
    fn id() -> i32 {
        8i32
    }
}
impl PointMass for NeptuneBarycenter {
    fn gravitational_parameter() -> f64 {
        6836527.100580399f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct PlutoBarycenter;
impl NaifId for PlutoBarycenter {
    fn id() -> i32 {
        9i32
    }
}
impl PointMass for PlutoBarycenter {
    fn gravitational_parameter() -> f64 {
        975.5f64
    }
}
#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_naif_id_0() {
        assert_eq!(SolarSystemBarycenter::id(), 0i32)
    }
    #[test]
    fn test_naif_id_1() {
        assert_eq!(MercuryBarycenter::id(), 1i32)
    }
    #[test]
    fn test_point_mass_1() {
        assert_eq!(
            MercuryBarycenter::gravitational_parameter(),
            22031.868551400003f64
        );
    }
    #[test]
    fn test_naif_id_2() {
        assert_eq!(VenusBarycenter::id(), 2i32)
    }
    #[test]
    fn test_point_mass_2() {
        assert_eq!(VenusBarycenter::gravitational_parameter(), 324858.592f64);
    }
    #[test]
    fn test_naif_id_3() {
        assert_eq!(EarthBarycenter::id(), 3i32)
    }
    #[test]
    fn test_point_mass_3() {
        assert_eq!(
            EarthBarycenter::gravitational_parameter(),
            403503.2356254802f64
        );
    }
    #[test]
    fn test_naif_id_4() {
        assert_eq!(MarsBarycenter::id(), 4i32)
    }
    #[test]
    fn test_point_mass_4() {
        assert_eq!(
            MarsBarycenter::gravitational_parameter(),
            42828.3758157561f64
        );
    }
    #[test]
    fn test_naif_id_5() {
        assert_eq!(JupiterBarycenter::id(), 5i32)
    }
    #[test]
    fn test_point_mass_5() {
        assert_eq!(
            JupiterBarycenter::gravitational_parameter(),
            126712764.09999998f64
        );
    }
    #[test]
    fn test_naif_id_6() {
        assert_eq!(SaturnBarycenter::id(), 6i32)
    }
    #[test]
    fn test_point_mass_6() {
        assert_eq!(
            SaturnBarycenter::gravitational_parameter(),
            37940584.8418f64
        );
    }
    #[test]
    fn test_naif_id_7() {
        assert_eq!(UranusBarycenter::id(), 7i32)
    }
    #[test]
    fn test_point_mass_7() {
        assert_eq!(
            UranusBarycenter::gravitational_parameter(),
            5794556.3999999985f64
        );
    }
    #[test]
    fn test_naif_id_8() {
        assert_eq!(NeptuneBarycenter::id(), 8i32)
    }
    #[test]
    fn test_point_mass_8() {
        assert_eq!(
            NeptuneBarycenter::gravitational_parameter(),
            6836527.100580399f64
        );
    }
    #[test]
    fn test_naif_id_9() {
        assert_eq!(PlutoBarycenter::id(), 9i32)
    }
    #[test]
    fn test_point_mass_9() {
        assert_eq!(PlutoBarycenter::gravitational_parameter(), 975.5f64);
    }
}
