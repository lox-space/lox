/*
 * Copyright (c) 2023. Helge Eichhorn and the LOX contributors
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

// Auto-generated by `lox_gen`. Do not edit!

use super::{
    Adrastea, Aegaeon, Aegir, Aitne, Albiorix, Amalthea, Ananke, Anthe, Aoede, Arche, Ariel, Atlas,
    Autonoe, Bebhionn, Belinda, Bergelmir, Bestla, Bianca, Caliban, Callirrhoe, Callisto, Calypso,
    Carme, Carpo, Chaldene, Charon, Cordelia, Cressida, Cupid, Cyllene, Daphnis, Deimos, Desdemona,
    Despina, Dia, Dione, Elara, Ellipsoid, Enceladus, Epimetheus, Erinome, Erriapus, Euanthe,
    Eukelade, Euporie, Europa, Eurydome, Farbauti, Fenrir, Ferdinand, Fornjot, Francisco, Galatea,
    Ganymede, Greip, Halimede, Harpalyke, Hati, Hegemone, Helene, Helike, Hermippe, Herse, Himalia,
    Hydra, Hyperion, Hyrrokkin, Iapetus, Ijiraq, Io, Iocaste, Isonoe, Janus, Jarnsaxa, Juliet,
    Kale, Kallichore, Kalyke, Kari, Kerberos, Kiviuq, Kore, Laomedeia, Larissa, Leda, Loge,
    Lysithea, Mab, Magaclite, Margaret, Methone, Metis, Mimas, Miranda, Mneme, Moon, Mundilfari,
    Naiad, Narvi, Nereid, Neso, Nix, NutationPrecessionCoefficients, Oberon, Ophelia, Orthosie,
    Paaliaq, Pallene, Pan, Pandora, Pasiphae, Pasithee, Perdita, Phobos, Phoebe, PointMass,
    Polydeuces, PolynomialCoefficients, Portia, Praxidike, Prometheus, Prospero, Proteus, Psamathe,
    Puck, Rhea, Rosalind, RotationalElements, Sao, Setebos, Siarnaq, Sinope, Skathi, Skoll, Sponde,
    Stephano, Styx, Surtur, Suttungr, Sycorax, Tarqeq, Tarvos, Taygete, Telesto, Tethys, Thalassa,
    Thebe, Thelxinoe, Themisto, Thrymr, Thyone, Titan, Titania, TriAxial, Trinculo, Triton,
    Umbriel, Ymir,
};
impl PointMass for Moon {
    fn gravitational_parameter() -> f64 {
        4902.80011845755f64
    }
}
impl Ellipsoid for Moon {
    fn polar_radius() -> f64 {
        1737.4f64
    }
    fn mean_radius() -> f64 {
        1737.4000000000003f64
    }
}
impl TriAxial for Moon {
    fn subplanetary_radius() -> f64 {
        1737.4f64
    }
    fn along_orbit_radius() -> f64 {
        1737.4f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Moon {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.712299968592838f64,
        0.000054105206811824215f64,
        0f64,
        &[
            -0.06769608569710406f64,
            -0.0021013764194011725f64,
            0.0012217304763960308f64,
            -0.0003001966313430247f64,
            0f64,
            0.0001256637061435917f64,
            0f64,
            0f64,
            0f64,
            -0.00009075712110370513f64,
            0f64,
            0f64,
            0.00007504915783575618f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.161328121643011f64,
        0.00022689280275926284f64,
        0f64,
        &[
            0.02691123173650057f64,
            0.0004171336912266448f64,
            -0.00048520153205442357f64,
            0.0001186823891356144f64,
            0f64,
            -0.00005061454830783555f64,
            0.000015707963267948964f64,
            0f64,
            0f64,
            0.000013962634015954637f64,
            0f64,
            0f64,
            -0.000015707963267948964f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        0.668832858644503f64,
        0.22997083313948888f64,
        -0.000000000000024434609527920614f64,
        &[
            0.06215117466351808f64,
            0.00210835773640915f64,
            -0.0011205013797803594f64,
            0.0002757620218151041f64,
            0.0004398229715025711f64,
            -0.00011519173063162575f64,
            -0.00008203047484373349f64,
            -0.00008028514559173915f64,
            0.000048869219055841225f64,
            0.00009075712110370513f64,
            0.00006981317007977319f64,
            0.00003316125578789226f64,
            -0.0000767944870877505f64,
        ] as &[f64],
    );
}
impl PointMass for Phobos {
    fn gravitational_parameter() -> f64 {
        0.0007087546066894452f64
    }
}
impl Ellipsoid for Phobos {
    fn polar_radius() -> f64 {
        9.1f64
    }
    fn mean_radius() -> f64 {
        11.166666666666666f64
    }
}
impl TriAxial for Phobos {
    fn subplanetary_radius() -> f64 {
        13f64
    }
    fn along_orbit_radius() -> f64 {
        11.4f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Phobos {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        5.544399941316208f64,
        -0.001892691938596266f64,
        0f64,
        &[
            -0.031141630416121578f64,
            0.00038621064567151f64,
            -0.00017946365486924213f64,
            -0.00008300698656022431f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        0.9230395870244597f64,
        -0.0010707081834185127f64,
        0f64,
        &[
            -0.018765175709923063f64,
            0.00011669725164439606f64,
            -0.00011322648989388013f64,
            0.000049144282945955534f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        0.6141419961301966f64,
        19.702057793318815f64,
        0.00000000016643698911600935f64,
        &[
            0.02485728795564792f64,
            -0.0003968499982587423f64,
            0.0000716825922415843f64,
            0.00011029852554073445f64,
            -0.019949113350295186f64,
        ] as &[f64],
    );
}
impl PointMass for Deimos {
    fn gravitational_parameter() -> f64 {
        0.00009615569648120313f64
    }
}
impl Ellipsoid for Deimos {
    fn polar_radius() -> f64 {
        5.1f64
    }
    fn mean_radius() -> f64 {
        6.3f64
    }
}
impl TriAxial for Deimos {
    fn subplanetary_radius() -> f64 {
        7.8f64
    }
    fn along_orbit_radius() -> f64 {
        6f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Deimos {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        5.526708263174914f64,
        -0.0018357397507085887f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.05396867424229676f64,
            0.004010877798556321f64,
            0.0011202666329959662f64,
            0.00044218562371099577f64,
            0.00013590791618817245f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        0.9339242922383507f64,
        -0.0010435487658623783f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.032102888827614605f64,
            0.002500240004017941f64,
            0.00033360380402252296f64,
            -0.0002587607695714273f64,
            0.00003358537079612689f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        1.3857797243489947f64,
        4.977013864082068f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.047814137677880446f64,
            -0.006975837721323607f64,
            -0.0011455047921115052f64,
            -0.0005084039391304362f64,
            0.0002965593651818685f64,
        ] as &[f64],
    );
}
impl PointMass for Io {
    fn gravitational_parameter() -> f64 {
        5959.915466180539f64
    }
}
impl Ellipsoid for Io {
    fn polar_radius() -> f64 {
        1815.7f64
    }
    fn mean_radius() -> f64 {
        1821.5f64
    }
}
impl TriAxial for Io {
    fn subplanetary_radius() -> f64 {
        1829.4f64
    }
    fn along_orbit_radius() -> f64 {
        1819.4f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Io {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.678355059970801f64,
        -0.00015707963267948965f64,
        0f64,
        &[
            0f64,
            0f64,
            0.0016406094968746698f64,
            0.0004188790204786391f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.1257373675363425f64,
        0.00005235987755982989f64,
        0f64,
        &[
            0f64,
            0f64,
            0.0006981317007977319f64,
            0.00019198621771937625f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        3.4974652880714365f64,
        3.551552235248627f64,
        0f64,
        &[
            0f64,
            0f64,
            -0.0014835298641951802f64,
            -0.0003839724354387525f64,
        ] as &[f64],
    );
}
impl PointMass for Europa {
    fn gravitational_parameter() -> f64 {
        3202.712099607295f64
    }
}
impl Ellipsoid for Europa {
    fn polar_radius() -> f64 {
        1559.5f64
    }
    fn mean_radius() -> f64 {
        1560.8f64
    }
}
impl TriAxial for Europa {
    fn subplanetary_radius() -> f64 {
        1562.6f64
    }
    fn along_orbit_radius() -> f64 {
        1560.3f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Europa {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.678878658746398f64,
        -0.00015707963267948965f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0.01895427567665842f64,
            0.0010471975511965976f64,
            0.0002617993877991494f64,
            0.00015707963267948965f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.125911900461542f64,
        0.00005235987755982989f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0.008168140899333463f64,
            0.0004537856055185257f64,
            0.00012217304763960306f64,
            0.00003490658503988659f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        0.6287025031533974f64,
        1.7693227033738699f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            -0.01710422666954443f64,
            -0.0009424777960769379f64,
            -0.0002443460952792061f64,
            -0.00013962634015954637f64,
        ] as &[f64],
    );
}
impl PointMass for Ganymede {
    fn gravitational_parameter() -> f64 {
        9887.832752719638f64
    }
}
impl Ellipsoid for Ganymede {
    fn polar_radius() -> f64 {
        2631.2f64
    }
    fn mean_radius() -> f64 {
        2631.2f64
    }
}
impl TriAxial for Ganymede {
    fn subplanetary_radius() -> f64 {
        2631.2f64
    }
    fn along_orbit_radius() -> f64 {
        2631.2f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Ganymede {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.680973053848792f64,
        -0.00015707963267948965f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            -0.0006457718232379018f64,
            0.0075223690760955605f64,
            0.0015882496193148398f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.1269590980127384f64,
        0.00005235987755982989f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            -0.00027925268031909274f64,
            0.003246312408709453f64,
            0.0006806784082777885f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        0.7690618815987814f64,
        0.8782079330731682f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0.0005759586531581288f64,
            -0.006789330790257942f64,
            -0.0014311699866353504f64,
        ] as &[f64],
    );
}
impl PointMass for Callisto {
    fn gravitational_parameter() -> f64 {
        7179.283402579837f64
    }
}
impl Ellipsoid for Callisto {
    fn polar_radius() -> f64 {
        2410.3f64
    }
    fn mean_radius() -> f64 {
        2410.3f64
    }
}
impl TriAxial for Callisto {
    fn subplanetary_radius() -> f64 {
        2410.3f64
    }
    fn along_orbit_radius() -> f64 {
        2410.3f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Callisto {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.690048765959163f64,
        -0.00015707963267948965f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            -0.001186823891356144f64,
            0.010297442586766544f64,
            0f64,
            0.00017453292519943296f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.1314969540679238f64,
        0.00005235987755982989f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            -0.0005061454830783556f64,
            0.004433136300065597f64,
            0f64,
            -0.00006981317007977319f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        4.529303941850484f64,
        0.37648622085811195f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0.001064650843716541f64,
            -0.009302604913129777f64,
            0f64,
            -0.00015707963267948965f64,
        ] as &[f64],
    );
}
impl PointMass for Amalthea {
    fn gravitational_parameter() -> f64 {
        0.1645634534798259f64
    }
}
impl Ellipsoid for Amalthea {
    fn polar_radius() -> f64 {
        64f64
    }
    fn mean_radius() -> f64 {
        87.33333333333333f64
    }
}
impl TriAxial for Amalthea {
    fn subplanetary_radius() -> f64 {
        125f64
    }
    fn along_orbit_radius() -> f64 {
        73f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Amalthea {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.678355059970801f64,
        -0.00015707963267948965f64,
        0f64,
        &[
            -0.014660765716752368f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.00017453292519943296f64,
            0f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.125562834611143f64,
        0.00005235987755982989f64,
        0f64,
        &[
            -0.006283185307179586f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        4.043404278095263f64,
        12.612298185680531f64,
        0f64,
        &[
            0.013264502315156905f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.00017453292519943296f64,
            0f64,
        ] as &[f64],
    );
}
impl PointMass for Himalia {
    fn gravitational_parameter() -> f64 {
        0.1515524299611265f64
    }
}
impl Ellipsoid for Himalia {
    fn polar_radius() -> f64 {
        85f64
    }
    fn mean_radius() -> f64 {
        85f64
    }
}
impl TriAxial for Himalia {
    fn subplanetary_radius() -> f64 {
        85f64
    }
    fn along_orbit_radius() -> f64 {
        85f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Himalia {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl Ellipsoid for Elara {
    fn polar_radius() -> f64 {
        40f64
    }
    fn mean_radius() -> f64 {
        40f64
    }
}
impl TriAxial for Elara {
    fn subplanetary_radius() -> f64 {
        40f64
    }
    fn along_orbit_radius() -> f64 {
        40f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Elara {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl Ellipsoid for Pasiphae {
    fn polar_radius() -> f64 {
        18f64
    }
    fn mean_radius() -> f64 {
        18f64
    }
}
impl TriAxial for Pasiphae {
    fn subplanetary_radius() -> f64 {
        18f64
    }
    fn along_orbit_radius() -> f64 {
        18f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Pasiphae {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl Ellipsoid for Sinope {
    fn polar_radius() -> f64 {
        14f64
    }
    fn mean_radius() -> f64 {
        14f64
    }
}
impl TriAxial for Sinope {
    fn subplanetary_radius() -> f64 {
        14f64
    }
    fn along_orbit_radius() -> f64 {
        14f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Sinope {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl Ellipsoid for Lysithea {
    fn polar_radius() -> f64 {
        12f64
    }
    fn mean_radius() -> f64 {
        12f64
    }
}
impl TriAxial for Lysithea {
    fn subplanetary_radius() -> f64 {
        12f64
    }
    fn along_orbit_radius() -> f64 {
        12f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Lysithea {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl Ellipsoid for Carme {
    fn polar_radius() -> f64 {
        15f64
    }
    fn mean_radius() -> f64 {
        15f64
    }
}
impl TriAxial for Carme {
    fn subplanetary_radius() -> f64 {
        15f64
    }
    fn along_orbit_radius() -> f64 {
        15f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Carme {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl Ellipsoid for Ananke {
    fn polar_radius() -> f64 {
        10f64
    }
    fn mean_radius() -> f64 {
        10f64
    }
}
impl TriAxial for Ananke {
    fn subplanetary_radius() -> f64 {
        10f64
    }
    fn along_orbit_radius() -> f64 {
        10f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Ananke {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl Ellipsoid for Leda {
    fn polar_radius() -> f64 {
        5f64
    }
    fn mean_radius() -> f64 {
        5f64
    }
}
impl TriAxial for Leda {
    fn subplanetary_radius() -> f64 {
        5f64
    }
    fn along_orbit_radius() -> f64 {
        5f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Leda {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl PointMass for Thebe {
    fn gravitational_parameter() -> f64 {
        0.030148f64
    }
}
impl Ellipsoid for Thebe {
    fn polar_radius() -> f64 {
        42f64
    }
    fn mean_radius() -> f64 {
        49.666666666666664f64
    }
}
impl TriAxial for Thebe {
    fn subplanetary_radius() -> f64 {
        58f64
    }
    fn along_orbit_radius() -> f64 {
        49f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Thebe {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.678355059970801f64,
        -0.00015707963267948965f64,
        0f64,
        &[
            0f64,
            -0.03682644721708035f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.0006981317007977319f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.125562834611143f64,
        0.00005235987755982989f64,
        0f64,
        &[
            0f64,
            -0.0158824961931484f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.00017453292519943296f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        0.1494001839707146f64,
        9.31482937374367f64,
        0f64,
        &[
            0f64,
            0.033335788713091695f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.0006981317007977319f64,
        ] as &[f64],
    );
}
impl PointMass for Adrastea {
    fn gravitational_parameter() -> f64 {
        0.000139f64
    }
}
impl Ellipsoid for Adrastea {
    fn polar_radius() -> f64 {
        7f64
    }
    fn mean_radius() -> f64 {
        8.333333333333334f64
    }
}
impl TriAxial for Adrastea {
    fn subplanetary_radius() -> f64 {
        10f64
    }
    fn along_orbit_radius() -> f64 {
        8f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Adrastea {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.678355059970801f64,
        -0.00015707963267948965f64,
        0f64,
        &[] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.125562834611143f64,
        0.00005235987755982989f64,
        0f64,
        &[] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        0.5810201079889122f64,
        21.066100687650238f64,
        0f64,
        &[] as &[f64],
    );
}
impl PointMass for Metis {
    fn gravitational_parameter() -> f64 {
        0.002501f64
    }
}
impl Ellipsoid for Metis {
    fn polar_radius() -> f64 {
        17f64
    }
    fn mean_radius() -> f64 {
        22.333333333333332f64
    }
}
impl TriAxial for Metis {
    fn subplanetary_radius() -> f64 {
        30f64
    }
    fn along_orbit_radius() -> f64 {
        20f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Metis {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.678355059970801f64,
        -0.00015707963267948965f64,
        0f64,
        &[] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.125562834611143f64,
        0.00005235987755982989f64,
        0f64,
        &[] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        6.040410008227175f64,
        21.3149160457997f64,
        0f64,
        &[] as &[f64],
    );
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Callirrhoe {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Themisto {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Magaclite {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Taygete {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Chaldene {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Harpalyke {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Kalyke {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Iocaste {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Erinome {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Isonoe {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Praxidike {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Autonoe {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Thyone {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Hermippe {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Aitne {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Eurydome {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Euanthe {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Euporie {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Orthosie {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Sponde {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Kale {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Pasithee {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Hegemone {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Mneme {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Aoede {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Thelxinoe {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Arche {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Kallichore {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Helike {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Carpo {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Eukelade {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Cyllene {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Kore {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Herse {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Dia {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl PointMass for Mimas {
    fn gravitational_parameter() -> f64 {
        2.503488768152587f64
    }
}
impl Ellipsoid for Mimas {
    fn polar_radius() -> f64 {
        190.6f64
    }
    fn mean_radius() -> f64 {
        198.36666666666667f64
    }
}
impl TriAxial for Mimas {
    fn subplanetary_radius() -> f64 {
        207.8f64
    }
    fn along_orbit_radius() -> f64 {
        196.7f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Mimas {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        0.7096508738608943f64,
        -0.0006283185307179586f64,
        0f64,
        &[
            0f64,
            0f64,
            0.2366666465704311f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.457698991265664f64,
        -0.00006981317007977319f64,
        0f64,
        &[
            0f64,
            0f64,
            -0.026703537555513242f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        5.819974923700291f64,
        6.667062709440567f64,
        0f64,
        &[
            0f64,
            0f64,
            -0.23527038316883564f64,
            0f64,
            -0.7827801695194568f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
}
impl PointMass for Enceladus {
    fn gravitational_parameter() -> f64 {
        7.210366688598896f64
    }
}
impl Ellipsoid for Enceladus {
    fn polar_radius() -> f64 {
        248.3f64
    }
    fn mean_radius() -> f64 {
        252.1f64
    }
}
impl TriAxial for Enceladus {
    fn subplanetary_radius() -> f64 {
        256.6f64
    }
    fn along_orbit_radius() -> f64 {
        251.4f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Enceladus {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        0.7096508738608943f64,
        -0.0006283185307179586f64,
        0f64,
        &[] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.457698991265664f64,
        -0.00006981317007977319f64,
        0f64,
        &[] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        0.11030480872604163f64,
        4.585536698039173f64,
        0f64,
        &[] as &[f64],
    );
}
impl PointMass for Tethys {
    fn gravitational_parameter() -> f64 {
        41.21352885489587f64
    }
}
impl Ellipsoid for Tethys {
    fn polar_radius() -> f64 {
        526.3f64
    }
    fn mean_radius() -> f64 {
        530.9999999999999f64
    }
}
impl TriAxial for Tethys {
    fn subplanetary_radius() -> f64 {
        538.4f64
    }
    fn along_orbit_radius() -> f64 {
        528.3f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Tethys {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        0.7096508738608943f64,
        -0.0006283185307179586f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0.16859880574265224f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.457698991265664f64,
        -0.00006981317007977319f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            -0.019024088846738195f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        0.1562069680534925f64,
        3.328306379991881f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            -0.16755160819145562f64,
            0.03892084231947355f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
}
impl PointMass for Dione {
    fn gravitational_parameter() -> f64 {
        73.11607172482067f64
    }
}
impl Ellipsoid for Dione {
    fn polar_radius() -> f64 {
        559.6f64
    }
    fn mean_radius() -> f64 {
        561.4333333333333f64
    }
}
impl TriAxial for Dione {
    fn subplanetary_radius() -> f64 {
        563.4f64
    }
    fn along_orbit_radius() -> f64 {
        561.3f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Dione {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        0.7096508738608943f64,
        -0.0006283185307179586f64,
        0f64,
        &[] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.457698991265664f64,
        -0.00006981317007977319f64,
        0f64,
        &[] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        6.241297405131723f64,
        2.295717637805533f64,
        0f64,
        &[] as &[f64],
    );
}
impl PointMass for Rhea {
    fn gravitational_parameter() -> f64 {
        153.9417519146563f64
    }
}
impl Ellipsoid for Rhea {
    fn polar_radius() -> f64 {
        762.4f64
    }
    fn mean_radius() -> f64 {
        763.5f64
    }
}
impl TriAxial for Rhea {
    fn subplanetary_radius() -> f64 {
        765f64
    }
    fn along_orbit_radius() -> f64 {
        763.1f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Rhea {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        0.7047639519553103f64,
        -0.0006283185307179586f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.054105206811824215f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.4582225900412622f64,
        -0.00006981317007977319f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.006108652381980153f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        4.104316268989865f64,
        1.3908537151816638f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.05375614096142535f64,
            0f64,
            0f64,
        ] as &[f64],
    );
}
impl PointMass for Titan {
    fn gravitational_parameter() -> f64 {
        8978.137095521046f64
    }
}
impl Ellipsoid for Titan {
    fn polar_radius() -> f64 {
        2574.47f64
    }
    fn mean_radius() -> f64 {
        2574.7999999999997f64
    }
}
impl TriAxial for Titan {
    fn subplanetary_radius() -> f64 {
        2575.15f64
    }
    fn along_orbit_radius() -> f64 {
        2574.78f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Titan {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        0.6891031125771652f64,
        0f64,
        0f64,
        &[0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.456091543024577f64,
        0f64,
        0f64,
        &[0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        3.2565313114798795f64,
        0.39404258030637335f64,
        0f64,
        &[0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64] as &[f64],
    );
}
impl PointMass for Hyperion {
    fn gravitational_parameter() -> f64 {
        0.3704913747932265f64
    }
}
impl Ellipsoid for Hyperion {
    fn polar_radius() -> f64 {
        102.7f64
    }
    fn mean_radius() -> f64 {
        138.6f64
    }
}
impl TriAxial for Hyperion {
    fn subplanetary_radius() -> f64 {
        180.1f64
    }
    fn along_orbit_radius() -> f64 {
        133f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Hyperion {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl PointMass for Iapetus {
    fn gravitational_parameter() -> f64 {
        120.5151060137642f64
    }
}
impl Ellipsoid for Iapetus {
    fn polar_radius() -> f64 {
        712.1f64
    }
    fn mean_radius() -> f64 {
        734.5f64
    }
}
impl TriAxial for Iapetus {
    fn subplanetary_radius() -> f64 {
        745.7f64
    }
    fn along_orbit_radius() -> f64 {
        745.7f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Iapetus {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        5.552939548145159f64,
        -0.06892305216125608f64,
        0f64,
        &[] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.3095205377713455f64,
        -0.019949113350295186f64,
        0f64,
        &[] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        6.199409503083858f64,
        0.07920229445458282f64,
        0f64,
        &[] as &[f64],
    );
}
impl PointMass for Phoebe {
    fn gravitational_parameter() -> f64 {
        0.5547860052791678f64
    }
}
impl Ellipsoid for Phoebe {
    fn polar_radius() -> f64 {
        101.8f64
    }
    fn mean_radius() -> f64 {
        106.56666666666666f64
    }
}
impl TriAxial for Phoebe {
    fn subplanetary_radius() -> f64 {
        109.4f64
    }
    fn along_orbit_radius() -> f64 {
        108.5f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Phoebe {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients =
        (6.229080100367762f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients =
        (1.3578661580515883f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        3.116808978211474f64,
        16.26016798998745f64,
        0f64,
        &[] as &[f64],
    );
}
impl PointMass for Janus {
    fn gravitational_parameter() -> f64 {
        0.1265765099012197f64
    }
}
impl Ellipsoid for Janus {
    fn polar_radius() -> f64 {
        76.3f64
    }
    fn mean_radius() -> f64 {
        90.33333333333333f64
    }
}
impl TriAxial for Janus {
    fn subplanetary_radius() -> f64 {
        101.7f64
    }
    fn along_orbit_radius() -> f64 {
        93f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Janus {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        0.7082546104592989f64,
        -0.0006283185307179586f64,
        0f64,
        &[
            0f64,
            -0.028326693759867967f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.0004014257279586958f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.457698991265664f64,
        -0.00006981317007977319f64,
        0f64,
        &[
            0f64,
            -0.003193952531149623f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.000017453292519943296f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        1.0267771989482641f64,
        9.044924285944507f64,
        0f64,
        &[
            0f64,
            0.028152160834668535f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.0004014257279586958f64,
        ] as &[f64],
    );
}
impl PointMass for Epimetheus {
    fn gravitational_parameter() -> f64 {
        0.03512333288208074f64
    }
}
impl Ellipsoid for Epimetheus {
    fn polar_radius() -> f64 {
        53f64
    }
    fn mean_radius() -> f64 {
        58.4f64
    }
}
impl TriAxial for Epimetheus {
    fn subplanetary_radius() -> f64 {
        64.9f64
    }
    fn along_orbit_radius() -> f64 {
        57.3f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Epimetheus {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        0.7082546104592989f64,
        -0.0006283185307179586f64,
        0f64,
        &[
            -0.05503023131538121f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.0015009831567151233f64,
            0f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.457698991265664f64,
        -0.00006981317007977319f64,
        0f64,
        &[
            -0.006213372137099813f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.00008726646259971648f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        5.128999072835736f64,
        9.049370273103856f64,
        0f64,
        &[
            0.05468116546498235f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.0015009831567151233f64,
            0f64,
        ] as &[f64],
    );
}
impl PointMass for Helene {
    fn gravitational_parameter() -> f64 {
        0.0004757419551776972f64
    }
}
impl Ellipsoid for Helene {
    fn polar_radius() -> f64 {
        13.3f64
    }
    fn mean_radius() -> f64 {
        18.46666666666667f64
    }
}
impl TriAxial for Helene {
    fn subplanetary_radius() -> f64 {
        22.5f64
    }
    fn along_orbit_radius() -> f64 {
        19.6f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Helene {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        0.7129669994396837f64,
        -0.0006283185307179586f64,
        0f64,
        &[] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.4545573986120743f64,
        -0.00006981317007977319f64,
        0f64,
        &[] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        4.278151062488501f64,
        2.297157080652823f64,
        0f64,
        &[] as &[f64],
    );
}
impl Ellipsoid for Telesto {
    fn polar_radius() -> f64 {
        9.8f64
    }
    fn mean_radius() -> f64 {
        12.633333333333335f64
    }
}
impl TriAxial for Telesto {
    fn subplanetary_radius() -> f64 {
        16.3f64
    }
    fn along_orbit_radius() -> f64 {
        11.8f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Telesto {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        0.8815658051823358f64,
        -0.0006283185307179586f64,
        0f64,
        &[] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.4671237692264334f64,
        -0.00006981317007977319f64,
        0f64,
        &[] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        0.9927432785343747f64,
        3.328306811088206f64,
        0f64,
        &[] as &[f64],
    );
}
impl Ellipsoid for Calypso {
    fn polar_radius() -> f64 {
        6.3f64
    }
    fn mean_radius() -> f64 {
        10.3f64
    }
}
impl TriAxial for Calypso {
    fn subplanetary_radius() -> f64 {
        15.3f64
    }
    fn along_orbit_radius() -> f64 {
        9.3f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Calypso {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        0.6354743806511354f64,
        -0.0006283185307179586f64,
        0f64,
        &[] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.4842279958959779f64,
        -0.00006981317007977319f64,
        0f64,
        &[] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        2.679254934736495f64,
        3.327893239613983f64,
        0f64,
        &[] as &[f64],
    );
}
impl PointMass for Atlas {
    fn gravitational_parameter() -> f64 {
        0.0003718871247516475f64
    }
}
impl Ellipsoid for Atlas {
    fn polar_radius() -> f64 {
        9.4f64
    }
    fn mean_radius() -> f64 {
        15.899999999999999f64
    }
}
impl TriAxial for Atlas {
    fn subplanetary_radius() -> f64 {
        20.5f64
    }
    fn along_orbit_radius() -> f64 {
        17.8f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Atlas {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        0.7082546104592989f64,
        -0.0006283185307179586f64,
        0f64,
        &[] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.4578735241908636f64,
        -0.00006981317007977319f64,
        0f64,
        &[] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        2.4064599726497815f64,
        10.442409634437194f64,
        0f64,
        &[] as &[f64],
    );
}
impl PointMass for Prometheus {
    fn gravitational_parameter() -> f64 {
        0.0107520800100761f64
    }
}
impl Ellipsoid for Prometheus {
    fn polar_radius() -> f64 {
        28.2f64
    }
    fn mean_radius() -> f64 {
        46f64
    }
}
impl TriAxial for Prometheus {
    fn subplanetary_radius() -> f64 {
        68.2f64
    }
    fn along_orbit_radius() -> f64 {
        41.6f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Prometheus {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        0.7082546104592989f64,
        -0.0006283185307179586f64,
        0f64,
        &[] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.4578735241908636f64,
        -0.00006981317007977319f64,
        0f64,
        &[] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        5.1686180468560075f64,
        10.250126710744977f64,
        0f64,
        &[] as &[f64],
    );
}
impl PointMass for Pandora {
    fn gravitational_parameter() -> f64 {
        0.009290325122028795f64
    }
}
impl Ellipsoid for Pandora {
    fn polar_radius() -> f64 {
        31.5f64
    }
    fn mean_radius() -> f64 {
        41.5f64
    }
}
impl TriAxial for Pandora {
    fn subplanetary_radius() -> f64 {
        52.2f64
    }
    fn along_orbit_radius() -> f64 {
        40.8f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Pandora {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        0.7082546104592989f64,
        -0.0006283185307179586f64,
        0f64,
        &[] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.4578735241908636f64,
        -0.00006981317007977319f64,
        0f64,
        &[] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        2.8434904173491615f64,
        9.997055714535051f64,
        0f64,
        &[] as &[f64],
    );
}
impl Ellipsoid for Pan {
    fn polar_radius() -> f64 {
        10.4f64
    }
    fn mean_radius() -> f64 {
        14.333333333333334f64
    }
}
impl TriAxial for Pan {
    fn subplanetary_radius() -> f64 {
        17.2f64
    }
    fn along_orbit_radius() -> f64 {
        15.4f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Pan {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        0.7086036763096978f64,
        -0.0006283185307179586f64,
        0f64,
        &[] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        1.457349925415265f64,
        -0.00006981317007977319f64,
        0f64,
        &[] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        0.8517206749732328f64,
        10.92652906235538f64,
        0f64,
        &[] as &[f64],
    );
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Ymir {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Paaliaq {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Tarvos {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Ijiraq {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Suttungr {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Kiviuq {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Mundilfari {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Albiorix {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Skathi {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Erriapus {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Siarnaq {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Thrymr {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Narvi {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl Ellipsoid for Methone {
    fn polar_radius() -> f64 {
        1.21f64
    }
    fn mean_radius() -> f64 {
        1.4799999999999998f64
    }
}
impl TriAxial for Methone {
    fn subplanetary_radius() -> f64 {
        1.94f64
    }
    fn along_orbit_radius() -> f64 {
        1.29f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Methone {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl Ellipsoid for Pallene {
    fn polar_radius() -> f64 {
        1.8f64
    }
    fn mean_radius() -> f64 {
        2.2533333333333334f64
    }
}
impl TriAxial for Pallene {
    fn subplanetary_radius() -> f64 {
        2.88f64
    }
    fn along_orbit_radius() -> f64 {
        2.08f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Pallene {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl Ellipsoid for Polydeuces {
    fn polar_radius() -> f64 {
        1f64
    }
    fn mean_radius() -> f64 {
        1.2333333333333334f64
    }
}
impl TriAxial for Polydeuces {
    fn subplanetary_radius() -> f64 {
        1.5f64
    }
    fn along_orbit_radius() -> f64 {
        1.2f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Polydeuces {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl Ellipsoid for Daphnis {
    fn polar_radius() -> f64 {
        2.8f64
    }
    fn mean_radius() -> f64 {
        3.9666666666666663f64
    }
}
impl TriAxial for Daphnis {
    fn subplanetary_radius() -> f64 {
        4.6f64
    }
    fn along_orbit_radius() -> f64 {
        4.5f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Daphnis {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Aegir {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Bebhionn {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Bergelmir {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Bestla {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Farbauti {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Fenrir {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Fornjot {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Hati {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Hyrrokkin {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Kari {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Loge {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Skoll {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Surtur {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl Ellipsoid for Anthe {
    fn polar_radius() -> f64 {
        0.5f64
    }
    fn mean_radius() -> f64 {
        0.5f64
    }
}
impl TriAxial for Anthe {
    fn subplanetary_radius() -> f64 {
        0.5f64
    }
    fn along_orbit_radius() -> f64 {
        0.5f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Anthe {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Jarnsaxa {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Greip {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Tarqeq {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl Ellipsoid for Aegaeon {
    fn polar_radius() -> f64 {
        0.2f64
    }
    fn mean_radius() -> f64 {
        0.3833333333333333f64
    }
}
impl TriAxial for Aegaeon {
    fn subplanetary_radius() -> f64 {
        0.7f64
    }
    fn along_orbit_radius() -> f64 {
        0.25f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Aegaeon {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl PointMass for Ariel {
    fn gravitational_parameter() -> f64 {
        83.46344431770477f64
    }
}
impl Ellipsoid for Ariel {
    fn polar_radius() -> f64 {
        577.7f64
    }
    fn mean_radius() -> f64 {
        578.9f64
    }
}
impl TriAxial for Ariel {
    fn subplanetary_radius() -> f64 {
        581.1f64
    }
    fn along_orbit_radius() -> f64 {
        577.9f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Ariel {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.493001093409003f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.005061454830783556f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        -0.26354471705114374f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.004886921905584123f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        2.7265533574655416f64,
        -2.492952697630833f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.0008726646259971648f64,
            0.0013962634015954637f64,
        ] as &[f64],
    );
}
impl PointMass for Umbriel {
    fn gravitational_parameter() -> f64 {
        85.09338094489388f64
    }
}
impl Ellipsoid for Umbriel {
    fn polar_radius() -> f64 {
        584.7f64
    }
    fn mean_radius() -> f64 {
        584.7f64
    }
}
impl TriAxial for Umbriel {
    fn subplanetary_radius() -> f64 {
        584.7f64
    }
    fn along_orbit_radius() -> f64 {
        584.7f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Umbriel {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.493001093409003f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.003665191429188092f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        -0.26354471705114374f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.003490658503988659f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        1.885828256779873f64,
        -1.5161481881953498f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.0015707963267948964f64,
            0f64,
            0.0010471975511965976f64,
        ] as &[f64],
    );
}
impl PointMass for Titania {
    fn gravitational_parameter() -> f64 {
        226.9437003741248f64
    }
}
impl Ellipsoid for Titania {
    fn polar_radius() -> f64 {
        788.9f64
    }
    fn mean_radius() -> f64 {
        788.9f64
    }
}
impl TriAxial for Titania {
    fn subplanetary_radius() -> f64 {
        788.9f64
    }
    fn along_orbit_radius() -> f64 {
        788.9f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Titania {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.493001093409003f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.005061454830783556f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        -0.26354471705114374f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.004886921905584123f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        1.3568189605003917f64,
        -0.7217186318332268f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.0013962634015954637f64,
        ] as &[f64],
    );
}
impl PointMass for Oberon {
    fn gravitational_parameter() -> f64 {
        205.3234302535623f64
    }
}
impl Ellipsoid for Oberon {
    fn polar_radius() -> f64 {
        761.4f64
    }
    fn mean_radius() -> f64 {
        761.4f64
    }
}
impl TriAxial for Oberon {
    fn subplanetary_radius() -> f64 {
        761.4f64
    }
    fn along_orbit_radius() -> f64 {
        761.4f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Oberon {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.493001093409003f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.0027925268031909274f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        -0.26354471705114374f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.0027925268031909274f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        0.1181587903600161f64,
        -0.4666921966546346f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.0006981317007977319f64,
        ] as &[f64],
    );
}
impl PointMass for Miranda {
    fn gravitational_parameter() -> f64 {
        4.3195168992321f64
    }
}
impl Ellipsoid for Miranda {
    fn polar_radius() -> f64 {
        232.9f64
    }
    fn mean_radius() -> f64 {
        235.83333333333334f64
    }
}
impl TriAxial for Miranda {
    fn subplanetary_radius() -> f64 {
        240.4f64
    }
    fn along_orbit_radius() -> f64 {
        234.2f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Miranda {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.493001093409003f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.07696902001294993f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.0006981317007977319f64,
            0f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        -0.2631956512007449f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.07417649320975901f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.00034906585039886593f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        0.5358160803622591f64,
        -4.445191100713563f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.02007128639793479f64,
            -0.022165681500327987f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.0015707963267948964f64,
            0.002617993877991494f64,
        ] as &[f64],
    );
}
impl Ellipsoid for Cordelia {
    fn polar_radius() -> f64 {
        13f64
    }
    fn mean_radius() -> f64 {
        13f64
    }
}
impl TriAxial for Cordelia {
    fn subplanetary_radius() -> f64 {
        13f64
    }
    fn along_orbit_radius() -> f64 {
        13f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Cordelia {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.49090669830661f64,
        0f64,
        0f64,
        &[
            -0.002617993877991494f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        -0.2649409804527392f64,
        0f64,
        0f64,
        &[
            0.0024434609527920616f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        2.2286109218715593f64,
        -18.753921879266084f64,
        0f64,
        &[
            -0.0006981317007977319f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
}
impl Ellipsoid for Ophelia {
    fn polar_radius() -> f64 {
        15f64
    }
    fn mean_radius() -> f64 {
        15f64
    }
}
impl TriAxial for Ophelia {
    fn subplanetary_radius() -> f64 {
        15f64
    }
    fn along_orbit_radius() -> f64 {
        15f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Ophelia {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.49090669830661f64,
        0f64,
        0f64,
        &[
            0f64,
            -0.0015707963267948964f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        -0.2649409804527392f64,
        0f64,
        0f64,
        &[
            0f64,
            0.0015707963267948964f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        2.2750366799746087f64,
        -16.692447910262292f64,
        0f64,
        &[
            0f64,
            -0.0005235987755982988f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
}
impl Ellipsoid for Bianca {
    fn polar_radius() -> f64 {
        21f64
    }
    fn mean_radius() -> f64 {
        21f64
    }
}
impl TriAxial for Bianca {
    fn subplanetary_radius() -> f64 {
        21f64
    }
    fn along_orbit_radius() -> f64 {
        21f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Bianca {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.49090669830661f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            -0.0027925268031909274f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        -0.2649409804527392f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0.0027925268031909274f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        1.8406242291532198f64,
        -14.458158751655587f64,
        0f64,
        &[
            0f64,
            0f64,
            -0.0006981317007977319f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
}
impl Ellipsoid for Cressida {
    fn polar_radius() -> f64 {
        31f64
    }
    fn mean_radius() -> f64 {
        31f64
    }
}
impl TriAxial for Cressida {
    fn subplanetary_radius() -> f64 {
        31f64
    }
    fn along_orbit_radius() -> f64 {
        31f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Cressida {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.49090669830661f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            -0.0006981317007977319f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        -0.2649409804527392f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0.0006981317007977319f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        1.0325367854798453f64,
        -13.553906388910956f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            -0.00017453292519943296f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
}
impl Ellipsoid for Desdemona {
    fn polar_radius() -> f64 {
        27f64
    }
    fn mean_radius() -> f64 {
        27f64
    }
}
impl TriAxial for Desdemona {
    fn subplanetary_radius() -> f64 {
        27f64
    }
    fn along_orbit_radius() -> f64 {
        27f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Desdemona {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.49090669830661f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            -0.0029670597283903604f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        -0.2649409804527392f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0.0027925268031909274f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        1.6594590527962085f64,
        -13.265430289266899f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            -0.0006981317007977319f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
}
impl Ellipsoid for Juliet {
    fn polar_radius() -> f64 {
        42f64
    }
    fn mean_radius() -> f64 {
        42f64
    }
}
impl TriAxial for Juliet {
    fn subplanetary_radius() -> f64 {
        42f64
    }
    fn along_orbit_radius() -> f64 {
        42f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Juliet {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.49090669830661f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.0010471975511965976f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        -0.2649409804527392f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.0010471975511965976f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        5.2806681848340435f64,
        -12.74309158902866f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.00034906585039886593f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
}
impl Ellipsoid for Portia {
    fn polar_radius() -> f64 {
        54f64
    }
    fn mean_radius() -> f64 {
        54f64
    }
}
impl TriAxial for Portia {
    fn subplanetary_radius() -> f64 {
        54f64
    }
    fn along_orbit_radius() -> f64 {
        54f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Portia {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.49090669830661f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.0015707963267948964f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        -0.2649409804527392f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.0015707963267948964f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        0.4368559117741807f64,
        -12.243250601727652f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.00034906585039886593f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
}
impl Ellipsoid for Rosalind {
    fn polar_radius() -> f64 {
        27f64
    }
    fn mean_radius() -> f64 {
        27f64
    }
}
impl TriAxial for Rosalind {
    fn subplanetary_radius() -> f64 {
        27f64
    }
    fn along_orbit_radius() -> f64 {
        27f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Rosalind {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.49090669830661f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.005061454830783556f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        -0.2649409804527392f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.004886921905584123f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        5.496041814530144f64,
        -11.250935609538423f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.0013962634015954637f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
}
impl Ellipsoid for Belinda {
    fn polar_radius() -> f64 {
        33f64
    }
    fn mean_radius() -> f64 {
        33f64
    }
}
impl TriAxial for Belinda {
    fn subplanetary_radius() -> f64 {
        33f64
    }
    fn along_orbit_radius() -> f64 {
        33f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Belinda {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.49090669830661f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.0005235987755982988f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        -0.2649409804527392f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.0005235987755982988f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        5.191656392982332f64,
        -10.076882135239488f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.00017453292519943296f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
}
impl Ellipsoid for Puck {
    fn polar_radius() -> f64 {
        77f64
    }
    fn mean_radius() -> f64 {
        77f64
    }
}
impl TriAxial for Puck {
    fn subplanetary_radius() -> f64 {
        77f64
    }
    fn along_orbit_radius() -> f64 {
        77f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Puck {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        4.49090669830661f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.005759586531581287f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        -0.2649409804527392f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.0054105206811824215f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        1.5924384095196262f64,
        -8.247467318113788f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.0015707963267948964f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Caliban {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Sycorax {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Prospero {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Setebos {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Stephano {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Trinculo {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Francisco {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Margaret {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Ferdinand {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Perdita {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Mab {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Cupid {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl PointMass for Triton {
    fn gravitational_parameter() -> f64 {
        1428.495462910464f64
    }
}
impl Ellipsoid for Triton {
    fn polar_radius() -> f64 {
        1352.6f64
    }
    fn mean_radius() -> f64 {
        1352.6f64
    }
}
impl TriAxial for Triton {
    fn subplanetary_radius() -> f64 {
        1352.6f64
    }
    fn along_orbit_radius() -> f64 {
        1352.6f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Triton {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        5.224817648770225f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.5646140130201657f64,
            0f64,
            -0.1096066770252439f64,
            -0.03630284844148206f64,
            -0.012915436464758038f64,
            -0.004886921905584123f64,
            -0.0019198621771937625f64,
            -0.0012217304763960308f64,
            -0.00034906585039886593f64,
            -0.00017453292519943296f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        0.7185520530460655f64,
        0f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.3935717463247213f64,
            0f64,
            0.03665191429188092f64,
            0.009599310885968814f64,
            0.0027925268031909274f64,
            0.0008726646259971648f64,
            0.00034906585039886593f64,
            0.00017453292519943296f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        5.175424830938785f64,
        -1.069140942327404f64,
        0f64,
        &[
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.3883357585687383f64,
            0f64,
            0.11746065865921838f64,
            0.03577924966588375f64,
            0.012915436464758038f64,
            0.004886921905584123f64,
            0.0019198621771937625f64,
            0.0008726646259971648f64,
            0.00034906585039886593f64,
            0.00017453292519943296f64,
        ] as &[f64],
    );
}
impl Ellipsoid for Nereid {
    fn polar_radius() -> f64 {
        170f64
    }
    fn mean_radius() -> f64 {
        170f64
    }
}
impl TriAxial for Nereid {
    fn subplanetary_radius() -> f64 {
        170f64
    }
    fn along_orbit_radius() -> f64 {
        170f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Nereid {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl PointMass for Naiad {
    fn gravitational_parameter() -> f64 {
        0.008530281246540886f64
    }
}
impl Ellipsoid for Naiad {
    fn polar_radius() -> f64 {
        29f64
    }
    fn mean_radius() -> f64 {
        29f64
    }
}
impl TriAxial for Naiad {
    fn subplanetary_radius() -> f64 {
        29f64
    }
    fn along_orbit_radius() -> f64 {
        29f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Naiad {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        5.224817648770225f64,
        0f64,
        0f64,
        &[
            0.012217304763960306f64,
            -0.11327186845443199f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.004363323129985824f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        0.7567747636647413f64,
        0f64,
        0f64,
        &[
            -0.00890117918517108f64,
            -0.08290313946973066f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.0015707963267948964f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        4.434183497616794f64,
        21.342656148360604f64,
        0f64,
        &[
            -0.008377580409572781f64,
            0.07679448708775051f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.00471238898038469f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
}
impl PointMass for Thalassa {
    fn gravitational_parameter() -> f64 {
        0.0235887319799217f64
    }
}
impl Ellipsoid for Thalassa {
    fn polar_radius() -> f64 {
        40f64
    }
    fn mean_radius() -> f64 {
        40f64
    }
}
impl TriAxial for Thalassa {
    fn subplanetary_radius() -> f64 {
        40f64
    }
    fn along_orbit_radius() -> f64 {
        40f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Thalassa {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        5.224817648770225f64,
        0f64,
        0f64,
        &[
            0.012217304763960306f64,
            0f64,
            -0.004886921905584123f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        0.7583455599915362f64,
        0f64,
        0f64,
        &[
            -0.00890117918517108f64,
            0f64,
            -0.003665191429188092f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        1.7812830345854127f64,
        20.171739891174827f64,
        0f64,
        &[
            -0.008377580409572781f64,
            0f64,
            0.0033161255787892262f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
}
impl PointMass for Despina {
    fn gravitational_parameter() -> f64 {
        0.1167318403814998f64
    }
}
impl Ellipsoid for Despina {
    fn polar_radius() -> f64 {
        74f64
    }
    fn mean_radius() -> f64 {
        74f64
    }
}
impl TriAxial for Despina {
    fn subplanetary_radius() -> f64 {
        74f64
    }
    fn along_orbit_radius() -> f64 {
        74f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Despina {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        5.224817648770225f64,
        0f64,
        0f64,
        &[
            0.012217304763960306f64,
            0f64,
            0f64,
            -0.0015707963267948964f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        0.7583455599915362f64,
        0f64,
        0f64,
        &[
            -0.00890117918517108f64,
            0f64,
            0f64,
            -0.0012217304763960308f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        5.34960869028782f64,
        18.77510290185297f64,
        0f64,
        &[
            -0.008552113334772215f64,
            0f64,
            0f64,
            0.0010471975511965976f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
}
impl PointMass for Galatea {
    fn gravitational_parameter() -> f64 {
        0.189898503906069f64
    }
}
impl Ellipsoid for Galatea {
    fn polar_radius() -> f64 {
        79f64
    }
    fn mean_radius() -> f64 {
        79f64
    }
}
impl TriAxial for Galatea {
    fn subplanetary_radius() -> f64 {
        79f64
    }
    fn along_orbit_radius() -> f64 {
        79f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Galatea {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        5.224817648770225f64,
        0f64,
        0f64,
        &[
            0.012217304763960306f64,
            0f64,
            0f64,
            0f64,
            -0.0012217304763960308f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        0.7579964941411373f64,
        0f64,
        0f64,
        &[
            -0.00890117918517108f64,
            0f64,
            0f64,
            0f64,
            -0.0008726646259971648f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        4.504520266472165f64,
        14.6548275586037f64,
        0f64,
        &[
            -0.008377580409572781f64,
            0f64,
            0f64,
            0f64,
            0.0008726646259971648f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
}
impl PointMass for Larissa {
    fn gravitational_parameter() -> f64 {
        0.2548437405693583f64
    }
}
impl Ellipsoid for Larissa {
    fn polar_radius() -> f64 {
        96f64
    }
    fn mean_radius() -> f64 {
        96f64
    }
}
impl TriAxial for Larissa {
    fn subplanetary_radius() -> f64 {
        96f64
    }
    fn along_orbit_radius() -> f64 {
        96f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Larissa {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        5.224817648770225f64,
        0f64,
        0f64,
        &[
            0.012217304763960306f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.00471238898038469f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        0.7576474282907384f64,
        0f64,
        0f64,
        &[
            -0.00890117918517108f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.003490658503988659f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        3.1312952110030268f64,
        11.328119671568512f64,
        0f64,
        &[
            -0.008377580409572781f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.0033161255787892262f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
}
impl PointMass for Proteus {
    fn gravitational_parameter() -> f64 {
        2.583422379120727f64
    }
}
impl Ellipsoid for Proteus {
    fn polar_radius() -> f64 {
        201f64
    }
    fn mean_radius() -> f64 {
        209f64
    }
}
impl TriAxial for Proteus {
    fn subplanetary_radius() -> f64 {
        218f64
    }
    fn along_orbit_radius() -> f64 {
        208f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Proteus {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (
        5.22324685244343f64,
        0f64,
        0f64,
        &[
            0.012217304763960306f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.0008726646259971648f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (
        0.7489207820307667f64,
        0f64,
        0f64,
        &[
            -0.00890117918517108f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            -0.0006981317007977319f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        1.6297884555123048f64,
        5.598412754411688f64,
        0f64,
        &[
            -0.008377580409572781f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0.0006981317007977319f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
            0f64,
        ] as &[f64],
    );
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Halimede {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Psamathe {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Sao {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Laomedeia {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Neso {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl PointMass for Charon {
    fn gravitational_parameter() -> f64 {
        105.8799888601881f64
    }
}
impl Ellipsoid for Charon {
    fn polar_radius() -> f64 {
        606f64
    }
    fn mean_radius() -> f64 {
        606f64
    }
}
impl TriAxial for Charon {
    fn subplanetary_radius() -> f64 {
        606f64
    }
    fn along_orbit_radius() -> f64 {
        606f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Charon {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients =
        (2.3211657321048187f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients =
        (-0.10756464180041053f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (
        2.1414317257344426f64,
        0.9837115923543857f64,
        0f64,
        &[] as &[f64],
    );
}
impl PointMass for Nix {
    fn gravitational_parameter() -> f64 {
        0.00304817564816976f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Nix {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl PointMass for Hydra {
    fn gravitational_parameter() -> f64 {
        0.003211039206155255f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Hydra {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl PointMass for Kerberos {
    fn gravitational_parameter() -> f64 {
        0.001110040850536676f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Kerberos {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
impl PointMass for Styx {
    fn gravitational_parameter() -> f64 {
        0f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Styx {
    const NUTATION_PRECESSION_COEFFICIENTS: NutationPrecessionCoefficients =
        (&[] as &[f64], &[] as &[f64]);
    const RIGHT_ASCENSION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const DECLINATION_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
    const PRIME_MERIDIAN_COEFFICIENTS: PolynomialCoefficients = (0f64, 0f64, 0f64, &[] as &[f64]);
}
#[cfg(test)]
#[allow(clippy::approx_constant)]
mod tests {
    use super::*;
    #[test]
    fn test_point_mass_301() {
        assert_eq!(Moon::gravitational_parameter(), 4902.80011845755f64);
    }
    #[test]
    fn test_tri_axial_301() {
        assert_eq!(Moon::polar_radius(), 1737.4f64);
        assert_eq!(Moon::mean_radius(), 1737.4000000000003f64);
        assert_eq!(Moon::subplanetary_radius(), 1737.4f64);
        assert_eq!(Moon::along_orbit_radius(), 1737.4f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_301() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Moon::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_301() {
        assert_eq!(
            (
                4.712299968592838f64,
                0.000054105206811824215f64,
                0f64,
                &[
                    -0.06769608569710406f64,
                    -0.0021013764194011725f64,
                    0.0012217304763960308f64,
                    -0.0003001966313430247f64,
                    0f64,
                    0.0001256637061435917f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.00009075712110370513f64,
                    0f64,
                    0f64,
                    0.00007504915783575618f64
                ] as &[f64]
            ),
            Moon::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_301() {
        assert_eq!(
            (
                1.161328121643011f64,
                0.00022689280275926284f64,
                0f64,
                &[
                    0.02691123173650057f64,
                    0.0004171336912266448f64,
                    -0.00048520153205442357f64,
                    0.0001186823891356144f64,
                    0f64,
                    -0.00005061454830783555f64,
                    0.000015707963267948964f64,
                    0f64,
                    0f64,
                    0.000013962634015954637f64,
                    0f64,
                    0f64,
                    -0.000015707963267948964f64
                ] as &[f64]
            ),
            Moon::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_301() {
        assert_eq!(
            (
                0.668832858644503f64,
                0.22997083313948888f64,
                -0.000000000000024434609527920614f64,
                &[
                    0.06215117466351808f64,
                    0.00210835773640915f64,
                    -0.0011205013797803594f64,
                    0.0002757620218151041f64,
                    0.0004398229715025711f64,
                    -0.00011519173063162575f64,
                    -0.00008203047484373349f64,
                    -0.00008028514559173915f64,
                    0.000048869219055841225f64,
                    0.00009075712110370513f64,
                    0.00006981317007977319f64,
                    0.00003316125578789226f64,
                    -0.0000767944870877505f64
                ] as &[f64]
            ),
            Moon::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_401() {
        assert_eq!(Phobos::gravitational_parameter(), 0.0007087546066894452f64);
    }
    #[test]
    fn test_tri_axial_401() {
        assert_eq!(Phobos::polar_radius(), 9.1f64);
        assert_eq!(Phobos::mean_radius(), 11.166666666666666f64);
        assert_eq!(Phobos::subplanetary_radius(), 13f64);
        assert_eq!(Phobos::along_orbit_radius(), 11.4f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_401() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Phobos::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_401() {
        assert_eq!(
            (
                5.544399941316208f64,
                -0.001892691938596266f64,
                0f64,
                &[
                    -0.031141630416121578f64,
                    0.00038621064567151f64,
                    -0.00017946365486924213f64,
                    -0.00008300698656022431f64
                ] as &[f64]
            ),
            Phobos::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_401() {
        assert_eq!(
            (
                0.9230395870244597f64,
                -0.0010707081834185127f64,
                0f64,
                &[
                    -0.018765175709923063f64,
                    0.00011669725164439606f64,
                    -0.00011322648989388013f64,
                    0.000049144282945955534f64
                ] as &[f64]
            ),
            Phobos::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_401() {
        assert_eq!(
            (
                0.6141419961301966f64,
                19.702057793318815f64,
                0.00000000016643698911600935f64,
                &[
                    0.02485728795564792f64,
                    -0.0003968499982587423f64,
                    0.0000716825922415843f64,
                    0.00011029852554073445f64,
                    -0.019949113350295186f64
                ] as &[f64]
            ),
            Phobos::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_402() {
        assert_eq!(Deimos::gravitational_parameter(), 0.00009615569648120313f64);
    }
    #[test]
    fn test_tri_axial_402() {
        assert_eq!(Deimos::polar_radius(), 5.1f64);
        assert_eq!(Deimos::mean_radius(), 6.3f64);
        assert_eq!(Deimos::subplanetary_radius(), 7.8f64);
        assert_eq!(Deimos::along_orbit_radius(), 6f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_402() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Deimos::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_402() {
        assert_eq!(
            (
                5.526708263174914f64,
                -0.0018357397507085887f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.05396867424229676f64,
                    0.004010877798556321f64,
                    0.0011202666329959662f64,
                    0.00044218562371099577f64,
                    0.00013590791618817245f64
                ] as &[f64]
            ),
            Deimos::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_402() {
        assert_eq!(
            (
                0.9339242922383507f64,
                -0.0010435487658623783f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.032102888827614605f64,
                    0.002500240004017941f64,
                    0.00033360380402252296f64,
                    -0.0002587607695714273f64,
                    0.00003358537079612689f64
                ] as &[f64]
            ),
            Deimos::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_402() {
        assert_eq!(
            (
                1.3857797243489947f64,
                4.977013864082068f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.047814137677880446f64,
                    -0.006975837721323607f64,
                    -0.0011455047921115052f64,
                    -0.0005084039391304362f64,
                    0.0002965593651818685f64
                ] as &[f64]
            ),
            Deimos::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_501() {
        assert_eq!(Io::gravitational_parameter(), 5959.915466180539f64);
    }
    #[test]
    fn test_tri_axial_501() {
        assert_eq!(Io::polar_radius(), 1815.7f64);
        assert_eq!(Io::mean_radius(), 1821.5f64);
        assert_eq!(Io::subplanetary_radius(), 1829.4f64);
        assert_eq!(Io::along_orbit_radius(), 1819.4f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_501() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Io::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_501() {
        assert_eq!(
            (
                4.678355059970801f64,
                -0.00015707963267948965f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0.0016406094968746698f64,
                    0.0004188790204786391f64
                ] as &[f64]
            ),
            Io::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_501() {
        assert_eq!(
            (
                1.1257373675363425f64,
                0.00005235987755982989f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0.0006981317007977319f64,
                    0.00019198621771937625f64
                ] as &[f64]
            ),
            Io::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_501() {
        assert_eq!(
            (
                3.4974652880714365f64,
                3.551552235248627f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    -0.0014835298641951802f64,
                    -0.0003839724354387525f64
                ] as &[f64]
            ),
            Io::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_502() {
        assert_eq!(Europa::gravitational_parameter(), 3202.712099607295f64);
    }
    #[test]
    fn test_tri_axial_502() {
        assert_eq!(Europa::polar_radius(), 1559.5f64);
        assert_eq!(Europa::mean_radius(), 1560.8f64);
        assert_eq!(Europa::subplanetary_radius(), 1562.6f64);
        assert_eq!(Europa::along_orbit_radius(), 1560.3f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_502() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Europa::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_502() {
        assert_eq!(
            (
                4.678878658746398f64,
                -0.00015707963267948965f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0.01895427567665842f64,
                    0.0010471975511965976f64,
                    0.0002617993877991494f64,
                    0.00015707963267948965f64
                ] as &[f64]
            ),
            Europa::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_502() {
        assert_eq!(
            (
                1.125911900461542f64,
                0.00005235987755982989f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0.008168140899333463f64,
                    0.0004537856055185257f64,
                    0.00012217304763960306f64,
                    0.00003490658503988659f64
                ] as &[f64]
            ),
            Europa::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_502() {
        assert_eq!(
            (
                0.6287025031533974f64,
                1.7693227033738699f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    -0.01710422666954443f64,
                    -0.0009424777960769379f64,
                    -0.0002443460952792061f64,
                    -0.00013962634015954637f64
                ] as &[f64]
            ),
            Europa::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_503() {
        assert_eq!(Ganymede::gravitational_parameter(), 9887.832752719638f64);
    }
    #[test]
    fn test_tri_axial_503() {
        assert_eq!(Ganymede::polar_radius(), 2631.2f64);
        assert_eq!(Ganymede::mean_radius(), 2631.2f64);
        assert_eq!(Ganymede::subplanetary_radius(), 2631.2f64);
        assert_eq!(Ganymede::along_orbit_radius(), 2631.2f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_503() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Ganymede::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_503() {
        assert_eq!(
            (
                4.680973053848792f64,
                -0.00015707963267948965f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    -0.0006457718232379018f64,
                    0.0075223690760955605f64,
                    0.0015882496193148398f64
                ] as &[f64]
            ),
            Ganymede::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_503() {
        assert_eq!(
            (
                1.1269590980127384f64,
                0.00005235987755982989f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    -0.00027925268031909274f64,
                    0.003246312408709453f64,
                    0.0006806784082777885f64
                ] as &[f64]
            ),
            Ganymede::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_503() {
        assert_eq!(
            (
                0.7690618815987814f64,
                0.8782079330731682f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0.0005759586531581288f64,
                    -0.006789330790257942f64,
                    -0.0014311699866353504f64
                ] as &[f64]
            ),
            Ganymede::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_504() {
        assert_eq!(Callisto::gravitational_parameter(), 7179.283402579837f64);
    }
    #[test]
    fn test_tri_axial_504() {
        assert_eq!(Callisto::polar_radius(), 2410.3f64);
        assert_eq!(Callisto::mean_radius(), 2410.3f64);
        assert_eq!(Callisto::subplanetary_radius(), 2410.3f64);
        assert_eq!(Callisto::along_orbit_radius(), 2410.3f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_504() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Callisto::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_504() {
        assert_eq!(
            (
                4.690048765959163f64,
                -0.00015707963267948965f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.001186823891356144f64,
                    0.010297442586766544f64,
                    0f64,
                    0.00017453292519943296f64
                ] as &[f64]
            ),
            Callisto::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_504() {
        assert_eq!(
            (
                1.1314969540679238f64,
                0.00005235987755982989f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0005061454830783556f64,
                    0.004433136300065597f64,
                    0f64,
                    -0.00006981317007977319f64
                ] as &[f64]
            ),
            Callisto::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_504() {
        assert_eq!(
            (
                4.529303941850484f64,
                0.37648622085811195f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.001064650843716541f64,
                    -0.009302604913129777f64,
                    0f64,
                    -0.00015707963267948965f64
                ] as &[f64]
            ),
            Callisto::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_505() {
        assert_eq!(Amalthea::gravitational_parameter(), 0.1645634534798259f64);
    }
    #[test]
    fn test_tri_axial_505() {
        assert_eq!(Amalthea::polar_radius(), 64f64);
        assert_eq!(Amalthea::mean_radius(), 87.33333333333333f64);
        assert_eq!(Amalthea::subplanetary_radius(), 125f64);
        assert_eq!(Amalthea::along_orbit_radius(), 73f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_505() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Amalthea::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_505() {
        assert_eq!(
            (
                4.678355059970801f64,
                -0.00015707963267948965f64,
                0f64,
                &[
                    -0.014660765716752368f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.00017453292519943296f64,
                    0f64
                ] as &[f64]
            ),
            Amalthea::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_505() {
        assert_eq!(
            (
                1.125562834611143f64,
                0.00005235987755982989f64,
                0f64,
                &[
                    -0.006283185307179586f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Amalthea::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_505() {
        assert_eq!(
            (
                4.043404278095263f64,
                12.612298185680531f64,
                0f64,
                &[
                    0.013264502315156905f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.00017453292519943296f64,
                    0f64
                ] as &[f64]
            ),
            Amalthea::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_506() {
        assert_eq!(Himalia::gravitational_parameter(), 0.1515524299611265f64);
    }
    #[test]
    fn test_tri_axial_506() {
        assert_eq!(Himalia::polar_radius(), 85f64);
        assert_eq!(Himalia::mean_radius(), 85f64);
        assert_eq!(Himalia::subplanetary_radius(), 85f64);
        assert_eq!(Himalia::along_orbit_radius(), 85f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_506() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Himalia::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_506() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Himalia::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_506() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Himalia::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_506() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Himalia::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_507() {
        assert_eq!(Elara::polar_radius(), 40f64);
        assert_eq!(Elara::mean_radius(), 40f64);
        assert_eq!(Elara::subplanetary_radius(), 40f64);
        assert_eq!(Elara::along_orbit_radius(), 40f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_507() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Elara::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_507() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Elara::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_507() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Elara::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_507() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Elara::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_508() {
        assert_eq!(Pasiphae::polar_radius(), 18f64);
        assert_eq!(Pasiphae::mean_radius(), 18f64);
        assert_eq!(Pasiphae::subplanetary_radius(), 18f64);
        assert_eq!(Pasiphae::along_orbit_radius(), 18f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_508() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Pasiphae::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_508() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Pasiphae::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_508() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Pasiphae::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_508() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Pasiphae::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_509() {
        assert_eq!(Sinope::polar_radius(), 14f64);
        assert_eq!(Sinope::mean_radius(), 14f64);
        assert_eq!(Sinope::subplanetary_radius(), 14f64);
        assert_eq!(Sinope::along_orbit_radius(), 14f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_509() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Sinope::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_509() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sinope::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_509() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sinope::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_509() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sinope::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_510() {
        assert_eq!(Lysithea::polar_radius(), 12f64);
        assert_eq!(Lysithea::mean_radius(), 12f64);
        assert_eq!(Lysithea::subplanetary_radius(), 12f64);
        assert_eq!(Lysithea::along_orbit_radius(), 12f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_510() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Lysithea::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_510() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Lysithea::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_510() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Lysithea::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_510() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Lysithea::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_511() {
        assert_eq!(Carme::polar_radius(), 15f64);
        assert_eq!(Carme::mean_radius(), 15f64);
        assert_eq!(Carme::subplanetary_radius(), 15f64);
        assert_eq!(Carme::along_orbit_radius(), 15f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_511() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Carme::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_511() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Carme::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_511() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Carme::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_511() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Carme::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_512() {
        assert_eq!(Ananke::polar_radius(), 10f64);
        assert_eq!(Ananke::mean_radius(), 10f64);
        assert_eq!(Ananke::subplanetary_radius(), 10f64);
        assert_eq!(Ananke::along_orbit_radius(), 10f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_512() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Ananke::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_512() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ananke::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_512() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ananke::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_512() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ananke::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_513() {
        assert_eq!(Leda::polar_radius(), 5f64);
        assert_eq!(Leda::mean_radius(), 5f64);
        assert_eq!(Leda::subplanetary_radius(), 5f64);
        assert_eq!(Leda::along_orbit_radius(), 5f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_513() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Leda::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_513() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Leda::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_513() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Leda::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_513() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Leda::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_514() {
        assert_eq!(Thebe::gravitational_parameter(), 0.030148f64);
    }
    #[test]
    fn test_tri_axial_514() {
        assert_eq!(Thebe::polar_radius(), 42f64);
        assert_eq!(Thebe::mean_radius(), 49.666666666666664f64);
        assert_eq!(Thebe::subplanetary_radius(), 58f64);
        assert_eq!(Thebe::along_orbit_radius(), 49f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_514() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Thebe::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_514() {
        assert_eq!(
            (
                4.678355059970801f64,
                -0.00015707963267948965f64,
                0f64,
                &[
                    0f64,
                    -0.03682644721708035f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0006981317007977319f64
                ] as &[f64]
            ),
            Thebe::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_514() {
        assert_eq!(
            (
                1.125562834611143f64,
                0.00005235987755982989f64,
                0f64,
                &[
                    0f64,
                    -0.0158824961931484f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.00017453292519943296f64
                ] as &[f64]
            ),
            Thebe::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_514() {
        assert_eq!(
            (
                0.1494001839707146f64,
                9.31482937374367f64,
                0f64,
                &[
                    0f64,
                    0.033335788713091695f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0006981317007977319f64
                ] as &[f64]
            ),
            Thebe::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_515() {
        assert_eq!(Adrastea::gravitational_parameter(), 0.000139f64);
    }
    #[test]
    fn test_tri_axial_515() {
        assert_eq!(Adrastea::polar_radius(), 7f64);
        assert_eq!(Adrastea::mean_radius(), 8.333333333333334f64);
        assert_eq!(Adrastea::subplanetary_radius(), 10f64);
        assert_eq!(Adrastea::along_orbit_radius(), 8f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_515() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Adrastea::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_515() {
        assert_eq!(
            (
                4.678355059970801f64,
                -0.00015707963267948965f64,
                0f64,
                &[] as &[f64]
            ),
            Adrastea::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_515() {
        assert_eq!(
            (
                1.125562834611143f64,
                0.00005235987755982989f64,
                0f64,
                &[] as &[f64]
            ),
            Adrastea::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_515() {
        assert_eq!(
            (
                0.5810201079889122f64,
                21.066100687650238f64,
                0f64,
                &[] as &[f64]
            ),
            Adrastea::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_516() {
        assert_eq!(Metis::gravitational_parameter(), 0.002501f64);
    }
    #[test]
    fn test_tri_axial_516() {
        assert_eq!(Metis::polar_radius(), 17f64);
        assert_eq!(Metis::mean_radius(), 22.333333333333332f64);
        assert_eq!(Metis::subplanetary_radius(), 30f64);
        assert_eq!(Metis::along_orbit_radius(), 20f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_516() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Metis::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_516() {
        assert_eq!(
            (
                4.678355059970801f64,
                -0.00015707963267948965f64,
                0f64,
                &[] as &[f64]
            ),
            Metis::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_516() {
        assert_eq!(
            (
                1.125562834611143f64,
                0.00005235987755982989f64,
                0f64,
                &[] as &[f64]
            ),
            Metis::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_516() {
        assert_eq!(
            (
                6.040410008227175f64,
                21.3149160457997f64,
                0f64,
                &[] as &[f64]
            ),
            Metis::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_517() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Callirrhoe::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_517() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Callirrhoe::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_517() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Callirrhoe::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_517() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Callirrhoe::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_518() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Themisto::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_518() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Themisto::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_518() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Themisto::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_518() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Themisto::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_519() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Magaclite::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_519() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Magaclite::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_519() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Magaclite::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_519() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Magaclite::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_520() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Taygete::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_520() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Taygete::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_520() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Taygete::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_520() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Taygete::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_521() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Chaldene::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_521() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Chaldene::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_521() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Chaldene::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_521() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Chaldene::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_522() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Harpalyke::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_522() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Harpalyke::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_522() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Harpalyke::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_522() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Harpalyke::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_523() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Kalyke::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_523() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kalyke::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_523() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kalyke::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_523() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kalyke::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_524() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Iocaste::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_524() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Iocaste::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_524() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Iocaste::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_524() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Iocaste::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_525() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Erinome::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_525() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Erinome::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_525() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Erinome::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_525() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Erinome::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_526() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Isonoe::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_526() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Isonoe::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_526() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Isonoe::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_526() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Isonoe::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_527() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Praxidike::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_527() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Praxidike::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_527() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Praxidike::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_527() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Praxidike::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_528() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Autonoe::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_528() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Autonoe::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_528() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Autonoe::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_528() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Autonoe::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_529() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Thyone::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_529() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Thyone::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_529() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Thyone::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_529() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Thyone::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_530() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Hermippe::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_530() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hermippe::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_530() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hermippe::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_530() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hermippe::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_531() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Aitne::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_531() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aitne::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_531() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aitne::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_531() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aitne::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_532() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Eurydome::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_532() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Eurydome::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_532() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Eurydome::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_532() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Eurydome::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_533() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Euanthe::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_533() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Euanthe::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_533() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Euanthe::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_533() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Euanthe::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_534() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Euporie::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_534() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Euporie::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_534() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Euporie::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_534() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Euporie::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_535() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Orthosie::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_535() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Orthosie::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_535() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Orthosie::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_535() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Orthosie::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_536() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Sponde::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_536() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sponde::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_536() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sponde::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_536() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sponde::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_537() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Kale::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_537() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kale::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_537() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kale::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_537() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kale::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_538() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Pasithee::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_538() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Pasithee::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_538() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Pasithee::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_538() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Pasithee::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_539() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Hegemone::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_539() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hegemone::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_539() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hegemone::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_539() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hegemone::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_540() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Mneme::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_540() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Mneme::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_540() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Mneme::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_540() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Mneme::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_541() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Aoede::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_541() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aoede::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_541() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aoede::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_541() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aoede::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_542() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Thelxinoe::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_542() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Thelxinoe::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_542() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Thelxinoe::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_542() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Thelxinoe::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_543() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Arche::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_543() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Arche::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_543() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Arche::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_543() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Arche::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_544() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Kallichore::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_544() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kallichore::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_544() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kallichore::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_544() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kallichore::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_545() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Helike::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_545() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Helike::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_545() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Helike::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_545() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Helike::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_546() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Carpo::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_546() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Carpo::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_546() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Carpo::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_546() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Carpo::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_547() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Eukelade::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_547() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Eukelade::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_547() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Eukelade::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_547() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Eukelade::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_548() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Cyllene::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_548() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Cyllene::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_548() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Cyllene::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_548() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Cyllene::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_549() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Kore::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_549() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kore::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_549() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kore::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_549() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kore::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_550() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Herse::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_550() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Herse::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_550() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Herse::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_550() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Herse::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_553() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Dia::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_553() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Dia::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_553() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Dia::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_553() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Dia::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_601() {
        assert_eq!(Mimas::gravitational_parameter(), 2.503488768152587f64);
    }
    #[test]
    fn test_tri_axial_601() {
        assert_eq!(Mimas::polar_radius(), 190.6f64);
        assert_eq!(Mimas::mean_radius(), 198.36666666666667f64);
        assert_eq!(Mimas::subplanetary_radius(), 207.8f64);
        assert_eq!(Mimas::along_orbit_radius(), 196.7f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_601() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Mimas::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_601() {
        assert_eq!(
            (
                0.7096508738608943f64,
                -0.0006283185307179586f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0.2366666465704311f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Mimas::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_601() {
        assert_eq!(
            (
                1.457698991265664f64,
                -0.00006981317007977319f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    -0.026703537555513242f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Mimas::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_601() {
        assert_eq!(
            (
                5.819974923700291f64,
                6.667062709440567f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    -0.23527038316883564f64,
                    0f64,
                    -0.7827801695194568f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Mimas::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_602() {
        assert_eq!(Enceladus::gravitational_parameter(), 7.210366688598896f64);
    }
    #[test]
    fn test_tri_axial_602() {
        assert_eq!(Enceladus::polar_radius(), 248.3f64);
        assert_eq!(Enceladus::mean_radius(), 252.1f64);
        assert_eq!(Enceladus::subplanetary_radius(), 256.6f64);
        assert_eq!(Enceladus::along_orbit_radius(), 251.4f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_602() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Enceladus::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_602() {
        assert_eq!(
            (
                0.7096508738608943f64,
                -0.0006283185307179586f64,
                0f64,
                &[] as &[f64]
            ),
            Enceladus::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_602() {
        assert_eq!(
            (
                1.457698991265664f64,
                -0.00006981317007977319f64,
                0f64,
                &[] as &[f64]
            ),
            Enceladus::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_602() {
        assert_eq!(
            (
                0.11030480872604163f64,
                4.585536698039173f64,
                0f64,
                &[] as &[f64]
            ),
            Enceladus::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_603() {
        assert_eq!(Tethys::gravitational_parameter(), 41.21352885489587f64);
    }
    #[test]
    fn test_tri_axial_603() {
        assert_eq!(Tethys::polar_radius(), 526.3f64);
        assert_eq!(Tethys::mean_radius(), 530.9999999999999f64);
        assert_eq!(Tethys::subplanetary_radius(), 538.4f64);
        assert_eq!(Tethys::along_orbit_radius(), 528.3f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_603() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Tethys::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_603() {
        assert_eq!(
            (
                0.7096508738608943f64,
                -0.0006283185307179586f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0.16859880574265224f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Tethys::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_603() {
        assert_eq!(
            (
                1.457698991265664f64,
                -0.00006981317007977319f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    -0.019024088846738195f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Tethys::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_603() {
        assert_eq!(
            (
                0.1562069680534925f64,
                3.328306379991881f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    -0.16755160819145562f64,
                    0.03892084231947355f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Tethys::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_604() {
        assert_eq!(Dione::gravitational_parameter(), 73.11607172482067f64);
    }
    #[test]
    fn test_tri_axial_604() {
        assert_eq!(Dione::polar_radius(), 559.6f64);
        assert_eq!(Dione::mean_radius(), 561.4333333333333f64);
        assert_eq!(Dione::subplanetary_radius(), 563.4f64);
        assert_eq!(Dione::along_orbit_radius(), 561.3f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_604() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Dione::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_604() {
        assert_eq!(
            (
                0.7096508738608943f64,
                -0.0006283185307179586f64,
                0f64,
                &[] as &[f64]
            ),
            Dione::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_604() {
        assert_eq!(
            (
                1.457698991265664f64,
                -0.00006981317007977319f64,
                0f64,
                &[] as &[f64]
            ),
            Dione::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_604() {
        assert_eq!(
            (
                6.241297405131723f64,
                2.295717637805533f64,
                0f64,
                &[] as &[f64]
            ),
            Dione::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_605() {
        assert_eq!(Rhea::gravitational_parameter(), 153.9417519146563f64);
    }
    #[test]
    fn test_tri_axial_605() {
        assert_eq!(Rhea::polar_radius(), 762.4f64);
        assert_eq!(Rhea::mean_radius(), 763.5f64);
        assert_eq!(Rhea::subplanetary_radius(), 765f64);
        assert_eq!(Rhea::along_orbit_radius(), 763.1f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_605() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Rhea::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_605() {
        assert_eq!(
            (
                0.7047639519553103f64,
                -0.0006283185307179586f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.054105206811824215f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Rhea::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_605() {
        assert_eq!(
            (
                1.4582225900412622f64,
                -0.00006981317007977319f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.006108652381980153f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Rhea::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_605() {
        assert_eq!(
            (
                4.104316268989865f64,
                1.3908537151816638f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.05375614096142535f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Rhea::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_606() {
        assert_eq!(Titan::gravitational_parameter(), 8978.137095521046f64);
    }
    #[test]
    fn test_tri_axial_606() {
        assert_eq!(Titan::polar_radius(), 2574.47f64);
        assert_eq!(Titan::mean_radius(), 2574.7999999999997f64);
        assert_eq!(Titan::subplanetary_radius(), 2575.15f64);
        assert_eq!(Titan::along_orbit_radius(), 2574.78f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_606() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Titan::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_606() {
        assert_eq!(
            (
                0.6891031125771652f64,
                0f64,
                0f64,
                &[0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64] as &[f64]
            ),
            Titan::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_606() {
        assert_eq!(
            (
                1.456091543024577f64,
                0f64,
                0f64,
                &[0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64] as &[f64]
            ),
            Titan::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_606() {
        assert_eq!(
            (
                3.2565313114798795f64,
                0.39404258030637335f64,
                0f64,
                &[0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64] as &[f64]
            ),
            Titan::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_607() {
        assert_eq!(Hyperion::gravitational_parameter(), 0.3704913747932265f64);
    }
    #[test]
    fn test_tri_axial_607() {
        assert_eq!(Hyperion::polar_radius(), 102.7f64);
        assert_eq!(Hyperion::mean_radius(), 138.6f64);
        assert_eq!(Hyperion::subplanetary_radius(), 180.1f64);
        assert_eq!(Hyperion::along_orbit_radius(), 133f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_607() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Hyperion::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_607() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hyperion::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_607() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hyperion::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_607() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hyperion::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_608() {
        assert_eq!(Iapetus::gravitational_parameter(), 120.5151060137642f64);
    }
    #[test]
    fn test_tri_axial_608() {
        assert_eq!(Iapetus::polar_radius(), 712.1f64);
        assert_eq!(Iapetus::mean_radius(), 734.5f64);
        assert_eq!(Iapetus::subplanetary_radius(), 745.7f64);
        assert_eq!(Iapetus::along_orbit_radius(), 745.7f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_608() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Iapetus::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_608() {
        assert_eq!(
            (
                5.552939548145159f64,
                -0.06892305216125608f64,
                0f64,
                &[] as &[f64]
            ),
            Iapetus::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_608() {
        assert_eq!(
            (
                1.3095205377713455f64,
                -0.019949113350295186f64,
                0f64,
                &[] as &[f64]
            ),
            Iapetus::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_608() {
        assert_eq!(
            (
                6.199409503083858f64,
                0.07920229445458282f64,
                0f64,
                &[] as &[f64]
            ),
            Iapetus::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_609() {
        assert_eq!(Phoebe::gravitational_parameter(), 0.5547860052791678f64);
    }
    #[test]
    fn test_tri_axial_609() {
        assert_eq!(Phoebe::polar_radius(), 101.8f64);
        assert_eq!(Phoebe::mean_radius(), 106.56666666666666f64);
        assert_eq!(Phoebe::subplanetary_radius(), 109.4f64);
        assert_eq!(Phoebe::along_orbit_radius(), 108.5f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_609() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Phoebe::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_609() {
        assert_eq!(
            (6.229080100367762f64, 0f64, 0f64, &[] as &[f64]),
            Phoebe::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_609() {
        assert_eq!(
            (1.3578661580515883f64, 0f64, 0f64, &[] as &[f64]),
            Phoebe::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_609() {
        assert_eq!(
            (
                3.116808978211474f64,
                16.26016798998745f64,
                0f64,
                &[] as &[f64]
            ),
            Phoebe::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_610() {
        assert_eq!(Janus::gravitational_parameter(), 0.1265765099012197f64);
    }
    #[test]
    fn test_tri_axial_610() {
        assert_eq!(Janus::polar_radius(), 76.3f64);
        assert_eq!(Janus::mean_radius(), 90.33333333333333f64);
        assert_eq!(Janus::subplanetary_radius(), 101.7f64);
        assert_eq!(Janus::along_orbit_radius(), 93f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_610() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Janus::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_610() {
        assert_eq!(
            (
                0.7082546104592989f64,
                -0.0006283185307179586f64,
                0f64,
                &[
                    0f64,
                    -0.028326693759867967f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0004014257279586958f64
                ] as &[f64]
            ),
            Janus::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_610() {
        assert_eq!(
            (
                1.457698991265664f64,
                -0.00006981317007977319f64,
                0f64,
                &[
                    0f64,
                    -0.003193952531149623f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.000017453292519943296f64
                ] as &[f64]
            ),
            Janus::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_610() {
        assert_eq!(
            (
                1.0267771989482641f64,
                9.044924285944507f64,
                0f64,
                &[
                    0f64,
                    0.028152160834668535f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0004014257279586958f64
                ] as &[f64]
            ),
            Janus::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_611() {
        assert_eq!(
            Epimetheus::gravitational_parameter(),
            0.03512333288208074f64
        );
    }
    #[test]
    fn test_tri_axial_611() {
        assert_eq!(Epimetheus::polar_radius(), 53f64);
        assert_eq!(Epimetheus::mean_radius(), 58.4f64);
        assert_eq!(Epimetheus::subplanetary_radius(), 64.9f64);
        assert_eq!(Epimetheus::along_orbit_radius(), 57.3f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_611() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Epimetheus::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_611() {
        assert_eq!(
            (
                0.7082546104592989f64,
                -0.0006283185307179586f64,
                0f64,
                &[
                    -0.05503023131538121f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0015009831567151233f64,
                    0f64
                ] as &[f64]
            ),
            Epimetheus::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_611() {
        assert_eq!(
            (
                1.457698991265664f64,
                -0.00006981317007977319f64,
                0f64,
                &[
                    -0.006213372137099813f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.00008726646259971648f64,
                    0f64
                ] as &[f64]
            ),
            Epimetheus::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_611() {
        assert_eq!(
            (
                5.128999072835736f64,
                9.049370273103856f64,
                0f64,
                &[
                    0.05468116546498235f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0015009831567151233f64,
                    0f64
                ] as &[f64]
            ),
            Epimetheus::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_612() {
        assert_eq!(Helene::gravitational_parameter(), 0.0004757419551776972f64);
    }
    #[test]
    fn test_tri_axial_612() {
        assert_eq!(Helene::polar_radius(), 13.3f64);
        assert_eq!(Helene::mean_radius(), 18.46666666666667f64);
        assert_eq!(Helene::subplanetary_radius(), 22.5f64);
        assert_eq!(Helene::along_orbit_radius(), 19.6f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_612() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Helene::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_612() {
        assert_eq!(
            (
                0.7129669994396837f64,
                -0.0006283185307179586f64,
                0f64,
                &[] as &[f64]
            ),
            Helene::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_612() {
        assert_eq!(
            (
                1.4545573986120743f64,
                -0.00006981317007977319f64,
                0f64,
                &[] as &[f64]
            ),
            Helene::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_612() {
        assert_eq!(
            (
                4.278151062488501f64,
                2.297157080652823f64,
                0f64,
                &[] as &[f64]
            ),
            Helene::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_613() {
        assert_eq!(Telesto::polar_radius(), 9.8f64);
        assert_eq!(Telesto::mean_radius(), 12.633333333333335f64);
        assert_eq!(Telesto::subplanetary_radius(), 16.3f64);
        assert_eq!(Telesto::along_orbit_radius(), 11.8f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_613() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Telesto::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_613() {
        assert_eq!(
            (
                0.8815658051823358f64,
                -0.0006283185307179586f64,
                0f64,
                &[] as &[f64]
            ),
            Telesto::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_613() {
        assert_eq!(
            (
                1.4671237692264334f64,
                -0.00006981317007977319f64,
                0f64,
                &[] as &[f64]
            ),
            Telesto::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_613() {
        assert_eq!(
            (
                0.9927432785343747f64,
                3.328306811088206f64,
                0f64,
                &[] as &[f64]
            ),
            Telesto::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_614() {
        assert_eq!(Calypso::polar_radius(), 6.3f64);
        assert_eq!(Calypso::mean_radius(), 10.3f64);
        assert_eq!(Calypso::subplanetary_radius(), 15.3f64);
        assert_eq!(Calypso::along_orbit_radius(), 9.3f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_614() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Calypso::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_614() {
        assert_eq!(
            (
                0.6354743806511354f64,
                -0.0006283185307179586f64,
                0f64,
                &[] as &[f64]
            ),
            Calypso::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_614() {
        assert_eq!(
            (
                1.4842279958959779f64,
                -0.00006981317007977319f64,
                0f64,
                &[] as &[f64]
            ),
            Calypso::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_614() {
        assert_eq!(
            (
                2.679254934736495f64,
                3.327893239613983f64,
                0f64,
                &[] as &[f64]
            ),
            Calypso::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_615() {
        assert_eq!(Atlas::gravitational_parameter(), 0.0003718871247516475f64);
    }
    #[test]
    fn test_tri_axial_615() {
        assert_eq!(Atlas::polar_radius(), 9.4f64);
        assert_eq!(Atlas::mean_radius(), 15.899999999999999f64);
        assert_eq!(Atlas::subplanetary_radius(), 20.5f64);
        assert_eq!(Atlas::along_orbit_radius(), 17.8f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_615() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Atlas::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_615() {
        assert_eq!(
            (
                0.7082546104592989f64,
                -0.0006283185307179586f64,
                0f64,
                &[] as &[f64]
            ),
            Atlas::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_615() {
        assert_eq!(
            (
                1.4578735241908636f64,
                -0.00006981317007977319f64,
                0f64,
                &[] as &[f64]
            ),
            Atlas::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_615() {
        assert_eq!(
            (
                2.4064599726497815f64,
                10.442409634437194f64,
                0f64,
                &[] as &[f64]
            ),
            Atlas::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_616() {
        assert_eq!(Prometheus::gravitational_parameter(), 0.0107520800100761f64);
    }
    #[test]
    fn test_tri_axial_616() {
        assert_eq!(Prometheus::polar_radius(), 28.2f64);
        assert_eq!(Prometheus::mean_radius(), 46f64);
        assert_eq!(Prometheus::subplanetary_radius(), 68.2f64);
        assert_eq!(Prometheus::along_orbit_radius(), 41.6f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_616() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Prometheus::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_616() {
        assert_eq!(
            (
                0.7082546104592989f64,
                -0.0006283185307179586f64,
                0f64,
                &[] as &[f64]
            ),
            Prometheus::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_616() {
        assert_eq!(
            (
                1.4578735241908636f64,
                -0.00006981317007977319f64,
                0f64,
                &[] as &[f64]
            ),
            Prometheus::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_616() {
        assert_eq!(
            (
                5.1686180468560075f64,
                10.250126710744977f64,
                0f64,
                &[] as &[f64]
            ),
            Prometheus::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_617() {
        assert_eq!(Pandora::gravitational_parameter(), 0.009290325122028795f64);
    }
    #[test]
    fn test_tri_axial_617() {
        assert_eq!(Pandora::polar_radius(), 31.5f64);
        assert_eq!(Pandora::mean_radius(), 41.5f64);
        assert_eq!(Pandora::subplanetary_radius(), 52.2f64);
        assert_eq!(Pandora::along_orbit_radius(), 40.8f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_617() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Pandora::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_617() {
        assert_eq!(
            (
                0.7082546104592989f64,
                -0.0006283185307179586f64,
                0f64,
                &[] as &[f64]
            ),
            Pandora::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_617() {
        assert_eq!(
            (
                1.4578735241908636f64,
                -0.00006981317007977319f64,
                0f64,
                &[] as &[f64]
            ),
            Pandora::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_617() {
        assert_eq!(
            (
                2.8434904173491615f64,
                9.997055714535051f64,
                0f64,
                &[] as &[f64]
            ),
            Pandora::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_618() {
        assert_eq!(Pan::polar_radius(), 10.4f64);
        assert_eq!(Pan::mean_radius(), 14.333333333333334f64);
        assert_eq!(Pan::subplanetary_radius(), 17.2f64);
        assert_eq!(Pan::along_orbit_radius(), 15.4f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_618() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Pan::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_618() {
        assert_eq!(
            (
                0.7086036763096978f64,
                -0.0006283185307179586f64,
                0f64,
                &[] as &[f64]
            ),
            Pan::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_618() {
        assert_eq!(
            (
                1.457349925415265f64,
                -0.00006981317007977319f64,
                0f64,
                &[] as &[f64]
            ),
            Pan::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_618() {
        assert_eq!(
            (
                0.8517206749732328f64,
                10.92652906235538f64,
                0f64,
                &[] as &[f64]
            ),
            Pan::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_619() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Ymir::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_619() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ymir::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_619() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ymir::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_619() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ymir::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_620() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Paaliaq::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_620() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Paaliaq::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_620() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Paaliaq::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_620() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Paaliaq::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_621() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Tarvos::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_621() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Tarvos::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_621() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Tarvos::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_621() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Tarvos::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_622() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Ijiraq::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_622() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ijiraq::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_622() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ijiraq::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_622() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ijiraq::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_623() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Suttungr::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_623() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Suttungr::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_623() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Suttungr::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_623() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Suttungr::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_624() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Kiviuq::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_624() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kiviuq::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_624() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kiviuq::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_624() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kiviuq::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_625() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Mundilfari::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_625() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Mundilfari::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_625() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Mundilfari::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_625() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Mundilfari::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_626() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Albiorix::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_626() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Albiorix::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_626() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Albiorix::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_626() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Albiorix::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_627() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Skathi::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_627() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Skathi::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_627() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Skathi::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_627() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Skathi::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_628() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Erriapus::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_628() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Erriapus::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_628() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Erriapus::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_628() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Erriapus::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_629() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Siarnaq::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_629() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Siarnaq::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_629() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Siarnaq::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_629() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Siarnaq::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_630() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Thrymr::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_630() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Thrymr::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_630() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Thrymr::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_630() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Thrymr::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_631() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Narvi::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_631() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Narvi::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_631() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Narvi::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_631() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Narvi::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_632() {
        assert_eq!(Methone::polar_radius(), 1.21f64);
        assert_eq!(Methone::mean_radius(), 1.4799999999999998f64);
        assert_eq!(Methone::subplanetary_radius(), 1.94f64);
        assert_eq!(Methone::along_orbit_radius(), 1.29f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_632() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Methone::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_632() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Methone::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_632() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Methone::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_632() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Methone::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_633() {
        assert_eq!(Pallene::polar_radius(), 1.8f64);
        assert_eq!(Pallene::mean_radius(), 2.2533333333333334f64);
        assert_eq!(Pallene::subplanetary_radius(), 2.88f64);
        assert_eq!(Pallene::along_orbit_radius(), 2.08f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_633() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Pallene::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_633() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Pallene::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_633() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Pallene::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_633() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Pallene::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_634() {
        assert_eq!(Polydeuces::polar_radius(), 1f64);
        assert_eq!(Polydeuces::mean_radius(), 1.2333333333333334f64);
        assert_eq!(Polydeuces::subplanetary_radius(), 1.5f64);
        assert_eq!(Polydeuces::along_orbit_radius(), 1.2f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_634() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Polydeuces::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_634() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Polydeuces::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_634() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Polydeuces::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_634() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Polydeuces::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_635() {
        assert_eq!(Daphnis::polar_radius(), 2.8f64);
        assert_eq!(Daphnis::mean_radius(), 3.9666666666666663f64);
        assert_eq!(Daphnis::subplanetary_radius(), 4.6f64);
        assert_eq!(Daphnis::along_orbit_radius(), 4.5f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_635() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Daphnis::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_635() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Daphnis::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_635() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Daphnis::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_635() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Daphnis::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_636() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Aegir::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_636() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aegir::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_636() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aegir::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_636() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aegir::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_637() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Bebhionn::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_637() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Bebhionn::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_637() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Bebhionn::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_637() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Bebhionn::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_638() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Bergelmir::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_638() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Bergelmir::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_638() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Bergelmir::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_638() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Bergelmir::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_639() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Bestla::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_639() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Bestla::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_639() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Bestla::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_639() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Bestla::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_640() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Farbauti::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_640() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Farbauti::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_640() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Farbauti::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_640() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Farbauti::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_641() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Fenrir::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_641() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Fenrir::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_641() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Fenrir::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_641() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Fenrir::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_642() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Fornjot::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_642() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Fornjot::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_642() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Fornjot::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_642() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Fornjot::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_643() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Hati::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_643() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hati::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_643() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hati::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_643() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hati::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_644() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Hyrrokkin::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_644() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hyrrokkin::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_644() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hyrrokkin::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_644() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hyrrokkin::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_645() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Kari::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_645() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kari::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_645() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kari::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_645() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kari::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_646() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Loge::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_646() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Loge::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_646() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Loge::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_646() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Loge::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_647() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Skoll::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_647() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Skoll::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_647() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Skoll::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_647() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Skoll::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_648() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Surtur::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_648() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Surtur::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_648() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Surtur::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_648() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Surtur::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_649() {
        assert_eq!(Anthe::polar_radius(), 0.5f64);
        assert_eq!(Anthe::mean_radius(), 0.5f64);
        assert_eq!(Anthe::subplanetary_radius(), 0.5f64);
        assert_eq!(Anthe::along_orbit_radius(), 0.5f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_649() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Anthe::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_649() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Anthe::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_649() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Anthe::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_649() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Anthe::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_650() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Jarnsaxa::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_650() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Jarnsaxa::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_650() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Jarnsaxa::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_650() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Jarnsaxa::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_651() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Greip::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_651() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Greip::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_651() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Greip::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_651() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Greip::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_652() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Tarqeq::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_652() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Tarqeq::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_652() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Tarqeq::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_652() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Tarqeq::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_653() {
        assert_eq!(Aegaeon::polar_radius(), 0.2f64);
        assert_eq!(Aegaeon::mean_radius(), 0.3833333333333333f64);
        assert_eq!(Aegaeon::subplanetary_radius(), 0.7f64);
        assert_eq!(Aegaeon::along_orbit_radius(), 0.25f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_653() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Aegaeon::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_653() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aegaeon::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_653() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aegaeon::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_653() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aegaeon::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_701() {
        assert_eq!(Ariel::gravitational_parameter(), 83.46344431770477f64);
    }
    #[test]
    fn test_tri_axial_701() {
        assert_eq!(Ariel::polar_radius(), 577.7f64);
        assert_eq!(Ariel::mean_radius(), 578.9f64);
        assert_eq!(Ariel::subplanetary_radius(), 581.1f64);
        assert_eq!(Ariel::along_orbit_radius(), 577.9f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_701() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Ariel::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_701() {
        assert_eq!(
            (
                4.493001093409003f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.005061454830783556f64
                ] as &[f64]
            ),
            Ariel::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_701() {
        assert_eq!(
            (
                -0.26354471705114374f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.004886921905584123f64
                ] as &[f64]
            ),
            Ariel::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_701() {
        assert_eq!(
            (
                2.7265533574655416f64,
                -2.492952697630833f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0008726646259971648f64,
                    0.0013962634015954637f64
                ] as &[f64]
            ),
            Ariel::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_702() {
        assert_eq!(Umbriel::gravitational_parameter(), 85.09338094489388f64);
    }
    #[test]
    fn test_tri_axial_702() {
        assert_eq!(Umbriel::polar_radius(), 584.7f64);
        assert_eq!(Umbriel::mean_radius(), 584.7f64);
        assert_eq!(Umbriel::subplanetary_radius(), 584.7f64);
        assert_eq!(Umbriel::along_orbit_radius(), 584.7f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_702() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Umbriel::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_702() {
        assert_eq!(
            (
                4.493001093409003f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.003665191429188092f64
                ] as &[f64]
            ),
            Umbriel::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_702() {
        assert_eq!(
            (
                -0.26354471705114374f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.003490658503988659f64
                ] as &[f64]
            ),
            Umbriel::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_702() {
        assert_eq!(
            (
                1.885828256779873f64,
                -1.5161481881953498f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0015707963267948964f64,
                    0f64,
                    0.0010471975511965976f64
                ] as &[f64]
            ),
            Umbriel::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_703() {
        assert_eq!(Titania::gravitational_parameter(), 226.9437003741248f64);
    }
    #[test]
    fn test_tri_axial_703() {
        assert_eq!(Titania::polar_radius(), 788.9f64);
        assert_eq!(Titania::mean_radius(), 788.9f64);
        assert_eq!(Titania::subplanetary_radius(), 788.9f64);
        assert_eq!(Titania::along_orbit_radius(), 788.9f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_703() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Titania::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_703() {
        assert_eq!(
            (
                4.493001093409003f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.005061454830783556f64
                ] as &[f64]
            ),
            Titania::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_703() {
        assert_eq!(
            (
                -0.26354471705114374f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.004886921905584123f64
                ] as &[f64]
            ),
            Titania::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_703() {
        assert_eq!(
            (
                1.3568189605003917f64,
                -0.7217186318332268f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0013962634015954637f64
                ] as &[f64]
            ),
            Titania::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_704() {
        assert_eq!(Oberon::gravitational_parameter(), 205.3234302535623f64);
    }
    #[test]
    fn test_tri_axial_704() {
        assert_eq!(Oberon::polar_radius(), 761.4f64);
        assert_eq!(Oberon::mean_radius(), 761.4f64);
        assert_eq!(Oberon::subplanetary_radius(), 761.4f64);
        assert_eq!(Oberon::along_orbit_radius(), 761.4f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_704() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Oberon::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_704() {
        assert_eq!(
            (
                4.493001093409003f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0027925268031909274f64
                ] as &[f64]
            ),
            Oberon::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_704() {
        assert_eq!(
            (
                -0.26354471705114374f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0027925268031909274f64
                ] as &[f64]
            ),
            Oberon::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_704() {
        assert_eq!(
            (
                0.1181587903600161f64,
                -0.4666921966546346f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0006981317007977319f64
                ] as &[f64]
            ),
            Oberon::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_705() {
        assert_eq!(Miranda::gravitational_parameter(), 4.3195168992321f64);
    }
    #[test]
    fn test_tri_axial_705() {
        assert_eq!(Miranda::polar_radius(), 232.9f64);
        assert_eq!(Miranda::mean_radius(), 235.83333333333334f64);
        assert_eq!(Miranda::subplanetary_radius(), 240.4f64);
        assert_eq!(Miranda::along_orbit_radius(), 234.2f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_705() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Miranda::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_705() {
        assert_eq!(
            (
                4.493001093409003f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.07696902001294993f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0006981317007977319f64,
                    0f64
                ] as &[f64]
            ),
            Miranda::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_705() {
        assert_eq!(
            (
                -0.2631956512007449f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.07417649320975901f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.00034906585039886593f64,
                    0f64
                ] as &[f64]
            ),
            Miranda::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_705() {
        assert_eq!(
            (
                0.5358160803622591f64,
                -4.445191100713563f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.02007128639793479f64,
                    -0.022165681500327987f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0015707963267948964f64,
                    0.002617993877991494f64
                ] as &[f64]
            ),
            Miranda::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_706() {
        assert_eq!(Cordelia::polar_radius(), 13f64);
        assert_eq!(Cordelia::mean_radius(), 13f64);
        assert_eq!(Cordelia::subplanetary_radius(), 13f64);
        assert_eq!(Cordelia::along_orbit_radius(), 13f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_706() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Cordelia::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_706() {
        assert_eq!(
            (
                4.49090669830661f64,
                0f64,
                0f64,
                &[
                    -0.002617993877991494f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Cordelia::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_706() {
        assert_eq!(
            (
                -0.2649409804527392f64,
                0f64,
                0f64,
                &[
                    0.0024434609527920616f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Cordelia::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_706() {
        assert_eq!(
            (
                2.2286109218715593f64,
                -18.753921879266084f64,
                0f64,
                &[
                    -0.0006981317007977319f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Cordelia::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_707() {
        assert_eq!(Ophelia::polar_radius(), 15f64);
        assert_eq!(Ophelia::mean_radius(), 15f64);
        assert_eq!(Ophelia::subplanetary_radius(), 15f64);
        assert_eq!(Ophelia::along_orbit_radius(), 15f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_707() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Ophelia::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_707() {
        assert_eq!(
            (
                4.49090669830661f64,
                0f64,
                0f64,
                &[
                    0f64,
                    -0.0015707963267948964f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Ophelia::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_707() {
        assert_eq!(
            (
                -0.2649409804527392f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0.0015707963267948964f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Ophelia::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_707() {
        assert_eq!(
            (
                2.2750366799746087f64,
                -16.692447910262292f64,
                0f64,
                &[
                    0f64,
                    -0.0005235987755982988f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Ophelia::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_708() {
        assert_eq!(Bianca::polar_radius(), 21f64);
        assert_eq!(Bianca::mean_radius(), 21f64);
        assert_eq!(Bianca::subplanetary_radius(), 21f64);
        assert_eq!(Bianca::along_orbit_radius(), 21f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_708() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Bianca::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_708() {
        assert_eq!(
            (
                4.49090669830661f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    -0.0027925268031909274f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Bianca::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_708() {
        assert_eq!(
            (
                -0.2649409804527392f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0.0027925268031909274f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Bianca::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_708() {
        assert_eq!(
            (
                1.8406242291532198f64,
                -14.458158751655587f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    -0.0006981317007977319f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Bianca::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_709() {
        assert_eq!(Cressida::polar_radius(), 31f64);
        assert_eq!(Cressida::mean_radius(), 31f64);
        assert_eq!(Cressida::subplanetary_radius(), 31f64);
        assert_eq!(Cressida::along_orbit_radius(), 31f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_709() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Cressida::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_709() {
        assert_eq!(
            (
                4.49090669830661f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    -0.0006981317007977319f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Cressida::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_709() {
        assert_eq!(
            (
                -0.2649409804527392f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0.0006981317007977319f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Cressida::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_709() {
        assert_eq!(
            (
                1.0325367854798453f64,
                -13.553906388910956f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    -0.00017453292519943296f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Cressida::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_710() {
        assert_eq!(Desdemona::polar_radius(), 27f64);
        assert_eq!(Desdemona::mean_radius(), 27f64);
        assert_eq!(Desdemona::subplanetary_radius(), 27f64);
        assert_eq!(Desdemona::along_orbit_radius(), 27f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_710() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Desdemona::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_710() {
        assert_eq!(
            (
                4.49090669830661f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0029670597283903604f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Desdemona::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_710() {
        assert_eq!(
            (
                -0.2649409804527392f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0027925268031909274f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Desdemona::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_710() {
        assert_eq!(
            (
                1.6594590527962085f64,
                -13.265430289266899f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0006981317007977319f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Desdemona::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_711() {
        assert_eq!(Juliet::polar_radius(), 42f64);
        assert_eq!(Juliet::mean_radius(), 42f64);
        assert_eq!(Juliet::subplanetary_radius(), 42f64);
        assert_eq!(Juliet::along_orbit_radius(), 42f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_711() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Juliet::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_711() {
        assert_eq!(
            (
                4.49090669830661f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0010471975511965976f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Juliet::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_711() {
        assert_eq!(
            (
                -0.2649409804527392f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0010471975511965976f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Juliet::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_711() {
        assert_eq!(
            (
                5.2806681848340435f64,
                -12.74309158902866f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.00034906585039886593f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Juliet::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_712() {
        assert_eq!(Portia::polar_radius(), 54f64);
        assert_eq!(Portia::mean_radius(), 54f64);
        assert_eq!(Portia::subplanetary_radius(), 54f64);
        assert_eq!(Portia::along_orbit_radius(), 54f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_712() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Portia::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_712() {
        assert_eq!(
            (
                4.49090669830661f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0015707963267948964f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Portia::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_712() {
        assert_eq!(
            (
                -0.2649409804527392f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0015707963267948964f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Portia::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_712() {
        assert_eq!(
            (
                0.4368559117741807f64,
                -12.243250601727652f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.00034906585039886593f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Portia::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_713() {
        assert_eq!(Rosalind::polar_radius(), 27f64);
        assert_eq!(Rosalind::mean_radius(), 27f64);
        assert_eq!(Rosalind::subplanetary_radius(), 27f64);
        assert_eq!(Rosalind::along_orbit_radius(), 27f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_713() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Rosalind::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_713() {
        assert_eq!(
            (
                4.49090669830661f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.005061454830783556f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Rosalind::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_713() {
        assert_eq!(
            (
                -0.2649409804527392f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.004886921905584123f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Rosalind::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_713() {
        assert_eq!(
            (
                5.496041814530144f64,
                -11.250935609538423f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0013962634015954637f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Rosalind::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_714() {
        assert_eq!(Belinda::polar_radius(), 33f64);
        assert_eq!(Belinda::mean_radius(), 33f64);
        assert_eq!(Belinda::subplanetary_radius(), 33f64);
        assert_eq!(Belinda::along_orbit_radius(), 33f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_714() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Belinda::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_714() {
        assert_eq!(
            (
                4.49090669830661f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0005235987755982988f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Belinda::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_714() {
        assert_eq!(
            (
                -0.2649409804527392f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0005235987755982988f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Belinda::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_714() {
        assert_eq!(
            (
                5.191656392982332f64,
                -10.076882135239488f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.00017453292519943296f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Belinda::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_715() {
        assert_eq!(Puck::polar_radius(), 77f64);
        assert_eq!(Puck::mean_radius(), 77f64);
        assert_eq!(Puck::subplanetary_radius(), 77f64);
        assert_eq!(Puck::along_orbit_radius(), 77f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_715() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Puck::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_715() {
        assert_eq!(
            (
                4.49090669830661f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.005759586531581287f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Puck::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_715() {
        assert_eq!(
            (
                -0.2649409804527392f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0054105206811824215f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Puck::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_715() {
        assert_eq!(
            (
                1.5924384095196262f64,
                -8.247467318113788f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0015707963267948964f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Puck::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_716() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Caliban::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_716() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Caliban::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_716() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Caliban::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_716() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Caliban::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_717() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Sycorax::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_717() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sycorax::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_717() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sycorax::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_717() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sycorax::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_718() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Prospero::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_718() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Prospero::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_718() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Prospero::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_718() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Prospero::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_719() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Setebos::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_719() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Setebos::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_719() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Setebos::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_719() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Setebos::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_720() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Stephano::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_720() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Stephano::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_720() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Stephano::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_720() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Stephano::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_721() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Trinculo::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_721() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Trinculo::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_721() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Trinculo::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_721() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Trinculo::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_722() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Francisco::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_722() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Francisco::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_722() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Francisco::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_722() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Francisco::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_723() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Margaret::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_723() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Margaret::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_723() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Margaret::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_723() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Margaret::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_724() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Ferdinand::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_724() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ferdinand::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_724() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ferdinand::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_724() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ferdinand::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_725() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Perdita::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_725() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Perdita::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_725() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Perdita::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_725() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Perdita::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_726() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Mab::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_726() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Mab::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_726() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Mab::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_726() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Mab::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_727() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Cupid::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_727() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Cupid::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_727() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Cupid::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_727() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Cupid::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_801() {
        assert_eq!(Triton::gravitational_parameter(), 1428.495462910464f64);
    }
    #[test]
    fn test_tri_axial_801() {
        assert_eq!(Triton::polar_radius(), 1352.6f64);
        assert_eq!(Triton::mean_radius(), 1352.6f64);
        assert_eq!(Triton::subplanetary_radius(), 1352.6f64);
        assert_eq!(Triton::along_orbit_radius(), 1352.6f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_801() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Triton::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_801() {
        assert_eq!(
            (
                5.224817648770225f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.5646140130201657f64,
                    0f64,
                    -0.1096066770252439f64,
                    -0.03630284844148206f64,
                    -0.012915436464758038f64,
                    -0.004886921905584123f64,
                    -0.0019198621771937625f64,
                    -0.0012217304763960308f64,
                    -0.00034906585039886593f64,
                    -0.00017453292519943296f64
                ] as &[f64]
            ),
            Triton::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_801() {
        assert_eq!(
            (
                0.7185520530460655f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.3935717463247213f64,
                    0f64,
                    0.03665191429188092f64,
                    0.009599310885968814f64,
                    0.0027925268031909274f64,
                    0.0008726646259971648f64,
                    0.00034906585039886593f64,
                    0.00017453292519943296f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Triton::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_801() {
        assert_eq!(
            (
                5.175424830938785f64,
                -1.069140942327404f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.3883357585687383f64,
                    0f64,
                    0.11746065865921838f64,
                    0.03577924966588375f64,
                    0.012915436464758038f64,
                    0.004886921905584123f64,
                    0.0019198621771937625f64,
                    0.0008726646259971648f64,
                    0.00034906585039886593f64,
                    0.00017453292519943296f64
                ] as &[f64]
            ),
            Triton::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_tri_axial_802() {
        assert_eq!(Nereid::polar_radius(), 170f64);
        assert_eq!(Nereid::mean_radius(), 170f64);
        assert_eq!(Nereid::subplanetary_radius(), 170f64);
        assert_eq!(Nereid::along_orbit_radius(), 170f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_802() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Nereid::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_802() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Nereid::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_802() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Nereid::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_802() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Nereid::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_803() {
        assert_eq!(Naiad::gravitational_parameter(), 0.008530281246540886f64);
    }
    #[test]
    fn test_tri_axial_803() {
        assert_eq!(Naiad::polar_radius(), 29f64);
        assert_eq!(Naiad::mean_radius(), 29f64);
        assert_eq!(Naiad::subplanetary_radius(), 29f64);
        assert_eq!(Naiad::along_orbit_radius(), 29f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_803() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Naiad::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_803() {
        assert_eq!(
            (
                5.224817648770225f64,
                0f64,
                0f64,
                &[
                    0.012217304763960306f64,
                    -0.11327186845443199f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.004363323129985824f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Naiad::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_803() {
        assert_eq!(
            (
                0.7567747636647413f64,
                0f64,
                0f64,
                &[
                    -0.00890117918517108f64,
                    -0.08290313946973066f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0015707963267948964f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Naiad::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_803() {
        assert_eq!(
            (
                4.434183497616794f64,
                21.342656148360604f64,
                0f64,
                &[
                    -0.008377580409572781f64,
                    0.07679448708775051f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.00471238898038469f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Naiad::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_804() {
        assert_eq!(Thalassa::gravitational_parameter(), 0.0235887319799217f64);
    }
    #[test]
    fn test_tri_axial_804() {
        assert_eq!(Thalassa::polar_radius(), 40f64);
        assert_eq!(Thalassa::mean_radius(), 40f64);
        assert_eq!(Thalassa::subplanetary_radius(), 40f64);
        assert_eq!(Thalassa::along_orbit_radius(), 40f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_804() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Thalassa::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_804() {
        assert_eq!(
            (
                5.224817648770225f64,
                0f64,
                0f64,
                &[
                    0.012217304763960306f64,
                    0f64,
                    -0.004886921905584123f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Thalassa::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_804() {
        assert_eq!(
            (
                0.7583455599915362f64,
                0f64,
                0f64,
                &[
                    -0.00890117918517108f64,
                    0f64,
                    -0.003665191429188092f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Thalassa::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_804() {
        assert_eq!(
            (
                1.7812830345854127f64,
                20.171739891174827f64,
                0f64,
                &[
                    -0.008377580409572781f64,
                    0f64,
                    0.0033161255787892262f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Thalassa::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_805() {
        assert_eq!(Despina::gravitational_parameter(), 0.1167318403814998f64);
    }
    #[test]
    fn test_tri_axial_805() {
        assert_eq!(Despina::polar_radius(), 74f64);
        assert_eq!(Despina::mean_radius(), 74f64);
        assert_eq!(Despina::subplanetary_radius(), 74f64);
        assert_eq!(Despina::along_orbit_radius(), 74f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_805() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Despina::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_805() {
        assert_eq!(
            (
                5.224817648770225f64,
                0f64,
                0f64,
                &[
                    0.012217304763960306f64,
                    0f64,
                    0f64,
                    -0.0015707963267948964f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Despina::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_805() {
        assert_eq!(
            (
                0.7583455599915362f64,
                0f64,
                0f64,
                &[
                    -0.00890117918517108f64,
                    0f64,
                    0f64,
                    -0.0012217304763960308f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Despina::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_805() {
        assert_eq!(
            (
                5.34960869028782f64,
                18.77510290185297f64,
                0f64,
                &[
                    -0.008552113334772215f64,
                    0f64,
                    0f64,
                    0.0010471975511965976f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Despina::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_806() {
        assert_eq!(Galatea::gravitational_parameter(), 0.189898503906069f64);
    }
    #[test]
    fn test_tri_axial_806() {
        assert_eq!(Galatea::polar_radius(), 79f64);
        assert_eq!(Galatea::mean_radius(), 79f64);
        assert_eq!(Galatea::subplanetary_radius(), 79f64);
        assert_eq!(Galatea::along_orbit_radius(), 79f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_806() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Galatea::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_806() {
        assert_eq!(
            (
                5.224817648770225f64,
                0f64,
                0f64,
                &[
                    0.012217304763960306f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0012217304763960308f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Galatea::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_806() {
        assert_eq!(
            (
                0.7579964941411373f64,
                0f64,
                0f64,
                &[
                    -0.00890117918517108f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0008726646259971648f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Galatea::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_806() {
        assert_eq!(
            (
                4.504520266472165f64,
                14.6548275586037f64,
                0f64,
                &[
                    -0.008377580409572781f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0008726646259971648f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Galatea::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_807() {
        assert_eq!(Larissa::gravitational_parameter(), 0.2548437405693583f64);
    }
    #[test]
    fn test_tri_axial_807() {
        assert_eq!(Larissa::polar_radius(), 96f64);
        assert_eq!(Larissa::mean_radius(), 96f64);
        assert_eq!(Larissa::subplanetary_radius(), 96f64);
        assert_eq!(Larissa::along_orbit_radius(), 96f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_807() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Larissa::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_807() {
        assert_eq!(
            (
                5.224817648770225f64,
                0f64,
                0f64,
                &[
                    0.012217304763960306f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.00471238898038469f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Larissa::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_807() {
        assert_eq!(
            (
                0.7576474282907384f64,
                0f64,
                0f64,
                &[
                    -0.00890117918517108f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.003490658503988659f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Larissa::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_807() {
        assert_eq!(
            (
                3.1312952110030268f64,
                11.328119671568512f64,
                0f64,
                &[
                    -0.008377580409572781f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0033161255787892262f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Larissa::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_808() {
        assert_eq!(Proteus::gravitational_parameter(), 2.583422379120727f64);
    }
    #[test]
    fn test_tri_axial_808() {
        assert_eq!(Proteus::polar_radius(), 201f64);
        assert_eq!(Proteus::mean_radius(), 209f64);
        assert_eq!(Proteus::subplanetary_radius(), 218f64);
        assert_eq!(Proteus::along_orbit_radius(), 208f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_808() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Proteus::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_808() {
        assert_eq!(
            (
                5.22324685244343f64,
                0f64,
                0f64,
                &[
                    0.012217304763960306f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0008726646259971648f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Proteus::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_808() {
        assert_eq!(
            (
                0.7489207820307667f64,
                0f64,
                0f64,
                &[
                    -0.00890117918517108f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0006981317007977319f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Proteus::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_808() {
        assert_eq!(
            (
                1.6297884555123048f64,
                5.598412754411688f64,
                0f64,
                &[
                    -0.008377580409572781f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0006981317007977319f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Proteus::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_809() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Halimede::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_809() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Halimede::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_809() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Halimede::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_809() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Halimede::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_810() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Psamathe::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_810() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Psamathe::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_810() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Psamathe::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_810() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Psamathe::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_811() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Sao::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_811() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sao::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_811() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sao::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_811() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sao::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_812() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Laomedeia::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_812() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Laomedeia::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_812() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Laomedeia::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_812() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Laomedeia::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_813() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Neso::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_813() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Neso::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_813() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Neso::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_813() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Neso::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_901() {
        assert_eq!(Charon::gravitational_parameter(), 105.8799888601881f64);
    }
    #[test]
    fn test_tri_axial_901() {
        assert_eq!(Charon::polar_radius(), 606f64);
        assert_eq!(Charon::mean_radius(), 606f64);
        assert_eq!(Charon::subplanetary_radius(), 606f64);
        assert_eq!(Charon::along_orbit_radius(), 606f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_901() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Charon::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_901() {
        assert_eq!(
            (2.3211657321048187f64, 0f64, 0f64, &[] as &[f64]),
            Charon::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_901() {
        assert_eq!(
            (-0.10756464180041053f64, 0f64, 0f64, &[] as &[f64]),
            Charon::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_901() {
        assert_eq!(
            (
                2.1414317257344426f64,
                0.9837115923543857f64,
                0f64,
                &[] as &[f64]
            ),
            Charon::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_902() {
        assert_eq!(Nix::gravitational_parameter(), 0.00304817564816976f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_902() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Nix::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_902() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Nix::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_902() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Nix::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_902() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Nix::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_903() {
        assert_eq!(Hydra::gravitational_parameter(), 0.003211039206155255f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_903() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Hydra::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_903() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hydra::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_903() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hydra::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_903() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hydra::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_904() {
        assert_eq!(Kerberos::gravitational_parameter(), 0.001110040850536676f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_904() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Kerberos::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_904() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kerberos::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_904() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kerberos::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_904() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kerberos::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_point_mass_905() {
        assert_eq!(Styx::gravitational_parameter(), 0f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_905() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Styx::NUTATION_PRECESSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_905() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Styx::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_905() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Styx::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_905() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Styx::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
}
