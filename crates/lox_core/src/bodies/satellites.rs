/*
 * Copyright (c) 2023. Helge Eichhorn and the LOX contributors
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

// Auto-generated by `lox_gen`. Do not edit!

use super::{
    Ellipsoid, NaifId, NutationPrecessionCoefficients, PointMass, PolynomialCoefficients,
    RotationalElements, TriAxial,
};
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Moon;
impl NaifId for Moon {
    fn id() -> i32 {
        301i32
    }
}
impl PointMass for Moon {
    fn gravitational_parameter() -> f64 {
        4902.80011845755f64
    }
}
impl Ellipsoid for Moon {
    fn polar_radius() -> f64 {
        1737.4f64
    }
    fn mean_radius() -> f64 {
        1737.4000000000003f64
    }
}
impl TriAxial for Moon {
    fn subplanetary_radius() -> f64 {
        1737.4f64
    }
    fn along_orbit_radius() -> f64 {
        1737.4f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Moon {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.712299968592838f64,
            0.000054105206811824215f64,
            0f64,
            &[
                -0.06769608569710406f64,
                -0.0021013764194011725f64,
                0.0012217304763960308f64,
                -0.0003001966313430247f64,
                0f64,
                0.0001256637061435917f64,
                0f64,
                0f64,
                0f64,
                -0.00009075712110370513f64,
                0f64,
                0f64,
                0.00007504915783575618f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.161328121643011f64,
            0.00022689280275926284f64,
            0f64,
            &[
                0.02691123173650057f64,
                0.0004171336912266448f64,
                -0.00048520153205442357f64,
                0.0001186823891356144f64,
                0f64,
                -0.00005061454830783555f64,
                0.000015707963267948964f64,
                0f64,
                0f64,
                0.000013962634015954637f64,
                0f64,
                0f64,
                -0.000015707963267948964f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            0.668832858644503f64,
            0.22997083313948888f64,
            -0.000000000000024434609527920614f64,
            &[
                0.06215117466351808f64,
                0.00210835773640915f64,
                -0.0011205013797803594f64,
                0.0002757620218151041f64,
                0.0004398229715025711f64,
                -0.00011519173063162575f64,
                -0.00008203047484373349f64,
                -0.00008028514559173915f64,
                0.000048869219055841225f64,
                0.00009075712110370513f64,
                0.00006981317007977319f64,
                0.00003316125578789226f64,
                -0.0000767944870877505f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Phobos;
impl NaifId for Phobos {
    fn id() -> i32 {
        401i32
    }
}
impl PointMass for Phobos {
    fn gravitational_parameter() -> f64 {
        0.0007087546066894452f64
    }
}
impl Ellipsoid for Phobos {
    fn polar_radius() -> f64 {
        9.1f64
    }
    fn mean_radius() -> f64 {
        11.166666666666666f64
    }
}
impl TriAxial for Phobos {
    fn subplanetary_radius() -> f64 {
        13f64
    }
    fn along_orbit_radius() -> f64 {
        11.4f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Phobos {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            5.544399941316208f64,
            -0.001892691938596266f64,
            0f64,
            &[
                -0.031141630416121578f64,
                0.00038621064567151f64,
                -0.00017946365486924213f64,
                -0.00008300698656022431f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            0.9230395870244597f64,
            -0.0010707081834185127f64,
            0f64,
            &[
                -0.018765175709923063f64,
                0.00011669725164439606f64,
                -0.00011322648989388013f64,
                0.000049144282945955534f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            0.6141419961301966f64,
            19.702057793318815f64,
            0.00000000016643698911600935f64,
            &[
                0.02485728795564792f64,
                -0.0003968499982587423f64,
                0.0000716825922415843f64,
                0.00011029852554073445f64,
                -0.019949113350295186f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Deimos;
impl NaifId for Deimos {
    fn id() -> i32 {
        402i32
    }
}
impl PointMass for Deimos {
    fn gravitational_parameter() -> f64 {
        0.00009615569648120313f64
    }
}
impl Ellipsoid for Deimos {
    fn polar_radius() -> f64 {
        5.1f64
    }
    fn mean_radius() -> f64 {
        6.3f64
    }
}
impl TriAxial for Deimos {
    fn subplanetary_radius() -> f64 {
        7.8f64
    }
    fn along_orbit_radius() -> f64 {
        6f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Deimos {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            5.526708263174914f64,
            -0.0018357397507085887f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.05396867424229676f64,
                0.004010877798556321f64,
                0.0011202666329959662f64,
                0.00044218562371099577f64,
                0.00013590791618817245f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            0.9339242922383507f64,
            -0.0010435487658623783f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.032102888827614605f64,
                0.002500240004017941f64,
                0.00033360380402252296f64,
                -0.0002587607695714273f64,
                0.00003358537079612689f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            1.3857797243489947f64,
            4.977013864082068f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.047814137677880446f64,
                -0.006975837721323607f64,
                -0.0011455047921115052f64,
                -0.0005084039391304362f64,
                0.0002965593651818685f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Io;
impl NaifId for Io {
    fn id() -> i32 {
        501i32
    }
}
impl PointMass for Io {
    fn gravitational_parameter() -> f64 {
        5959.915466180539f64
    }
}
impl Ellipsoid for Io {
    fn polar_radius() -> f64 {
        1815.7f64
    }
    fn mean_radius() -> f64 {
        1821.5f64
    }
}
impl TriAxial for Io {
    fn subplanetary_radius() -> f64 {
        1829.4f64
    }
    fn along_orbit_radius() -> f64 {
        1819.4f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Io {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.678355059970801f64,
            -0.00015707963267948965f64,
            0f64,
            &[
                0f64,
                0f64,
                0.0016406094968746698f64,
                0.0004188790204786391f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.1257373675363425f64,
            0.00005235987755982989f64,
            0f64,
            &[
                0f64,
                0f64,
                0.0006981317007977319f64,
                0.00019198621771937625f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            3.4974652880714365f64,
            3.551552235248627f64,
            0f64,
            &[
                0f64,
                0f64,
                -0.0014835298641951802f64,
                -0.0003839724354387525f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Europa;
impl NaifId for Europa {
    fn id() -> i32 {
        502i32
    }
}
impl PointMass for Europa {
    fn gravitational_parameter() -> f64 {
        3202.712099607295f64
    }
}
impl Ellipsoid for Europa {
    fn polar_radius() -> f64 {
        1559.5f64
    }
    fn mean_radius() -> f64 {
        1560.8f64
    }
}
impl TriAxial for Europa {
    fn subplanetary_radius() -> f64 {
        1562.6f64
    }
    fn along_orbit_radius() -> f64 {
        1560.3f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Europa {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.678878658746398f64,
            -0.00015707963267948965f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0.01895427567665842f64,
                0.0010471975511965976f64,
                0.0002617993877991494f64,
                0.00015707963267948965f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.125911900461542f64,
            0.00005235987755982989f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0.008168140899333463f64,
                0.0004537856055185257f64,
                0.00012217304763960306f64,
                0.00003490658503988659f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            0.6287025031533974f64,
            1.7693227033738699f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                -0.01710422666954443f64,
                -0.0009424777960769379f64,
                -0.0002443460952792061f64,
                -0.00013962634015954637f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Ganymede;
impl NaifId for Ganymede {
    fn id() -> i32 {
        503i32
    }
}
impl PointMass for Ganymede {
    fn gravitational_parameter() -> f64 {
        9887.832752719638f64
    }
}
impl Ellipsoid for Ganymede {
    fn polar_radius() -> f64 {
        2631.2f64
    }
    fn mean_radius() -> f64 {
        2631.2f64
    }
}
impl TriAxial for Ganymede {
    fn subplanetary_radius() -> f64 {
        2631.2f64
    }
    fn along_orbit_radius() -> f64 {
        2631.2f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Ganymede {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.680973053848792f64,
            -0.00015707963267948965f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                -0.0006457718232379018f64,
                0.0075223690760955605f64,
                0.0015882496193148398f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.1269590980127384f64,
            0.00005235987755982989f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                -0.00027925268031909274f64,
                0.003246312408709453f64,
                0.0006806784082777885f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            0.7690618815987814f64,
            0.8782079330731682f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0.0005759586531581288f64,
                -0.006789330790257942f64,
                -0.0014311699866353504f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Callisto;
impl NaifId for Callisto {
    fn id() -> i32 {
        504i32
    }
}
impl PointMass for Callisto {
    fn gravitational_parameter() -> f64 {
        7179.283402579837f64
    }
}
impl Ellipsoid for Callisto {
    fn polar_radius() -> f64 {
        2410.3f64
    }
    fn mean_radius() -> f64 {
        2410.3f64
    }
}
impl TriAxial for Callisto {
    fn subplanetary_radius() -> f64 {
        2410.3f64
    }
    fn along_orbit_radius() -> f64 {
        2410.3f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Callisto {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.690048765959163f64,
            -0.00015707963267948965f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                -0.001186823891356144f64,
                0.010297442586766544f64,
                0f64,
                0.00017453292519943296f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.1314969540679238f64,
            0.00005235987755982989f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                -0.0005061454830783556f64,
                0.004433136300065597f64,
                0f64,
                -0.00006981317007977319f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            4.529303941850484f64,
            0.37648622085811195f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0.001064650843716541f64,
                -0.009302604913129777f64,
                0f64,
                -0.00015707963267948965f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Amalthea;
impl NaifId for Amalthea {
    fn id() -> i32 {
        505i32
    }
}
impl PointMass for Amalthea {
    fn gravitational_parameter() -> f64 {
        0.1645634534798259f64
    }
}
impl Ellipsoid for Amalthea {
    fn polar_radius() -> f64 {
        64f64
    }
    fn mean_radius() -> f64 {
        87.33333333333333f64
    }
}
impl TriAxial for Amalthea {
    fn subplanetary_radius() -> f64 {
        125f64
    }
    fn along_orbit_radius() -> f64 {
        73f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Amalthea {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.678355059970801f64,
            -0.00015707963267948965f64,
            0f64,
            &[
                -0.014660765716752368f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.00017453292519943296f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.125562834611143f64,
            0.00005235987755982989f64,
            0f64,
            &[
                -0.006283185307179586f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            4.043404278095263f64,
            12.612298185680531f64,
            0f64,
            &[
                0.013264502315156905f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.00017453292519943296f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Himalia;
impl NaifId for Himalia {
    fn id() -> i32 {
        506i32
    }
}
impl PointMass for Himalia {
    fn gravitational_parameter() -> f64 {
        0.1515524299611265f64
    }
}
impl Ellipsoid for Himalia {
    fn polar_radius() -> f64 {
        85f64
    }
    fn mean_radius() -> f64 {
        85f64
    }
}
impl TriAxial for Himalia {
    fn subplanetary_radius() -> f64 {
        85f64
    }
    fn along_orbit_radius() -> f64 {
        85f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Himalia {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Elara;
impl NaifId for Elara {
    fn id() -> i32 {
        507i32
    }
}
impl Ellipsoid for Elara {
    fn polar_radius() -> f64 {
        40f64
    }
    fn mean_radius() -> f64 {
        40f64
    }
}
impl TriAxial for Elara {
    fn subplanetary_radius() -> f64 {
        40f64
    }
    fn along_orbit_radius() -> f64 {
        40f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Elara {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Pasiphae;
impl NaifId for Pasiphae {
    fn id() -> i32 {
        508i32
    }
}
impl Ellipsoid for Pasiphae {
    fn polar_radius() -> f64 {
        18f64
    }
    fn mean_radius() -> f64 {
        18f64
    }
}
impl TriAxial for Pasiphae {
    fn subplanetary_radius() -> f64 {
        18f64
    }
    fn along_orbit_radius() -> f64 {
        18f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Pasiphae {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Sinope;
impl NaifId for Sinope {
    fn id() -> i32 {
        509i32
    }
}
impl Ellipsoid for Sinope {
    fn polar_radius() -> f64 {
        14f64
    }
    fn mean_radius() -> f64 {
        14f64
    }
}
impl TriAxial for Sinope {
    fn subplanetary_radius() -> f64 {
        14f64
    }
    fn along_orbit_radius() -> f64 {
        14f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Sinope {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Lysithea;
impl NaifId for Lysithea {
    fn id() -> i32 {
        510i32
    }
}
impl Ellipsoid for Lysithea {
    fn polar_radius() -> f64 {
        12f64
    }
    fn mean_radius() -> f64 {
        12f64
    }
}
impl TriAxial for Lysithea {
    fn subplanetary_radius() -> f64 {
        12f64
    }
    fn along_orbit_radius() -> f64 {
        12f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Lysithea {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Carme;
impl NaifId for Carme {
    fn id() -> i32 {
        511i32
    }
}
impl Ellipsoid for Carme {
    fn polar_radius() -> f64 {
        15f64
    }
    fn mean_radius() -> f64 {
        15f64
    }
}
impl TriAxial for Carme {
    fn subplanetary_radius() -> f64 {
        15f64
    }
    fn along_orbit_radius() -> f64 {
        15f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Carme {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Ananke;
impl NaifId for Ananke {
    fn id() -> i32 {
        512i32
    }
}
impl Ellipsoid for Ananke {
    fn polar_radius() -> f64 {
        10f64
    }
    fn mean_radius() -> f64 {
        10f64
    }
}
impl TriAxial for Ananke {
    fn subplanetary_radius() -> f64 {
        10f64
    }
    fn along_orbit_radius() -> f64 {
        10f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Ananke {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Leda;
impl NaifId for Leda {
    fn id() -> i32 {
        513i32
    }
}
impl Ellipsoid for Leda {
    fn polar_radius() -> f64 {
        5f64
    }
    fn mean_radius() -> f64 {
        5f64
    }
}
impl TriAxial for Leda {
    fn subplanetary_radius() -> f64 {
        5f64
    }
    fn along_orbit_radius() -> f64 {
        5f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Leda {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Thebe;
impl NaifId for Thebe {
    fn id() -> i32 {
        514i32
    }
}
impl PointMass for Thebe {
    fn gravitational_parameter() -> f64 {
        0.030148f64
    }
}
impl Ellipsoid for Thebe {
    fn polar_radius() -> f64 {
        42f64
    }
    fn mean_radius() -> f64 {
        49.666666666666664f64
    }
}
impl TriAxial for Thebe {
    fn subplanetary_radius() -> f64 {
        58f64
    }
    fn along_orbit_radius() -> f64 {
        49f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Thebe {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.678355059970801f64,
            -0.00015707963267948965f64,
            0f64,
            &[
                0f64,
                -0.03682644721708035f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.0006981317007977319f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.125562834611143f64,
            0.00005235987755982989f64,
            0f64,
            &[
                0f64,
                -0.0158824961931484f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.00017453292519943296f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            0.1494001839707146f64,
            9.31482937374367f64,
            0f64,
            &[
                0f64,
                0.033335788713091695f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.0006981317007977319f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Adrastea;
impl NaifId for Adrastea {
    fn id() -> i32 {
        515i32
    }
}
impl PointMass for Adrastea {
    fn gravitational_parameter() -> f64 {
        0.000139f64
    }
}
impl Ellipsoid for Adrastea {
    fn polar_radius() -> f64 {
        7f64
    }
    fn mean_radius() -> f64 {
        8.333333333333334f64
    }
}
impl TriAxial for Adrastea {
    fn subplanetary_radius() -> f64 {
        10f64
    }
    fn along_orbit_radius() -> f64 {
        8f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Adrastea {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.678355059970801f64,
            -0.00015707963267948965f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.125562834611143f64,
            0.00005235987755982989f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            0.5810201079889122f64,
            21.066100687650238f64,
            0f64,
            &[] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Metis;
impl NaifId for Metis {
    fn id() -> i32 {
        516i32
    }
}
impl PointMass for Metis {
    fn gravitational_parameter() -> f64 {
        0.002501f64
    }
}
impl Ellipsoid for Metis {
    fn polar_radius() -> f64 {
        17f64
    }
    fn mean_radius() -> f64 {
        22.333333333333332f64
    }
}
impl TriAxial for Metis {
    fn subplanetary_radius() -> f64 {
        30f64
    }
    fn along_orbit_radius() -> f64 {
        20f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Metis {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.678355059970801f64,
            -0.00015707963267948965f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.125562834611143f64,
            0.00005235987755982989f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            6.040410008227175f64,
            21.3149160457997f64,
            0f64,
            &[] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Callirrhoe;
impl NaifId for Callirrhoe {
    fn id() -> i32 {
        517i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Callirrhoe {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Themisto;
impl NaifId for Themisto {
    fn id() -> i32 {
        518i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Themisto {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Magaclite;
impl NaifId for Magaclite {
    fn id() -> i32 {
        519i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Magaclite {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Taygete;
impl NaifId for Taygete {
    fn id() -> i32 {
        520i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Taygete {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Chaldene;
impl NaifId for Chaldene {
    fn id() -> i32 {
        521i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Chaldene {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Harpalyke;
impl NaifId for Harpalyke {
    fn id() -> i32 {
        522i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Harpalyke {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Kalyke;
impl NaifId for Kalyke {
    fn id() -> i32 {
        523i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Kalyke {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Iocaste;
impl NaifId for Iocaste {
    fn id() -> i32 {
        524i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Iocaste {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Erinome;
impl NaifId for Erinome {
    fn id() -> i32 {
        525i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Erinome {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Isonoe;
impl NaifId for Isonoe {
    fn id() -> i32 {
        526i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Isonoe {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Praxidike;
impl NaifId for Praxidike {
    fn id() -> i32 {
        527i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Praxidike {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Autonoe;
impl NaifId for Autonoe {
    fn id() -> i32 {
        528i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Autonoe {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Thyone;
impl NaifId for Thyone {
    fn id() -> i32 {
        529i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Thyone {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Hermippe;
impl NaifId for Hermippe {
    fn id() -> i32 {
        530i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Hermippe {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Aitne;
impl NaifId for Aitne {
    fn id() -> i32 {
        531i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Aitne {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Eurydome;
impl NaifId for Eurydome {
    fn id() -> i32 {
        532i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Eurydome {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Euanthe;
impl NaifId for Euanthe {
    fn id() -> i32 {
        533i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Euanthe {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Euporie;
impl NaifId for Euporie {
    fn id() -> i32 {
        534i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Euporie {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Orthosie;
impl NaifId for Orthosie {
    fn id() -> i32 {
        535i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Orthosie {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Sponde;
impl NaifId for Sponde {
    fn id() -> i32 {
        536i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Sponde {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Kale;
impl NaifId for Kale {
    fn id() -> i32 {
        537i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Kale {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Pasithee;
impl NaifId for Pasithee {
    fn id() -> i32 {
        538i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Pasithee {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Hegemone;
impl NaifId for Hegemone {
    fn id() -> i32 {
        539i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Hegemone {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Mneme;
impl NaifId for Mneme {
    fn id() -> i32 {
        540i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Mneme {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Aoede;
impl NaifId for Aoede {
    fn id() -> i32 {
        541i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Aoede {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Thelxinoe;
impl NaifId for Thelxinoe {
    fn id() -> i32 {
        542i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Thelxinoe {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Arche;
impl NaifId for Arche {
    fn id() -> i32 {
        543i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Arche {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Kallichore;
impl NaifId for Kallichore {
    fn id() -> i32 {
        544i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Kallichore {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Helike;
impl NaifId for Helike {
    fn id() -> i32 {
        545i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Helike {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Carpo;
impl NaifId for Carpo {
    fn id() -> i32 {
        546i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Carpo {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Eukelade;
impl NaifId for Eukelade {
    fn id() -> i32 {
        547i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Eukelade {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Cyllene;
impl NaifId for Cyllene {
    fn id() -> i32 {
        548i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Cyllene {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Kore;
impl NaifId for Kore {
    fn id() -> i32 {
        549i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Kore {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Herse;
impl NaifId for Herse {
    fn id() -> i32 {
        550i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Herse {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Dia;
impl NaifId for Dia {
    fn id() -> i32 {
        553i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Dia {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Mimas;
impl NaifId for Mimas {
    fn id() -> i32 {
        601i32
    }
}
impl PointMass for Mimas {
    fn gravitational_parameter() -> f64 {
        2.503488768152587f64
    }
}
impl Ellipsoid for Mimas {
    fn polar_radius() -> f64 {
        190.6f64
    }
    fn mean_radius() -> f64 {
        198.36666666666667f64
    }
}
impl TriAxial for Mimas {
    fn subplanetary_radius() -> f64 {
        207.8f64
    }
    fn along_orbit_radius() -> f64 {
        196.7f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Mimas {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            0.7096508738608943f64,
            -0.0006283185307179586f64,
            0f64,
            &[
                0f64,
                0f64,
                0.2366666465704311f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.457698991265664f64,
            -0.00006981317007977319f64,
            0f64,
            &[
                0f64,
                0f64,
                -0.026703537555513242f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            5.819974923700291f64,
            6.667062709440567f64,
            0f64,
            &[
                0f64,
                0f64,
                -0.23527038316883564f64,
                0f64,
                -0.7827801695194568f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Enceladus;
impl NaifId for Enceladus {
    fn id() -> i32 {
        602i32
    }
}
impl PointMass for Enceladus {
    fn gravitational_parameter() -> f64 {
        7.210366688598896f64
    }
}
impl Ellipsoid for Enceladus {
    fn polar_radius() -> f64 {
        248.3f64
    }
    fn mean_radius() -> f64 {
        252.1f64
    }
}
impl TriAxial for Enceladus {
    fn subplanetary_radius() -> f64 {
        256.6f64
    }
    fn along_orbit_radius() -> f64 {
        251.4f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Enceladus {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            0.7096508738608943f64,
            -0.0006283185307179586f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.457698991265664f64,
            -0.00006981317007977319f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            0.11030480872604163f64,
            4.585536698039173f64,
            0f64,
            &[] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Tethys;
impl NaifId for Tethys {
    fn id() -> i32 {
        603i32
    }
}
impl PointMass for Tethys {
    fn gravitational_parameter() -> f64 {
        41.21352885489587f64
    }
}
impl Ellipsoid for Tethys {
    fn polar_radius() -> f64 {
        526.3f64
    }
    fn mean_radius() -> f64 {
        530.9999999999999f64
    }
}
impl TriAxial for Tethys {
    fn subplanetary_radius() -> f64 {
        538.4f64
    }
    fn along_orbit_radius() -> f64 {
        528.3f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Tethys {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            0.7096508738608943f64,
            -0.0006283185307179586f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0.16859880574265224f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.457698991265664f64,
            -0.00006981317007977319f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                -0.019024088846738195f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            0.1562069680534925f64,
            3.328306379991881f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                -0.16755160819145562f64,
                0.03892084231947355f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Dione;
impl NaifId for Dione {
    fn id() -> i32 {
        604i32
    }
}
impl PointMass for Dione {
    fn gravitational_parameter() -> f64 {
        73.11607172482067f64
    }
}
impl Ellipsoid for Dione {
    fn polar_radius() -> f64 {
        559.6f64
    }
    fn mean_radius() -> f64 {
        561.4333333333333f64
    }
}
impl TriAxial for Dione {
    fn subplanetary_radius() -> f64 {
        563.4f64
    }
    fn along_orbit_radius() -> f64 {
        561.3f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Dione {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            0.7096508738608943f64,
            -0.0006283185307179586f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.457698991265664f64,
            -0.00006981317007977319f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            6.241297405131723f64,
            2.295717637805533f64,
            0f64,
            &[] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Rhea;
impl NaifId for Rhea {
    fn id() -> i32 {
        605i32
    }
}
impl PointMass for Rhea {
    fn gravitational_parameter() -> f64 {
        153.9417519146563f64
    }
}
impl Ellipsoid for Rhea {
    fn polar_radius() -> f64 {
        762.4f64
    }
    fn mean_radius() -> f64 {
        763.5f64
    }
}
impl TriAxial for Rhea {
    fn subplanetary_radius() -> f64 {
        765f64
    }
    fn along_orbit_radius() -> f64 {
        763.1f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Rhea {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            0.7047639519553103f64,
            -0.0006283185307179586f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.054105206811824215f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.4582225900412622f64,
            -0.00006981317007977319f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.006108652381980153f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            4.104316268989865f64,
            1.3908537151816638f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.05375614096142535f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Titan;
impl NaifId for Titan {
    fn id() -> i32 {
        606i32
    }
}
impl PointMass for Titan {
    fn gravitational_parameter() -> f64 {
        8978.137095521046f64
    }
}
impl Ellipsoid for Titan {
    fn polar_radius() -> f64 {
        2574.47f64
    }
    fn mean_radius() -> f64 {
        2574.7999999999997f64
    }
}
impl TriAxial for Titan {
    fn subplanetary_radius() -> f64 {
        2575.15f64
    }
    fn along_orbit_radius() -> f64 {
        2574.78f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Titan {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            0.6891031125771652f64,
            0f64,
            0f64,
            &[0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.456091543024577f64,
            0f64,
            0f64,
            &[0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            3.2565313114798795f64,
            0.39404258030637335f64,
            0f64,
            &[0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Hyperion;
impl NaifId for Hyperion {
    fn id() -> i32 {
        607i32
    }
}
impl PointMass for Hyperion {
    fn gravitational_parameter() -> f64 {
        0.3704913747932265f64
    }
}
impl Ellipsoid for Hyperion {
    fn polar_radius() -> f64 {
        102.7f64
    }
    fn mean_radius() -> f64 {
        138.6f64
    }
}
impl TriAxial for Hyperion {
    fn subplanetary_radius() -> f64 {
        180.1f64
    }
    fn along_orbit_radius() -> f64 {
        133f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Hyperion {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Iapetus;
impl NaifId for Iapetus {
    fn id() -> i32 {
        608i32
    }
}
impl PointMass for Iapetus {
    fn gravitational_parameter() -> f64 {
        120.5151060137642f64
    }
}
impl Ellipsoid for Iapetus {
    fn polar_radius() -> f64 {
        712.1f64
    }
    fn mean_radius() -> f64 {
        734.5f64
    }
}
impl TriAxial for Iapetus {
    fn subplanetary_radius() -> f64 {
        745.7f64
    }
    fn along_orbit_radius() -> f64 {
        745.7f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Iapetus {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            5.552939548145159f64,
            -0.06892305216125608f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.3095205377713455f64,
            -0.019949113350295186f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            6.199409503083858f64,
            0.07920229445458282f64,
            0f64,
            &[] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Phoebe;
impl NaifId for Phoebe {
    fn id() -> i32 {
        609i32
    }
}
impl PointMass for Phoebe {
    fn gravitational_parameter() -> f64 {
        0.5547860052791678f64
    }
}
impl Ellipsoid for Phoebe {
    fn polar_radius() -> f64 {
        101.8f64
    }
    fn mean_radius() -> f64 {
        106.56666666666666f64
    }
}
impl TriAxial for Phoebe {
    fn subplanetary_radius() -> f64 {
        109.4f64
    }
    fn along_orbit_radius() -> f64 {
        108.5f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Phoebe {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (6.229080100367762f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (1.3578661580515883f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            3.116808978211474f64,
            16.26016798998745f64,
            0f64,
            &[] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Janus;
impl NaifId for Janus {
    fn id() -> i32 {
        610i32
    }
}
impl PointMass for Janus {
    fn gravitational_parameter() -> f64 {
        0.1265765099012197f64
    }
}
impl Ellipsoid for Janus {
    fn polar_radius() -> f64 {
        76.3f64
    }
    fn mean_radius() -> f64 {
        90.33333333333333f64
    }
}
impl TriAxial for Janus {
    fn subplanetary_radius() -> f64 {
        101.7f64
    }
    fn along_orbit_radius() -> f64 {
        93f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Janus {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            0.7082546104592989f64,
            -0.0006283185307179586f64,
            0f64,
            &[
                0f64,
                -0.028326693759867967f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.0004014257279586958f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.457698991265664f64,
            -0.00006981317007977319f64,
            0f64,
            &[
                0f64,
                -0.003193952531149623f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.000017453292519943296f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            1.0267771989482641f64,
            9.044924285944507f64,
            0f64,
            &[
                0f64,
                0.028152160834668535f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.0004014257279586958f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Epimetheus;
impl NaifId for Epimetheus {
    fn id() -> i32 {
        611i32
    }
}
impl PointMass for Epimetheus {
    fn gravitational_parameter() -> f64 {
        0.03512333288208074f64
    }
}
impl Ellipsoid for Epimetheus {
    fn polar_radius() -> f64 {
        53f64
    }
    fn mean_radius() -> f64 {
        58.4f64
    }
}
impl TriAxial for Epimetheus {
    fn subplanetary_radius() -> f64 {
        64.9f64
    }
    fn along_orbit_radius() -> f64 {
        57.3f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Epimetheus {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            0.7082546104592989f64,
            -0.0006283185307179586f64,
            0f64,
            &[
                -0.05503023131538121f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.0015009831567151233f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.457698991265664f64,
            -0.00006981317007977319f64,
            0f64,
            &[
                -0.006213372137099813f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.00008726646259971648f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            5.128999072835736f64,
            9.049370273103856f64,
            0f64,
            &[
                0.05468116546498235f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.0015009831567151233f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Helene;
impl NaifId for Helene {
    fn id() -> i32 {
        612i32
    }
}
impl PointMass for Helene {
    fn gravitational_parameter() -> f64 {
        0.0004757419551776972f64
    }
}
impl Ellipsoid for Helene {
    fn polar_radius() -> f64 {
        13.3f64
    }
    fn mean_radius() -> f64 {
        18.46666666666667f64
    }
}
impl TriAxial for Helene {
    fn subplanetary_radius() -> f64 {
        22.5f64
    }
    fn along_orbit_radius() -> f64 {
        19.6f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Helene {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            0.7129669994396837f64,
            -0.0006283185307179586f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.4545573986120743f64,
            -0.00006981317007977319f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            4.278151062488501f64,
            2.297157080652823f64,
            0f64,
            &[] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Telesto;
impl NaifId for Telesto {
    fn id() -> i32 {
        613i32
    }
}
impl Ellipsoid for Telesto {
    fn polar_radius() -> f64 {
        9.8f64
    }
    fn mean_radius() -> f64 {
        12.633333333333335f64
    }
}
impl TriAxial for Telesto {
    fn subplanetary_radius() -> f64 {
        16.3f64
    }
    fn along_orbit_radius() -> f64 {
        11.8f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Telesto {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            0.8815658051823358f64,
            -0.0006283185307179586f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.4671237692264334f64,
            -0.00006981317007977319f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            0.9927432785343747f64,
            3.328306811088206f64,
            0f64,
            &[] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Calypso;
impl NaifId for Calypso {
    fn id() -> i32 {
        614i32
    }
}
impl Ellipsoid for Calypso {
    fn polar_radius() -> f64 {
        6.3f64
    }
    fn mean_radius() -> f64 {
        10.3f64
    }
}
impl TriAxial for Calypso {
    fn subplanetary_radius() -> f64 {
        15.3f64
    }
    fn along_orbit_radius() -> f64 {
        9.3f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Calypso {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            0.6354743806511354f64,
            -0.0006283185307179586f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.4842279958959779f64,
            -0.00006981317007977319f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            2.679254934736495f64,
            3.327893239613983f64,
            0f64,
            &[] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Atlas;
impl NaifId for Atlas {
    fn id() -> i32 {
        615i32
    }
}
impl PointMass for Atlas {
    fn gravitational_parameter() -> f64 {
        0.0003718871247516475f64
    }
}
impl Ellipsoid for Atlas {
    fn polar_radius() -> f64 {
        9.4f64
    }
    fn mean_radius() -> f64 {
        15.899999999999999f64
    }
}
impl TriAxial for Atlas {
    fn subplanetary_radius() -> f64 {
        20.5f64
    }
    fn along_orbit_radius() -> f64 {
        17.8f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Atlas {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            0.7082546104592989f64,
            -0.0006283185307179586f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.4578735241908636f64,
            -0.00006981317007977319f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            2.4064599726497815f64,
            10.442409634437194f64,
            0f64,
            &[] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Prometheus;
impl NaifId for Prometheus {
    fn id() -> i32 {
        616i32
    }
}
impl PointMass for Prometheus {
    fn gravitational_parameter() -> f64 {
        0.0107520800100761f64
    }
}
impl Ellipsoid for Prometheus {
    fn polar_radius() -> f64 {
        28.2f64
    }
    fn mean_radius() -> f64 {
        46f64
    }
}
impl TriAxial for Prometheus {
    fn subplanetary_radius() -> f64 {
        68.2f64
    }
    fn along_orbit_radius() -> f64 {
        41.6f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Prometheus {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            0.7082546104592989f64,
            -0.0006283185307179586f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.4578735241908636f64,
            -0.00006981317007977319f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            5.1686180468560075f64,
            10.250126710744977f64,
            0f64,
            &[] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Pandora;
impl NaifId for Pandora {
    fn id() -> i32 {
        617i32
    }
}
impl PointMass for Pandora {
    fn gravitational_parameter() -> f64 {
        0.009290325122028795f64
    }
}
impl Ellipsoid for Pandora {
    fn polar_radius() -> f64 {
        31.5f64
    }
    fn mean_radius() -> f64 {
        41.5f64
    }
}
impl TriAxial for Pandora {
    fn subplanetary_radius() -> f64 {
        52.2f64
    }
    fn along_orbit_radius() -> f64 {
        40.8f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Pandora {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            0.7082546104592989f64,
            -0.0006283185307179586f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.4578735241908636f64,
            -0.00006981317007977319f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            2.8434904173491615f64,
            9.997055714535051f64,
            0f64,
            &[] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Pan;
impl NaifId for Pan {
    fn id() -> i32 {
        618i32
    }
}
impl Ellipsoid for Pan {
    fn polar_radius() -> f64 {
        10.4f64
    }
    fn mean_radius() -> f64 {
        14.333333333333334f64
    }
}
impl TriAxial for Pan {
    fn subplanetary_radius() -> f64 {
        17.2f64
    }
    fn along_orbit_radius() -> f64 {
        15.4f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Pan {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            0.7086036763096978f64,
            -0.0006283185307179586f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            1.457349925415265f64,
            -0.00006981317007977319f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            0.8517206749732328f64,
            10.92652906235538f64,
            0f64,
            &[] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Ymir;
impl NaifId for Ymir {
    fn id() -> i32 {
        619i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Ymir {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Paaliaq;
impl NaifId for Paaliaq {
    fn id() -> i32 {
        620i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Paaliaq {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Tarvos;
impl NaifId for Tarvos {
    fn id() -> i32 {
        621i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Tarvos {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Ijiraq;
impl NaifId for Ijiraq {
    fn id() -> i32 {
        622i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Ijiraq {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Suttungr;
impl NaifId for Suttungr {
    fn id() -> i32 {
        623i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Suttungr {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Kiviuq;
impl NaifId for Kiviuq {
    fn id() -> i32 {
        624i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Kiviuq {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Mundilfari;
impl NaifId for Mundilfari {
    fn id() -> i32 {
        625i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Mundilfari {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Albiorix;
impl NaifId for Albiorix {
    fn id() -> i32 {
        626i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Albiorix {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Skathi;
impl NaifId for Skathi {
    fn id() -> i32 {
        627i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Skathi {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Erriapus;
impl NaifId for Erriapus {
    fn id() -> i32 {
        628i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Erriapus {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Siarnaq;
impl NaifId for Siarnaq {
    fn id() -> i32 {
        629i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Siarnaq {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Thrymr;
impl NaifId for Thrymr {
    fn id() -> i32 {
        630i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Thrymr {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Narvi;
impl NaifId for Narvi {
    fn id() -> i32 {
        631i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Narvi {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Methone;
impl NaifId for Methone {
    fn id() -> i32 {
        632i32
    }
}
impl Ellipsoid for Methone {
    fn polar_radius() -> f64 {
        1.21f64
    }
    fn mean_radius() -> f64 {
        1.4799999999999998f64
    }
}
impl TriAxial for Methone {
    fn subplanetary_radius() -> f64 {
        1.94f64
    }
    fn along_orbit_radius() -> f64 {
        1.29f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Methone {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Pallene;
impl NaifId for Pallene {
    fn id() -> i32 {
        633i32
    }
}
impl Ellipsoid for Pallene {
    fn polar_radius() -> f64 {
        1.8f64
    }
    fn mean_radius() -> f64 {
        2.2533333333333334f64
    }
}
impl TriAxial for Pallene {
    fn subplanetary_radius() -> f64 {
        2.88f64
    }
    fn along_orbit_radius() -> f64 {
        2.08f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Pallene {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Polydeuces;
impl NaifId for Polydeuces {
    fn id() -> i32 {
        634i32
    }
}
impl Ellipsoid for Polydeuces {
    fn polar_radius() -> f64 {
        1f64
    }
    fn mean_radius() -> f64 {
        1.2333333333333334f64
    }
}
impl TriAxial for Polydeuces {
    fn subplanetary_radius() -> f64 {
        1.5f64
    }
    fn along_orbit_radius() -> f64 {
        1.2f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Polydeuces {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Daphnis;
impl NaifId for Daphnis {
    fn id() -> i32 {
        635i32
    }
}
impl Ellipsoid for Daphnis {
    fn polar_radius() -> f64 {
        2.8f64
    }
    fn mean_radius() -> f64 {
        3.9666666666666663f64
    }
}
impl TriAxial for Daphnis {
    fn subplanetary_radius() -> f64 {
        4.6f64
    }
    fn along_orbit_radius() -> f64 {
        4.5f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Daphnis {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Aegir;
impl NaifId for Aegir {
    fn id() -> i32 {
        636i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Aegir {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Bebhionn;
impl NaifId for Bebhionn {
    fn id() -> i32 {
        637i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Bebhionn {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Bergelmir;
impl NaifId for Bergelmir {
    fn id() -> i32 {
        638i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Bergelmir {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Bestla;
impl NaifId for Bestla {
    fn id() -> i32 {
        639i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Bestla {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Farbauti;
impl NaifId for Farbauti {
    fn id() -> i32 {
        640i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Farbauti {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Fenrir;
impl NaifId for Fenrir {
    fn id() -> i32 {
        641i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Fenrir {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Fornjot;
impl NaifId for Fornjot {
    fn id() -> i32 {
        642i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Fornjot {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Hati;
impl NaifId for Hati {
    fn id() -> i32 {
        643i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Hati {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Hyrrokkin;
impl NaifId for Hyrrokkin {
    fn id() -> i32 {
        644i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Hyrrokkin {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Kari;
impl NaifId for Kari {
    fn id() -> i32 {
        645i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Kari {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Loge;
impl NaifId for Loge {
    fn id() -> i32 {
        646i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Loge {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Skoll;
impl NaifId for Skoll {
    fn id() -> i32 {
        647i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Skoll {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Surtur;
impl NaifId for Surtur {
    fn id() -> i32 {
        648i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Surtur {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Anthe;
impl NaifId for Anthe {
    fn id() -> i32 {
        649i32
    }
}
impl Ellipsoid for Anthe {
    fn polar_radius() -> f64 {
        0.5f64
    }
    fn mean_radius() -> f64 {
        0.5f64
    }
}
impl TriAxial for Anthe {
    fn subplanetary_radius() -> f64 {
        0.5f64
    }
    fn along_orbit_radius() -> f64 {
        0.5f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Anthe {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Jarnsaxa;
impl NaifId for Jarnsaxa {
    fn id() -> i32 {
        650i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Jarnsaxa {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Greip;
impl NaifId for Greip {
    fn id() -> i32 {
        651i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Greip {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Tarqeq;
impl NaifId for Tarqeq {
    fn id() -> i32 {
        652i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Tarqeq {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Aegaeon;
impl NaifId for Aegaeon {
    fn id() -> i32 {
        653i32
    }
}
impl Ellipsoid for Aegaeon {
    fn polar_radius() -> f64 {
        0.2f64
    }
    fn mean_radius() -> f64 {
        0.3833333333333333f64
    }
}
impl TriAxial for Aegaeon {
    fn subplanetary_radius() -> f64 {
        0.7f64
    }
    fn along_orbit_radius() -> f64 {
        0.25f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Aegaeon {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Ariel;
impl NaifId for Ariel {
    fn id() -> i32 {
        701i32
    }
}
impl PointMass for Ariel {
    fn gravitational_parameter() -> f64 {
        83.46344431770477f64
    }
}
impl Ellipsoid for Ariel {
    fn polar_radius() -> f64 {
        577.7f64
    }
    fn mean_radius() -> f64 {
        578.9f64
    }
}
impl TriAxial for Ariel {
    fn subplanetary_radius() -> f64 {
        581.1f64
    }
    fn along_orbit_radius() -> f64 {
        577.9f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Ariel {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.493001093409003f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.005061454830783556f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            -0.26354471705114374f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.004886921905584123f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            2.7265533574655416f64,
            -2.492952697630833f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.0008726646259971648f64,
                0.0013962634015954637f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Umbriel;
impl NaifId for Umbriel {
    fn id() -> i32 {
        702i32
    }
}
impl PointMass for Umbriel {
    fn gravitational_parameter() -> f64 {
        85.09338094489388f64
    }
}
impl Ellipsoid for Umbriel {
    fn polar_radius() -> f64 {
        584.7f64
    }
    fn mean_radius() -> f64 {
        584.7f64
    }
}
impl TriAxial for Umbriel {
    fn subplanetary_radius() -> f64 {
        584.7f64
    }
    fn along_orbit_radius() -> f64 {
        584.7f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Umbriel {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.493001093409003f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.003665191429188092f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            -0.26354471705114374f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.003490658503988659f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            1.885828256779873f64,
            -1.5161481881953498f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.0015707963267948964f64,
                0f64,
                0.0010471975511965976f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Titania;
impl NaifId for Titania {
    fn id() -> i32 {
        703i32
    }
}
impl PointMass for Titania {
    fn gravitational_parameter() -> f64 {
        226.9437003741248f64
    }
}
impl Ellipsoid for Titania {
    fn polar_radius() -> f64 {
        788.9f64
    }
    fn mean_radius() -> f64 {
        788.9f64
    }
}
impl TriAxial for Titania {
    fn subplanetary_radius() -> f64 {
        788.9f64
    }
    fn along_orbit_radius() -> f64 {
        788.9f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Titania {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.493001093409003f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.005061454830783556f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            -0.26354471705114374f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.004886921905584123f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            1.3568189605003917f64,
            -0.7217186318332268f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.0013962634015954637f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Oberon;
impl NaifId for Oberon {
    fn id() -> i32 {
        704i32
    }
}
impl PointMass for Oberon {
    fn gravitational_parameter() -> f64 {
        205.3234302535623f64
    }
}
impl Ellipsoid for Oberon {
    fn polar_radius() -> f64 {
        761.4f64
    }
    fn mean_radius() -> f64 {
        761.4f64
    }
}
impl TriAxial for Oberon {
    fn subplanetary_radius() -> f64 {
        761.4f64
    }
    fn along_orbit_radius() -> f64 {
        761.4f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Oberon {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.493001093409003f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.0027925268031909274f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            -0.26354471705114374f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.0027925268031909274f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            0.1181587903600161f64,
            -0.4666921966546346f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.0006981317007977319f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Miranda;
impl NaifId for Miranda {
    fn id() -> i32 {
        705i32
    }
}
impl PointMass for Miranda {
    fn gravitational_parameter() -> f64 {
        4.3195168992321f64
    }
}
impl Ellipsoid for Miranda {
    fn polar_radius() -> f64 {
        232.9f64
    }
    fn mean_radius() -> f64 {
        235.83333333333334f64
    }
}
impl TriAxial for Miranda {
    fn subplanetary_radius() -> f64 {
        240.4f64
    }
    fn along_orbit_radius() -> f64 {
        234.2f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Miranda {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.493001093409003f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.07696902001294993f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.0006981317007977319f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            -0.2631956512007449f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.07417649320975901f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.00034906585039886593f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            0.5358160803622591f64,
            -4.445191100713563f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.02007128639793479f64,
                -0.022165681500327987f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.0015707963267948964f64,
                0.002617993877991494f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Cordelia;
impl NaifId for Cordelia {
    fn id() -> i32 {
        706i32
    }
}
impl Ellipsoid for Cordelia {
    fn polar_radius() -> f64 {
        13f64
    }
    fn mean_radius() -> f64 {
        13f64
    }
}
impl TriAxial for Cordelia {
    fn subplanetary_radius() -> f64 {
        13f64
    }
    fn along_orbit_radius() -> f64 {
        13f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Cordelia {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.49090669830661f64,
            0f64,
            0f64,
            &[
                -0.002617993877991494f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            -0.2649409804527392f64,
            0f64,
            0f64,
            &[
                0.0024434609527920616f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            2.2286109218715593f64,
            -18.753921879266084f64,
            0f64,
            &[
                -0.0006981317007977319f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Ophelia;
impl NaifId for Ophelia {
    fn id() -> i32 {
        707i32
    }
}
impl Ellipsoid for Ophelia {
    fn polar_radius() -> f64 {
        15f64
    }
    fn mean_radius() -> f64 {
        15f64
    }
}
impl TriAxial for Ophelia {
    fn subplanetary_radius() -> f64 {
        15f64
    }
    fn along_orbit_radius() -> f64 {
        15f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Ophelia {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.49090669830661f64,
            0f64,
            0f64,
            &[
                0f64,
                -0.0015707963267948964f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            -0.2649409804527392f64,
            0f64,
            0f64,
            &[
                0f64,
                0.0015707963267948964f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            2.2750366799746087f64,
            -16.692447910262292f64,
            0f64,
            &[
                0f64,
                -0.0005235987755982988f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Bianca;
impl NaifId for Bianca {
    fn id() -> i32 {
        708i32
    }
}
impl Ellipsoid for Bianca {
    fn polar_radius() -> f64 {
        21f64
    }
    fn mean_radius() -> f64 {
        21f64
    }
}
impl TriAxial for Bianca {
    fn subplanetary_radius() -> f64 {
        21f64
    }
    fn along_orbit_radius() -> f64 {
        21f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Bianca {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.49090669830661f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                -0.0027925268031909274f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            -0.2649409804527392f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0.0027925268031909274f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            1.8406242291532198f64,
            -14.458158751655587f64,
            0f64,
            &[
                0f64,
                0f64,
                -0.0006981317007977319f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Cressida;
impl NaifId for Cressida {
    fn id() -> i32 {
        709i32
    }
}
impl Ellipsoid for Cressida {
    fn polar_radius() -> f64 {
        31f64
    }
    fn mean_radius() -> f64 {
        31f64
    }
}
impl TriAxial for Cressida {
    fn subplanetary_radius() -> f64 {
        31f64
    }
    fn along_orbit_radius() -> f64 {
        31f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Cressida {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.49090669830661f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                -0.0006981317007977319f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            -0.2649409804527392f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0.0006981317007977319f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            1.0325367854798453f64,
            -13.553906388910956f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                -0.00017453292519943296f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Desdemona;
impl NaifId for Desdemona {
    fn id() -> i32 {
        710i32
    }
}
impl Ellipsoid for Desdemona {
    fn polar_radius() -> f64 {
        27f64
    }
    fn mean_radius() -> f64 {
        27f64
    }
}
impl TriAxial for Desdemona {
    fn subplanetary_radius() -> f64 {
        27f64
    }
    fn along_orbit_radius() -> f64 {
        27f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Desdemona {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.49090669830661f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                -0.0029670597283903604f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            -0.2649409804527392f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0.0027925268031909274f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            1.6594590527962085f64,
            -13.265430289266899f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                -0.0006981317007977319f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Juliet;
impl NaifId for Juliet {
    fn id() -> i32 {
        711i32
    }
}
impl Ellipsoid for Juliet {
    fn polar_radius() -> f64 {
        42f64
    }
    fn mean_radius() -> f64 {
        42f64
    }
}
impl TriAxial for Juliet {
    fn subplanetary_radius() -> f64 {
        42f64
    }
    fn along_orbit_radius() -> f64 {
        42f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Juliet {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.49090669830661f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.0010471975511965976f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            -0.2649409804527392f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.0010471975511965976f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            5.2806681848340435f64,
            -12.74309158902866f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.00034906585039886593f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Portia;
impl NaifId for Portia {
    fn id() -> i32 {
        712i32
    }
}
impl Ellipsoid for Portia {
    fn polar_radius() -> f64 {
        54f64
    }
    fn mean_radius() -> f64 {
        54f64
    }
}
impl TriAxial for Portia {
    fn subplanetary_radius() -> f64 {
        54f64
    }
    fn along_orbit_radius() -> f64 {
        54f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Portia {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.49090669830661f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.0015707963267948964f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            -0.2649409804527392f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.0015707963267948964f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            0.4368559117741807f64,
            -12.243250601727652f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.00034906585039886593f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Rosalind;
impl NaifId for Rosalind {
    fn id() -> i32 {
        713i32
    }
}
impl Ellipsoid for Rosalind {
    fn polar_radius() -> f64 {
        27f64
    }
    fn mean_radius() -> f64 {
        27f64
    }
}
impl TriAxial for Rosalind {
    fn subplanetary_radius() -> f64 {
        27f64
    }
    fn along_orbit_radius() -> f64 {
        27f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Rosalind {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.49090669830661f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.005061454830783556f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            -0.2649409804527392f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.004886921905584123f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            5.496041814530144f64,
            -11.250935609538423f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.0013962634015954637f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Belinda;
impl NaifId for Belinda {
    fn id() -> i32 {
        714i32
    }
}
impl Ellipsoid for Belinda {
    fn polar_radius() -> f64 {
        33f64
    }
    fn mean_radius() -> f64 {
        33f64
    }
}
impl TriAxial for Belinda {
    fn subplanetary_radius() -> f64 {
        33f64
    }
    fn along_orbit_radius() -> f64 {
        33f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Belinda {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.49090669830661f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.0005235987755982988f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            -0.2649409804527392f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.0005235987755982988f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            5.191656392982332f64,
            -10.076882135239488f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.00017453292519943296f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Puck;
impl NaifId for Puck {
    fn id() -> i32 {
        715i32
    }
}
impl Ellipsoid for Puck {
    fn polar_radius() -> f64 {
        77f64
    }
    fn mean_radius() -> f64 {
        77f64
    }
}
impl TriAxial for Puck {
    fn subplanetary_radius() -> f64 {
        77f64
    }
    fn along_orbit_radius() -> f64 {
        77f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Puck {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            4.49090669830661f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.005759586531581287f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            -0.2649409804527392f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.0054105206811824215f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            1.5924384095196262f64,
            -8.247467318113788f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.0015707963267948964f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Caliban;
impl NaifId for Caliban {
    fn id() -> i32 {
        716i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Caliban {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Sycorax;
impl NaifId for Sycorax {
    fn id() -> i32 {
        717i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Sycorax {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Prospero;
impl NaifId for Prospero {
    fn id() -> i32 {
        718i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Prospero {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Setebos;
impl NaifId for Setebos {
    fn id() -> i32 {
        719i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Setebos {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Stephano;
impl NaifId for Stephano {
    fn id() -> i32 {
        720i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Stephano {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Trinculo;
impl NaifId for Trinculo {
    fn id() -> i32 {
        721i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Trinculo {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Francisco;
impl NaifId for Francisco {
    fn id() -> i32 {
        722i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Francisco {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Margaret;
impl NaifId for Margaret {
    fn id() -> i32 {
        723i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Margaret {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Ferdinand;
impl NaifId for Ferdinand {
    fn id() -> i32 {
        724i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Ferdinand {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Perdita;
impl NaifId for Perdita {
    fn id() -> i32 {
        725i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Perdita {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Mab;
impl NaifId for Mab {
    fn id() -> i32 {
        726i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Mab {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Cupid;
impl NaifId for Cupid {
    fn id() -> i32 {
        727i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Cupid {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Triton;
impl NaifId for Triton {
    fn id() -> i32 {
        801i32
    }
}
impl PointMass for Triton {
    fn gravitational_parameter() -> f64 {
        1428.495462910464f64
    }
}
impl Ellipsoid for Triton {
    fn polar_radius() -> f64 {
        1352.6f64
    }
    fn mean_radius() -> f64 {
        1352.6f64
    }
}
impl TriAxial for Triton {
    fn subplanetary_radius() -> f64 {
        1352.6f64
    }
    fn along_orbit_radius() -> f64 {
        1352.6f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Triton {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            5.224817648770225f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.5646140130201657f64,
                0f64,
                -0.1096066770252439f64,
                -0.03630284844148206f64,
                -0.012915436464758038f64,
                -0.004886921905584123f64,
                -0.0019198621771937625f64,
                -0.0012217304763960308f64,
                -0.00034906585039886593f64,
                -0.00017453292519943296f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            0.7185520530460655f64,
            0f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.3935717463247213f64,
                0f64,
                0.03665191429188092f64,
                0.009599310885968814f64,
                0.0027925268031909274f64,
                0.0008726646259971648f64,
                0.00034906585039886593f64,
                0.00017453292519943296f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            5.175424830938785f64,
            -1.069140942327404f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.3883357585687383f64,
                0f64,
                0.11746065865921838f64,
                0.03577924966588375f64,
                0.012915436464758038f64,
                0.004886921905584123f64,
                0.0019198621771937625f64,
                0.0008726646259971648f64,
                0.00034906585039886593f64,
                0.00017453292519943296f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Nereid;
impl NaifId for Nereid {
    fn id() -> i32 {
        802i32
    }
}
impl Ellipsoid for Nereid {
    fn polar_radius() -> f64 {
        170f64
    }
    fn mean_radius() -> f64 {
        170f64
    }
}
impl TriAxial for Nereid {
    fn subplanetary_radius() -> f64 {
        170f64
    }
    fn along_orbit_radius() -> f64 {
        170f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Nereid {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Naiad;
impl NaifId for Naiad {
    fn id() -> i32 {
        803i32
    }
}
impl PointMass for Naiad {
    fn gravitational_parameter() -> f64 {
        0.008530281246540886f64
    }
}
impl Ellipsoid for Naiad {
    fn polar_radius() -> f64 {
        29f64
    }
    fn mean_radius() -> f64 {
        29f64
    }
}
impl TriAxial for Naiad {
    fn subplanetary_radius() -> f64 {
        29f64
    }
    fn along_orbit_radius() -> f64 {
        29f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Naiad {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            5.224817648770225f64,
            0f64,
            0f64,
            &[
                0.012217304763960306f64,
                -0.11327186845443199f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.004363323129985824f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            0.7567747636647413f64,
            0f64,
            0f64,
            &[
                -0.00890117918517108f64,
                -0.08290313946973066f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.0015707963267948964f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            4.434183497616794f64,
            21.342656148360604f64,
            0f64,
            &[
                -0.008377580409572781f64,
                0.07679448708775051f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.00471238898038469f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Thalassa;
impl NaifId for Thalassa {
    fn id() -> i32 {
        804i32
    }
}
impl PointMass for Thalassa {
    fn gravitational_parameter() -> f64 {
        0.0235887319799217f64
    }
}
impl Ellipsoid for Thalassa {
    fn polar_radius() -> f64 {
        40f64
    }
    fn mean_radius() -> f64 {
        40f64
    }
}
impl TriAxial for Thalassa {
    fn subplanetary_radius() -> f64 {
        40f64
    }
    fn along_orbit_radius() -> f64 {
        40f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Thalassa {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            5.224817648770225f64,
            0f64,
            0f64,
            &[
                0.012217304763960306f64,
                0f64,
                -0.004886921905584123f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            0.7583455599915362f64,
            0f64,
            0f64,
            &[
                -0.00890117918517108f64,
                0f64,
                -0.003665191429188092f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            1.7812830345854127f64,
            20.171739891174827f64,
            0f64,
            &[
                -0.008377580409572781f64,
                0f64,
                0.0033161255787892262f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Despina;
impl NaifId for Despina {
    fn id() -> i32 {
        805i32
    }
}
impl PointMass for Despina {
    fn gravitational_parameter() -> f64 {
        0.1167318403814998f64
    }
}
impl Ellipsoid for Despina {
    fn polar_radius() -> f64 {
        74f64
    }
    fn mean_radius() -> f64 {
        74f64
    }
}
impl TriAxial for Despina {
    fn subplanetary_radius() -> f64 {
        74f64
    }
    fn along_orbit_radius() -> f64 {
        74f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Despina {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            5.224817648770225f64,
            0f64,
            0f64,
            &[
                0.012217304763960306f64,
                0f64,
                0f64,
                -0.0015707963267948964f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            0.7583455599915362f64,
            0f64,
            0f64,
            &[
                -0.00890117918517108f64,
                0f64,
                0f64,
                -0.0012217304763960308f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            5.34960869028782f64,
            18.77510290185297f64,
            0f64,
            &[
                -0.008552113334772215f64,
                0f64,
                0f64,
                0.0010471975511965976f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Galatea;
impl NaifId for Galatea {
    fn id() -> i32 {
        806i32
    }
}
impl PointMass for Galatea {
    fn gravitational_parameter() -> f64 {
        0.189898503906069f64
    }
}
impl Ellipsoid for Galatea {
    fn polar_radius() -> f64 {
        79f64
    }
    fn mean_radius() -> f64 {
        79f64
    }
}
impl TriAxial for Galatea {
    fn subplanetary_radius() -> f64 {
        79f64
    }
    fn along_orbit_radius() -> f64 {
        79f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Galatea {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            5.224817648770225f64,
            0f64,
            0f64,
            &[
                0.012217304763960306f64,
                0f64,
                0f64,
                0f64,
                -0.0012217304763960308f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            0.7579964941411373f64,
            0f64,
            0f64,
            &[
                -0.00890117918517108f64,
                0f64,
                0f64,
                0f64,
                -0.0008726646259971648f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            4.504520266472165f64,
            14.6548275586037f64,
            0f64,
            &[
                -0.008377580409572781f64,
                0f64,
                0f64,
                0f64,
                0.0008726646259971648f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Larissa;
impl NaifId for Larissa {
    fn id() -> i32 {
        807i32
    }
}
impl PointMass for Larissa {
    fn gravitational_parameter() -> f64 {
        0.2548437405693583f64
    }
}
impl Ellipsoid for Larissa {
    fn polar_radius() -> f64 {
        96f64
    }
    fn mean_radius() -> f64 {
        96f64
    }
}
impl TriAxial for Larissa {
    fn subplanetary_radius() -> f64 {
        96f64
    }
    fn along_orbit_radius() -> f64 {
        96f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Larissa {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            5.224817648770225f64,
            0f64,
            0f64,
            &[
                0.012217304763960306f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.00471238898038469f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            0.7576474282907384f64,
            0f64,
            0f64,
            &[
                -0.00890117918517108f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.003490658503988659f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            3.1312952110030268f64,
            11.328119671568512f64,
            0f64,
            &[
                -0.008377580409572781f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.0033161255787892262f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Proteus;
impl NaifId for Proteus {
    fn id() -> i32 {
        808i32
    }
}
impl PointMass for Proteus {
    fn gravitational_parameter() -> f64 {
        2.583422379120727f64
    }
}
impl Ellipsoid for Proteus {
    fn polar_radius() -> f64 {
        201f64
    }
    fn mean_radius() -> f64 {
        209f64
    }
}
impl TriAxial for Proteus {
    fn subplanetary_radius() -> f64 {
        218f64
    }
    fn along_orbit_radius() -> f64 {
        208f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Proteus {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            5.22324685244343f64,
            0f64,
            0f64,
            &[
                0.012217304763960306f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.0008726646259971648f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            0.7489207820307667f64,
            0f64,
            0f64,
            &[
                -0.00890117918517108f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -0.0006981317007977319f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            1.6297884555123048f64,
            5.598412754411688f64,
            0f64,
            &[
                -0.008377580409572781f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.0006981317007977319f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Halimede;
impl NaifId for Halimede {
    fn id() -> i32 {
        809i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Halimede {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Psamathe;
impl NaifId for Psamathe {
    fn id() -> i32 {
        810i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Psamathe {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Sao;
impl NaifId for Sao {
    fn id() -> i32 {
        811i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Sao {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Laomedeia;
impl NaifId for Laomedeia {
    fn id() -> i32 {
        812i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Laomedeia {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Neso;
impl NaifId for Neso {
    fn id() -> i32 {
        813i32
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Neso {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Charon;
impl NaifId for Charon {
    fn id() -> i32 {
        901i32
    }
}
impl PointMass for Charon {
    fn gravitational_parameter() -> f64 {
        105.8799888601881f64
    }
}
impl Ellipsoid for Charon {
    fn polar_radius() -> f64 {
        606f64
    }
    fn mean_radius() -> f64 {
        606f64
    }
}
impl TriAxial for Charon {
    fn subplanetary_radius() -> f64 {
        606f64
    }
    fn along_orbit_radius() -> f64 {
        606f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Charon {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (2.3211657321048187f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (-0.10756464180041053f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            2.1414317257344426f64,
            0.9837115923543857f64,
            0f64,
            &[] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Nix;
impl NaifId for Nix {
    fn id() -> i32 {
        902i32
    }
}
impl PointMass for Nix {
    fn gravitational_parameter() -> f64 {
        0.00304817564816976f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Nix {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Hydra;
impl NaifId for Hydra {
    fn id() -> i32 {
        903i32
    }
}
impl PointMass for Hydra {
    fn gravitational_parameter() -> f64 {
        0.003211039206155255f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Hydra {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Kerberos;
impl NaifId for Kerberos {
    fn id() -> i32 {
        904i32
    }
}
impl PointMass for Kerberos {
    fn gravitational_parameter() -> f64 {
        0.001110040850536676f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Kerberos {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Styx;
impl NaifId for Styx {
    fn id() -> i32 {
        905i32
    }
}
impl PointMass for Styx {
    fn gravitational_parameter() -> f64 {
        0f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Styx {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (0f64, 0f64, 0f64, &[] as &[f64])
    }
}
#[cfg(test)]
#[allow(clippy::approx_constant)]
mod tests {
    use super::*;
    #[test]
    fn test_naif_id_301() {
        assert_eq!(Moon::id(), 301i32)
    }
    #[test]
    fn test_point_mass_301() {
        assert_eq!(Moon::gravitational_parameter(), 4902.80011845755f64);
    }
    #[test]
    fn test_tri_axial_301() {
        assert_eq!(Moon::polar_radius(), 1737.4f64);
        assert_eq!(Moon::mean_radius(), 1737.4000000000003f64);
        assert_eq!(Moon::subplanetary_radius(), 1737.4f64);
        assert_eq!(Moon::along_orbit_radius(), 1737.4f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_301() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Moon::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_301() {
        assert_eq!(
            (
                4.712299968592838f64,
                0.000054105206811824215f64,
                0f64,
                &[
                    -0.06769608569710406f64,
                    -0.0021013764194011725f64,
                    0.0012217304763960308f64,
                    -0.0003001966313430247f64,
                    0f64,
                    0.0001256637061435917f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.00009075712110370513f64,
                    0f64,
                    0f64,
                    0.00007504915783575618f64
                ] as &[f64]
            ),
            Moon::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_301() {
        assert_eq!(
            (
                1.161328121643011f64,
                0.00022689280275926284f64,
                0f64,
                &[
                    0.02691123173650057f64,
                    0.0004171336912266448f64,
                    -0.00048520153205442357f64,
                    0.0001186823891356144f64,
                    0f64,
                    -0.00005061454830783555f64,
                    0.000015707963267948964f64,
                    0f64,
                    0f64,
                    0.000013962634015954637f64,
                    0f64,
                    0f64,
                    -0.000015707963267948964f64
                ] as &[f64]
            ),
            Moon::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_301() {
        assert_eq!(
            (
                0.668832858644503f64,
                0.22997083313948888f64,
                -0.000000000000024434609527920614f64,
                &[
                    0.06215117466351808f64,
                    0.00210835773640915f64,
                    -0.0011205013797803594f64,
                    0.0002757620218151041f64,
                    0.0004398229715025711f64,
                    -0.00011519173063162575f64,
                    -0.00008203047484373349f64,
                    -0.00008028514559173915f64,
                    0.000048869219055841225f64,
                    0.00009075712110370513f64,
                    0.00006981317007977319f64,
                    0.00003316125578789226f64,
                    -0.0000767944870877505f64
                ] as &[f64]
            ),
            Moon::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_401() {
        assert_eq!(Phobos::id(), 401i32)
    }
    #[test]
    fn test_point_mass_401() {
        assert_eq!(Phobos::gravitational_parameter(), 0.0007087546066894452f64);
    }
    #[test]
    fn test_tri_axial_401() {
        assert_eq!(Phobos::polar_radius(), 9.1f64);
        assert_eq!(Phobos::mean_radius(), 11.166666666666666f64);
        assert_eq!(Phobos::subplanetary_radius(), 13f64);
        assert_eq!(Phobos::along_orbit_radius(), 11.4f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_401() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Phobos::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_401() {
        assert_eq!(
            (
                5.544399941316208f64,
                -0.001892691938596266f64,
                0f64,
                &[
                    -0.031141630416121578f64,
                    0.00038621064567151f64,
                    -0.00017946365486924213f64,
                    -0.00008300698656022431f64
                ] as &[f64]
            ),
            Phobos::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_401() {
        assert_eq!(
            (
                0.9230395870244597f64,
                -0.0010707081834185127f64,
                0f64,
                &[
                    -0.018765175709923063f64,
                    0.00011669725164439606f64,
                    -0.00011322648989388013f64,
                    0.000049144282945955534f64
                ] as &[f64]
            ),
            Phobos::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_401() {
        assert_eq!(
            (
                0.6141419961301966f64,
                19.702057793318815f64,
                0.00000000016643698911600935f64,
                &[
                    0.02485728795564792f64,
                    -0.0003968499982587423f64,
                    0.0000716825922415843f64,
                    0.00011029852554073445f64,
                    -0.019949113350295186f64
                ] as &[f64]
            ),
            Phobos::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_402() {
        assert_eq!(Deimos::id(), 402i32)
    }
    #[test]
    fn test_point_mass_402() {
        assert_eq!(Deimos::gravitational_parameter(), 0.00009615569648120313f64);
    }
    #[test]
    fn test_tri_axial_402() {
        assert_eq!(Deimos::polar_radius(), 5.1f64);
        assert_eq!(Deimos::mean_radius(), 6.3f64);
        assert_eq!(Deimos::subplanetary_radius(), 7.8f64);
        assert_eq!(Deimos::along_orbit_radius(), 6f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_402() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Deimos::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_402() {
        assert_eq!(
            (
                5.526708263174914f64,
                -0.0018357397507085887f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.05396867424229676f64,
                    0.004010877798556321f64,
                    0.0011202666329959662f64,
                    0.00044218562371099577f64,
                    0.00013590791618817245f64
                ] as &[f64]
            ),
            Deimos::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_402() {
        assert_eq!(
            (
                0.9339242922383507f64,
                -0.0010435487658623783f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.032102888827614605f64,
                    0.002500240004017941f64,
                    0.00033360380402252296f64,
                    -0.0002587607695714273f64,
                    0.00003358537079612689f64
                ] as &[f64]
            ),
            Deimos::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_402() {
        assert_eq!(
            (
                1.3857797243489947f64,
                4.977013864082068f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.047814137677880446f64,
                    -0.006975837721323607f64,
                    -0.0011455047921115052f64,
                    -0.0005084039391304362f64,
                    0.0002965593651818685f64
                ] as &[f64]
            ),
            Deimos::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_501() {
        assert_eq!(Io::id(), 501i32)
    }
    #[test]
    fn test_point_mass_501() {
        assert_eq!(Io::gravitational_parameter(), 5959.915466180539f64);
    }
    #[test]
    fn test_tri_axial_501() {
        assert_eq!(Io::polar_radius(), 1815.7f64);
        assert_eq!(Io::mean_radius(), 1821.5f64);
        assert_eq!(Io::subplanetary_radius(), 1829.4f64);
        assert_eq!(Io::along_orbit_radius(), 1819.4f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_501() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Io::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_501() {
        assert_eq!(
            (
                4.678355059970801f64,
                -0.00015707963267948965f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0.0016406094968746698f64,
                    0.0004188790204786391f64
                ] as &[f64]
            ),
            Io::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_501() {
        assert_eq!(
            (
                1.1257373675363425f64,
                0.00005235987755982989f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0.0006981317007977319f64,
                    0.00019198621771937625f64
                ] as &[f64]
            ),
            Io::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_501() {
        assert_eq!(
            (
                3.4974652880714365f64,
                3.551552235248627f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    -0.0014835298641951802f64,
                    -0.0003839724354387525f64
                ] as &[f64]
            ),
            Io::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_502() {
        assert_eq!(Europa::id(), 502i32)
    }
    #[test]
    fn test_point_mass_502() {
        assert_eq!(Europa::gravitational_parameter(), 3202.712099607295f64);
    }
    #[test]
    fn test_tri_axial_502() {
        assert_eq!(Europa::polar_radius(), 1559.5f64);
        assert_eq!(Europa::mean_radius(), 1560.8f64);
        assert_eq!(Europa::subplanetary_radius(), 1562.6f64);
        assert_eq!(Europa::along_orbit_radius(), 1560.3f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_502() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Europa::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_502() {
        assert_eq!(
            (
                4.678878658746398f64,
                -0.00015707963267948965f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0.01895427567665842f64,
                    0.0010471975511965976f64,
                    0.0002617993877991494f64,
                    0.00015707963267948965f64
                ] as &[f64]
            ),
            Europa::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_502() {
        assert_eq!(
            (
                1.125911900461542f64,
                0.00005235987755982989f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0.008168140899333463f64,
                    0.0004537856055185257f64,
                    0.00012217304763960306f64,
                    0.00003490658503988659f64
                ] as &[f64]
            ),
            Europa::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_502() {
        assert_eq!(
            (
                0.6287025031533974f64,
                1.7693227033738699f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    -0.01710422666954443f64,
                    -0.0009424777960769379f64,
                    -0.0002443460952792061f64,
                    -0.00013962634015954637f64
                ] as &[f64]
            ),
            Europa::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_503() {
        assert_eq!(Ganymede::id(), 503i32)
    }
    #[test]
    fn test_point_mass_503() {
        assert_eq!(Ganymede::gravitational_parameter(), 9887.832752719638f64);
    }
    #[test]
    fn test_tri_axial_503() {
        assert_eq!(Ganymede::polar_radius(), 2631.2f64);
        assert_eq!(Ganymede::mean_radius(), 2631.2f64);
        assert_eq!(Ganymede::subplanetary_radius(), 2631.2f64);
        assert_eq!(Ganymede::along_orbit_radius(), 2631.2f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_503() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Ganymede::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_503() {
        assert_eq!(
            (
                4.680973053848792f64,
                -0.00015707963267948965f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    -0.0006457718232379018f64,
                    0.0075223690760955605f64,
                    0.0015882496193148398f64
                ] as &[f64]
            ),
            Ganymede::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_503() {
        assert_eq!(
            (
                1.1269590980127384f64,
                0.00005235987755982989f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    -0.00027925268031909274f64,
                    0.003246312408709453f64,
                    0.0006806784082777885f64
                ] as &[f64]
            ),
            Ganymede::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_503() {
        assert_eq!(
            (
                0.7690618815987814f64,
                0.8782079330731682f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0.0005759586531581288f64,
                    -0.006789330790257942f64,
                    -0.0014311699866353504f64
                ] as &[f64]
            ),
            Ganymede::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_504() {
        assert_eq!(Callisto::id(), 504i32)
    }
    #[test]
    fn test_point_mass_504() {
        assert_eq!(Callisto::gravitational_parameter(), 7179.283402579837f64);
    }
    #[test]
    fn test_tri_axial_504() {
        assert_eq!(Callisto::polar_radius(), 2410.3f64);
        assert_eq!(Callisto::mean_radius(), 2410.3f64);
        assert_eq!(Callisto::subplanetary_radius(), 2410.3f64);
        assert_eq!(Callisto::along_orbit_radius(), 2410.3f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_504() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Callisto::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_504() {
        assert_eq!(
            (
                4.690048765959163f64,
                -0.00015707963267948965f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.001186823891356144f64,
                    0.010297442586766544f64,
                    0f64,
                    0.00017453292519943296f64
                ] as &[f64]
            ),
            Callisto::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_504() {
        assert_eq!(
            (
                1.1314969540679238f64,
                0.00005235987755982989f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0005061454830783556f64,
                    0.004433136300065597f64,
                    0f64,
                    -0.00006981317007977319f64
                ] as &[f64]
            ),
            Callisto::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_504() {
        assert_eq!(
            (
                4.529303941850484f64,
                0.37648622085811195f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.001064650843716541f64,
                    -0.009302604913129777f64,
                    0f64,
                    -0.00015707963267948965f64
                ] as &[f64]
            ),
            Callisto::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_505() {
        assert_eq!(Amalthea::id(), 505i32)
    }
    #[test]
    fn test_point_mass_505() {
        assert_eq!(Amalthea::gravitational_parameter(), 0.1645634534798259f64);
    }
    #[test]
    fn test_tri_axial_505() {
        assert_eq!(Amalthea::polar_radius(), 64f64);
        assert_eq!(Amalthea::mean_radius(), 87.33333333333333f64);
        assert_eq!(Amalthea::subplanetary_radius(), 125f64);
        assert_eq!(Amalthea::along_orbit_radius(), 73f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_505() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Amalthea::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_505() {
        assert_eq!(
            (
                4.678355059970801f64,
                -0.00015707963267948965f64,
                0f64,
                &[
                    -0.014660765716752368f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.00017453292519943296f64,
                    0f64
                ] as &[f64]
            ),
            Amalthea::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_505() {
        assert_eq!(
            (
                1.125562834611143f64,
                0.00005235987755982989f64,
                0f64,
                &[
                    -0.006283185307179586f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Amalthea::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_505() {
        assert_eq!(
            (
                4.043404278095263f64,
                12.612298185680531f64,
                0f64,
                &[
                    0.013264502315156905f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.00017453292519943296f64,
                    0f64
                ] as &[f64]
            ),
            Amalthea::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_506() {
        assert_eq!(Himalia::id(), 506i32)
    }
    #[test]
    fn test_point_mass_506() {
        assert_eq!(Himalia::gravitational_parameter(), 0.1515524299611265f64);
    }
    #[test]
    fn test_tri_axial_506() {
        assert_eq!(Himalia::polar_radius(), 85f64);
        assert_eq!(Himalia::mean_radius(), 85f64);
        assert_eq!(Himalia::subplanetary_radius(), 85f64);
        assert_eq!(Himalia::along_orbit_radius(), 85f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_506() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Himalia::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_506() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Himalia::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_506() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Himalia::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_506() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Himalia::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_507() {
        assert_eq!(Elara::id(), 507i32)
    }
    #[test]
    fn test_tri_axial_507() {
        assert_eq!(Elara::polar_radius(), 40f64);
        assert_eq!(Elara::mean_radius(), 40f64);
        assert_eq!(Elara::subplanetary_radius(), 40f64);
        assert_eq!(Elara::along_orbit_radius(), 40f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_507() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Elara::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_507() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Elara::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_507() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Elara::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_507() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Elara::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_508() {
        assert_eq!(Pasiphae::id(), 508i32)
    }
    #[test]
    fn test_tri_axial_508() {
        assert_eq!(Pasiphae::polar_radius(), 18f64);
        assert_eq!(Pasiphae::mean_radius(), 18f64);
        assert_eq!(Pasiphae::subplanetary_radius(), 18f64);
        assert_eq!(Pasiphae::along_orbit_radius(), 18f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_508() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Pasiphae::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_508() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Pasiphae::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_508() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Pasiphae::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_508() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Pasiphae::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_509() {
        assert_eq!(Sinope::id(), 509i32)
    }
    #[test]
    fn test_tri_axial_509() {
        assert_eq!(Sinope::polar_radius(), 14f64);
        assert_eq!(Sinope::mean_radius(), 14f64);
        assert_eq!(Sinope::subplanetary_radius(), 14f64);
        assert_eq!(Sinope::along_orbit_radius(), 14f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_509() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Sinope::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_509() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sinope::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_509() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sinope::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_509() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sinope::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_510() {
        assert_eq!(Lysithea::id(), 510i32)
    }
    #[test]
    fn test_tri_axial_510() {
        assert_eq!(Lysithea::polar_radius(), 12f64);
        assert_eq!(Lysithea::mean_radius(), 12f64);
        assert_eq!(Lysithea::subplanetary_radius(), 12f64);
        assert_eq!(Lysithea::along_orbit_radius(), 12f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_510() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Lysithea::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_510() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Lysithea::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_510() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Lysithea::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_510() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Lysithea::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_511() {
        assert_eq!(Carme::id(), 511i32)
    }
    #[test]
    fn test_tri_axial_511() {
        assert_eq!(Carme::polar_radius(), 15f64);
        assert_eq!(Carme::mean_radius(), 15f64);
        assert_eq!(Carme::subplanetary_radius(), 15f64);
        assert_eq!(Carme::along_orbit_radius(), 15f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_511() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Carme::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_511() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Carme::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_511() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Carme::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_511() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Carme::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_512() {
        assert_eq!(Ananke::id(), 512i32)
    }
    #[test]
    fn test_tri_axial_512() {
        assert_eq!(Ananke::polar_radius(), 10f64);
        assert_eq!(Ananke::mean_radius(), 10f64);
        assert_eq!(Ananke::subplanetary_radius(), 10f64);
        assert_eq!(Ananke::along_orbit_radius(), 10f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_512() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Ananke::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_512() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ananke::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_512() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ananke::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_512() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ananke::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_513() {
        assert_eq!(Leda::id(), 513i32)
    }
    #[test]
    fn test_tri_axial_513() {
        assert_eq!(Leda::polar_radius(), 5f64);
        assert_eq!(Leda::mean_radius(), 5f64);
        assert_eq!(Leda::subplanetary_radius(), 5f64);
        assert_eq!(Leda::along_orbit_radius(), 5f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_513() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Leda::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_513() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Leda::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_513() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Leda::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_513() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Leda::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_514() {
        assert_eq!(Thebe::id(), 514i32)
    }
    #[test]
    fn test_point_mass_514() {
        assert_eq!(Thebe::gravitational_parameter(), 0.030148f64);
    }
    #[test]
    fn test_tri_axial_514() {
        assert_eq!(Thebe::polar_radius(), 42f64);
        assert_eq!(Thebe::mean_radius(), 49.666666666666664f64);
        assert_eq!(Thebe::subplanetary_radius(), 58f64);
        assert_eq!(Thebe::along_orbit_radius(), 49f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_514() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Thebe::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_514() {
        assert_eq!(
            (
                4.678355059970801f64,
                -0.00015707963267948965f64,
                0f64,
                &[
                    0f64,
                    -0.03682644721708035f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0006981317007977319f64
                ] as &[f64]
            ),
            Thebe::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_514() {
        assert_eq!(
            (
                1.125562834611143f64,
                0.00005235987755982989f64,
                0f64,
                &[
                    0f64,
                    -0.0158824961931484f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.00017453292519943296f64
                ] as &[f64]
            ),
            Thebe::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_514() {
        assert_eq!(
            (
                0.1494001839707146f64,
                9.31482937374367f64,
                0f64,
                &[
                    0f64,
                    0.033335788713091695f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0006981317007977319f64
                ] as &[f64]
            ),
            Thebe::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_515() {
        assert_eq!(Adrastea::id(), 515i32)
    }
    #[test]
    fn test_point_mass_515() {
        assert_eq!(Adrastea::gravitational_parameter(), 0.000139f64);
    }
    #[test]
    fn test_tri_axial_515() {
        assert_eq!(Adrastea::polar_radius(), 7f64);
        assert_eq!(Adrastea::mean_radius(), 8.333333333333334f64);
        assert_eq!(Adrastea::subplanetary_radius(), 10f64);
        assert_eq!(Adrastea::along_orbit_radius(), 8f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_515() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Adrastea::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_515() {
        assert_eq!(
            (
                4.678355059970801f64,
                -0.00015707963267948965f64,
                0f64,
                &[] as &[f64]
            ),
            Adrastea::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_515() {
        assert_eq!(
            (
                1.125562834611143f64,
                0.00005235987755982989f64,
                0f64,
                &[] as &[f64]
            ),
            Adrastea::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_515() {
        assert_eq!(
            (
                0.5810201079889122f64,
                21.066100687650238f64,
                0f64,
                &[] as &[f64]
            ),
            Adrastea::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_516() {
        assert_eq!(Metis::id(), 516i32)
    }
    #[test]
    fn test_point_mass_516() {
        assert_eq!(Metis::gravitational_parameter(), 0.002501f64);
    }
    #[test]
    fn test_tri_axial_516() {
        assert_eq!(Metis::polar_radius(), 17f64);
        assert_eq!(Metis::mean_radius(), 22.333333333333332f64);
        assert_eq!(Metis::subplanetary_radius(), 30f64);
        assert_eq!(Metis::along_orbit_radius(), 20f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_516() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Metis::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_516() {
        assert_eq!(
            (
                4.678355059970801f64,
                -0.00015707963267948965f64,
                0f64,
                &[] as &[f64]
            ),
            Metis::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_516() {
        assert_eq!(
            (
                1.125562834611143f64,
                0.00005235987755982989f64,
                0f64,
                &[] as &[f64]
            ),
            Metis::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_516() {
        assert_eq!(
            (
                6.040410008227175f64,
                21.3149160457997f64,
                0f64,
                &[] as &[f64]
            ),
            Metis::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_517() {
        assert_eq!(Callirrhoe::id(), 517i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_517() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Callirrhoe::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_517() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Callirrhoe::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_517() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Callirrhoe::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_517() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Callirrhoe::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_518() {
        assert_eq!(Themisto::id(), 518i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_518() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Themisto::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_518() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Themisto::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_518() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Themisto::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_518() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Themisto::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_519() {
        assert_eq!(Magaclite::id(), 519i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_519() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Magaclite::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_519() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Magaclite::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_519() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Magaclite::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_519() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Magaclite::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_520() {
        assert_eq!(Taygete::id(), 520i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_520() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Taygete::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_520() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Taygete::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_520() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Taygete::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_520() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Taygete::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_521() {
        assert_eq!(Chaldene::id(), 521i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_521() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Chaldene::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_521() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Chaldene::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_521() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Chaldene::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_521() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Chaldene::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_522() {
        assert_eq!(Harpalyke::id(), 522i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_522() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Harpalyke::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_522() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Harpalyke::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_522() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Harpalyke::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_522() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Harpalyke::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_523() {
        assert_eq!(Kalyke::id(), 523i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_523() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Kalyke::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_523() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kalyke::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_523() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kalyke::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_523() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kalyke::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_524() {
        assert_eq!(Iocaste::id(), 524i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_524() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Iocaste::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_524() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Iocaste::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_524() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Iocaste::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_524() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Iocaste::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_525() {
        assert_eq!(Erinome::id(), 525i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_525() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Erinome::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_525() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Erinome::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_525() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Erinome::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_525() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Erinome::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_526() {
        assert_eq!(Isonoe::id(), 526i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_526() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Isonoe::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_526() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Isonoe::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_526() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Isonoe::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_526() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Isonoe::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_527() {
        assert_eq!(Praxidike::id(), 527i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_527() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Praxidike::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_527() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Praxidike::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_527() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Praxidike::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_527() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Praxidike::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_528() {
        assert_eq!(Autonoe::id(), 528i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_528() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Autonoe::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_528() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Autonoe::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_528() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Autonoe::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_528() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Autonoe::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_529() {
        assert_eq!(Thyone::id(), 529i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_529() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Thyone::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_529() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Thyone::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_529() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Thyone::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_529() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Thyone::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_530() {
        assert_eq!(Hermippe::id(), 530i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_530() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Hermippe::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_530() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hermippe::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_530() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hermippe::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_530() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hermippe::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_531() {
        assert_eq!(Aitne::id(), 531i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_531() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Aitne::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_531() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aitne::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_531() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aitne::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_531() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aitne::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_532() {
        assert_eq!(Eurydome::id(), 532i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_532() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Eurydome::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_532() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Eurydome::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_532() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Eurydome::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_532() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Eurydome::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_533() {
        assert_eq!(Euanthe::id(), 533i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_533() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Euanthe::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_533() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Euanthe::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_533() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Euanthe::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_533() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Euanthe::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_534() {
        assert_eq!(Euporie::id(), 534i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_534() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Euporie::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_534() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Euporie::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_534() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Euporie::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_534() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Euporie::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_535() {
        assert_eq!(Orthosie::id(), 535i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_535() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Orthosie::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_535() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Orthosie::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_535() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Orthosie::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_535() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Orthosie::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_536() {
        assert_eq!(Sponde::id(), 536i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_536() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Sponde::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_536() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sponde::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_536() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sponde::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_536() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sponde::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_537() {
        assert_eq!(Kale::id(), 537i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_537() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Kale::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_537() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kale::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_537() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kale::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_537() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kale::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_538() {
        assert_eq!(Pasithee::id(), 538i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_538() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Pasithee::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_538() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Pasithee::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_538() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Pasithee::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_538() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Pasithee::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_539() {
        assert_eq!(Hegemone::id(), 539i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_539() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Hegemone::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_539() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hegemone::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_539() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hegemone::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_539() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hegemone::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_540() {
        assert_eq!(Mneme::id(), 540i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_540() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Mneme::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_540() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Mneme::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_540() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Mneme::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_540() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Mneme::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_541() {
        assert_eq!(Aoede::id(), 541i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_541() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Aoede::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_541() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aoede::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_541() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aoede::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_541() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aoede::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_542() {
        assert_eq!(Thelxinoe::id(), 542i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_542() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Thelxinoe::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_542() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Thelxinoe::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_542() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Thelxinoe::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_542() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Thelxinoe::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_543() {
        assert_eq!(Arche::id(), 543i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_543() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Arche::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_543() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Arche::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_543() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Arche::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_543() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Arche::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_544() {
        assert_eq!(Kallichore::id(), 544i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_544() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Kallichore::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_544() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kallichore::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_544() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kallichore::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_544() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kallichore::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_545() {
        assert_eq!(Helike::id(), 545i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_545() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Helike::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_545() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Helike::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_545() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Helike::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_545() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Helike::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_546() {
        assert_eq!(Carpo::id(), 546i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_546() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Carpo::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_546() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Carpo::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_546() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Carpo::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_546() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Carpo::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_547() {
        assert_eq!(Eukelade::id(), 547i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_547() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Eukelade::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_547() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Eukelade::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_547() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Eukelade::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_547() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Eukelade::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_548() {
        assert_eq!(Cyllene::id(), 548i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_548() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Cyllene::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_548() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Cyllene::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_548() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Cyllene::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_548() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Cyllene::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_549() {
        assert_eq!(Kore::id(), 549i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_549() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Kore::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_549() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kore::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_549() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kore::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_549() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kore::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_550() {
        assert_eq!(Herse::id(), 550i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_550() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Herse::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_550() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Herse::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_550() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Herse::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_550() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Herse::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_553() {
        assert_eq!(Dia::id(), 553i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_553() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Dia::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_553() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Dia::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_553() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Dia::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_553() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Dia::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_601() {
        assert_eq!(Mimas::id(), 601i32)
    }
    #[test]
    fn test_point_mass_601() {
        assert_eq!(Mimas::gravitational_parameter(), 2.503488768152587f64);
    }
    #[test]
    fn test_tri_axial_601() {
        assert_eq!(Mimas::polar_radius(), 190.6f64);
        assert_eq!(Mimas::mean_radius(), 198.36666666666667f64);
        assert_eq!(Mimas::subplanetary_radius(), 207.8f64);
        assert_eq!(Mimas::along_orbit_radius(), 196.7f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_601() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Mimas::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_601() {
        assert_eq!(
            (
                0.7096508738608943f64,
                -0.0006283185307179586f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0.2366666465704311f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Mimas::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_601() {
        assert_eq!(
            (
                1.457698991265664f64,
                -0.00006981317007977319f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    -0.026703537555513242f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Mimas::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_601() {
        assert_eq!(
            (
                5.819974923700291f64,
                6.667062709440567f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    -0.23527038316883564f64,
                    0f64,
                    -0.7827801695194568f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Mimas::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_602() {
        assert_eq!(Enceladus::id(), 602i32)
    }
    #[test]
    fn test_point_mass_602() {
        assert_eq!(Enceladus::gravitational_parameter(), 7.210366688598896f64);
    }
    #[test]
    fn test_tri_axial_602() {
        assert_eq!(Enceladus::polar_radius(), 248.3f64);
        assert_eq!(Enceladus::mean_radius(), 252.1f64);
        assert_eq!(Enceladus::subplanetary_radius(), 256.6f64);
        assert_eq!(Enceladus::along_orbit_radius(), 251.4f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_602() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Enceladus::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_602() {
        assert_eq!(
            (
                0.7096508738608943f64,
                -0.0006283185307179586f64,
                0f64,
                &[] as &[f64]
            ),
            Enceladus::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_602() {
        assert_eq!(
            (
                1.457698991265664f64,
                -0.00006981317007977319f64,
                0f64,
                &[] as &[f64]
            ),
            Enceladus::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_602() {
        assert_eq!(
            (
                0.11030480872604163f64,
                4.585536698039173f64,
                0f64,
                &[] as &[f64]
            ),
            Enceladus::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_603() {
        assert_eq!(Tethys::id(), 603i32)
    }
    #[test]
    fn test_point_mass_603() {
        assert_eq!(Tethys::gravitational_parameter(), 41.21352885489587f64);
    }
    #[test]
    fn test_tri_axial_603() {
        assert_eq!(Tethys::polar_radius(), 526.3f64);
        assert_eq!(Tethys::mean_radius(), 530.9999999999999f64);
        assert_eq!(Tethys::subplanetary_radius(), 538.4f64);
        assert_eq!(Tethys::along_orbit_radius(), 528.3f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_603() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Tethys::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_603() {
        assert_eq!(
            (
                0.7096508738608943f64,
                -0.0006283185307179586f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0.16859880574265224f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Tethys::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_603() {
        assert_eq!(
            (
                1.457698991265664f64,
                -0.00006981317007977319f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    -0.019024088846738195f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Tethys::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_603() {
        assert_eq!(
            (
                0.1562069680534925f64,
                3.328306379991881f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    -0.16755160819145562f64,
                    0.03892084231947355f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Tethys::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_604() {
        assert_eq!(Dione::id(), 604i32)
    }
    #[test]
    fn test_point_mass_604() {
        assert_eq!(Dione::gravitational_parameter(), 73.11607172482067f64);
    }
    #[test]
    fn test_tri_axial_604() {
        assert_eq!(Dione::polar_radius(), 559.6f64);
        assert_eq!(Dione::mean_radius(), 561.4333333333333f64);
        assert_eq!(Dione::subplanetary_radius(), 563.4f64);
        assert_eq!(Dione::along_orbit_radius(), 561.3f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_604() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Dione::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_604() {
        assert_eq!(
            (
                0.7096508738608943f64,
                -0.0006283185307179586f64,
                0f64,
                &[] as &[f64]
            ),
            Dione::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_604() {
        assert_eq!(
            (
                1.457698991265664f64,
                -0.00006981317007977319f64,
                0f64,
                &[] as &[f64]
            ),
            Dione::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_604() {
        assert_eq!(
            (
                6.241297405131723f64,
                2.295717637805533f64,
                0f64,
                &[] as &[f64]
            ),
            Dione::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_605() {
        assert_eq!(Rhea::id(), 605i32)
    }
    #[test]
    fn test_point_mass_605() {
        assert_eq!(Rhea::gravitational_parameter(), 153.9417519146563f64);
    }
    #[test]
    fn test_tri_axial_605() {
        assert_eq!(Rhea::polar_radius(), 762.4f64);
        assert_eq!(Rhea::mean_radius(), 763.5f64);
        assert_eq!(Rhea::subplanetary_radius(), 765f64);
        assert_eq!(Rhea::along_orbit_radius(), 763.1f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_605() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Rhea::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_605() {
        assert_eq!(
            (
                0.7047639519553103f64,
                -0.0006283185307179586f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.054105206811824215f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Rhea::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_605() {
        assert_eq!(
            (
                1.4582225900412622f64,
                -0.00006981317007977319f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.006108652381980153f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Rhea::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_605() {
        assert_eq!(
            (
                4.104316268989865f64,
                1.3908537151816638f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.05375614096142535f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Rhea::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_606() {
        assert_eq!(Titan::id(), 606i32)
    }
    #[test]
    fn test_point_mass_606() {
        assert_eq!(Titan::gravitational_parameter(), 8978.137095521046f64);
    }
    #[test]
    fn test_tri_axial_606() {
        assert_eq!(Titan::polar_radius(), 2574.47f64);
        assert_eq!(Titan::mean_radius(), 2574.7999999999997f64);
        assert_eq!(Titan::subplanetary_radius(), 2575.15f64);
        assert_eq!(Titan::along_orbit_radius(), 2574.78f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_606() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Titan::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_606() {
        assert_eq!(
            (
                0.6891031125771652f64,
                0f64,
                0f64,
                &[0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64] as &[f64]
            ),
            Titan::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_606() {
        assert_eq!(
            (
                1.456091543024577f64,
                0f64,
                0f64,
                &[0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64] as &[f64]
            ),
            Titan::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_606() {
        assert_eq!(
            (
                3.2565313114798795f64,
                0.39404258030637335f64,
                0f64,
                &[0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64] as &[f64]
            ),
            Titan::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_607() {
        assert_eq!(Hyperion::id(), 607i32)
    }
    #[test]
    fn test_point_mass_607() {
        assert_eq!(Hyperion::gravitational_parameter(), 0.3704913747932265f64);
    }
    #[test]
    fn test_tri_axial_607() {
        assert_eq!(Hyperion::polar_radius(), 102.7f64);
        assert_eq!(Hyperion::mean_radius(), 138.6f64);
        assert_eq!(Hyperion::subplanetary_radius(), 180.1f64);
        assert_eq!(Hyperion::along_orbit_radius(), 133f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_607() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Hyperion::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_607() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hyperion::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_607() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hyperion::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_607() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hyperion::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_608() {
        assert_eq!(Iapetus::id(), 608i32)
    }
    #[test]
    fn test_point_mass_608() {
        assert_eq!(Iapetus::gravitational_parameter(), 120.5151060137642f64);
    }
    #[test]
    fn test_tri_axial_608() {
        assert_eq!(Iapetus::polar_radius(), 712.1f64);
        assert_eq!(Iapetus::mean_radius(), 734.5f64);
        assert_eq!(Iapetus::subplanetary_radius(), 745.7f64);
        assert_eq!(Iapetus::along_orbit_radius(), 745.7f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_608() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Iapetus::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_608() {
        assert_eq!(
            (
                5.552939548145159f64,
                -0.06892305216125608f64,
                0f64,
                &[] as &[f64]
            ),
            Iapetus::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_608() {
        assert_eq!(
            (
                1.3095205377713455f64,
                -0.019949113350295186f64,
                0f64,
                &[] as &[f64]
            ),
            Iapetus::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_608() {
        assert_eq!(
            (
                6.199409503083858f64,
                0.07920229445458282f64,
                0f64,
                &[] as &[f64]
            ),
            Iapetus::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_609() {
        assert_eq!(Phoebe::id(), 609i32)
    }
    #[test]
    fn test_point_mass_609() {
        assert_eq!(Phoebe::gravitational_parameter(), 0.5547860052791678f64);
    }
    #[test]
    fn test_tri_axial_609() {
        assert_eq!(Phoebe::polar_radius(), 101.8f64);
        assert_eq!(Phoebe::mean_radius(), 106.56666666666666f64);
        assert_eq!(Phoebe::subplanetary_radius(), 109.4f64);
        assert_eq!(Phoebe::along_orbit_radius(), 108.5f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_609() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Phoebe::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_609() {
        assert_eq!(
            (6.229080100367762f64, 0f64, 0f64, &[] as &[f64]),
            Phoebe::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_609() {
        assert_eq!(
            (1.3578661580515883f64, 0f64, 0f64, &[] as &[f64]),
            Phoebe::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_609() {
        assert_eq!(
            (
                3.116808978211474f64,
                16.26016798998745f64,
                0f64,
                &[] as &[f64]
            ),
            Phoebe::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_610() {
        assert_eq!(Janus::id(), 610i32)
    }
    #[test]
    fn test_point_mass_610() {
        assert_eq!(Janus::gravitational_parameter(), 0.1265765099012197f64);
    }
    #[test]
    fn test_tri_axial_610() {
        assert_eq!(Janus::polar_radius(), 76.3f64);
        assert_eq!(Janus::mean_radius(), 90.33333333333333f64);
        assert_eq!(Janus::subplanetary_radius(), 101.7f64);
        assert_eq!(Janus::along_orbit_radius(), 93f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_610() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Janus::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_610() {
        assert_eq!(
            (
                0.7082546104592989f64,
                -0.0006283185307179586f64,
                0f64,
                &[
                    0f64,
                    -0.028326693759867967f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0004014257279586958f64
                ] as &[f64]
            ),
            Janus::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_610() {
        assert_eq!(
            (
                1.457698991265664f64,
                -0.00006981317007977319f64,
                0f64,
                &[
                    0f64,
                    -0.003193952531149623f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.000017453292519943296f64
                ] as &[f64]
            ),
            Janus::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_610() {
        assert_eq!(
            (
                1.0267771989482641f64,
                9.044924285944507f64,
                0f64,
                &[
                    0f64,
                    0.028152160834668535f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0004014257279586958f64
                ] as &[f64]
            ),
            Janus::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_611() {
        assert_eq!(Epimetheus::id(), 611i32)
    }
    #[test]
    fn test_point_mass_611() {
        assert_eq!(
            Epimetheus::gravitational_parameter(),
            0.03512333288208074f64
        );
    }
    #[test]
    fn test_tri_axial_611() {
        assert_eq!(Epimetheus::polar_radius(), 53f64);
        assert_eq!(Epimetheus::mean_radius(), 58.4f64);
        assert_eq!(Epimetheus::subplanetary_radius(), 64.9f64);
        assert_eq!(Epimetheus::along_orbit_radius(), 57.3f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_611() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Epimetheus::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_611() {
        assert_eq!(
            (
                0.7082546104592989f64,
                -0.0006283185307179586f64,
                0f64,
                &[
                    -0.05503023131538121f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0015009831567151233f64,
                    0f64
                ] as &[f64]
            ),
            Epimetheus::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_611() {
        assert_eq!(
            (
                1.457698991265664f64,
                -0.00006981317007977319f64,
                0f64,
                &[
                    -0.006213372137099813f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.00008726646259971648f64,
                    0f64
                ] as &[f64]
            ),
            Epimetheus::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_611() {
        assert_eq!(
            (
                5.128999072835736f64,
                9.049370273103856f64,
                0f64,
                &[
                    0.05468116546498235f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0015009831567151233f64,
                    0f64
                ] as &[f64]
            ),
            Epimetheus::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_612() {
        assert_eq!(Helene::id(), 612i32)
    }
    #[test]
    fn test_point_mass_612() {
        assert_eq!(Helene::gravitational_parameter(), 0.0004757419551776972f64);
    }
    #[test]
    fn test_tri_axial_612() {
        assert_eq!(Helene::polar_radius(), 13.3f64);
        assert_eq!(Helene::mean_radius(), 18.46666666666667f64);
        assert_eq!(Helene::subplanetary_radius(), 22.5f64);
        assert_eq!(Helene::along_orbit_radius(), 19.6f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_612() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Helene::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_612() {
        assert_eq!(
            (
                0.7129669994396837f64,
                -0.0006283185307179586f64,
                0f64,
                &[] as &[f64]
            ),
            Helene::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_612() {
        assert_eq!(
            (
                1.4545573986120743f64,
                -0.00006981317007977319f64,
                0f64,
                &[] as &[f64]
            ),
            Helene::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_612() {
        assert_eq!(
            (
                4.278151062488501f64,
                2.297157080652823f64,
                0f64,
                &[] as &[f64]
            ),
            Helene::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_613() {
        assert_eq!(Telesto::id(), 613i32)
    }
    #[test]
    fn test_tri_axial_613() {
        assert_eq!(Telesto::polar_radius(), 9.8f64);
        assert_eq!(Telesto::mean_radius(), 12.633333333333335f64);
        assert_eq!(Telesto::subplanetary_radius(), 16.3f64);
        assert_eq!(Telesto::along_orbit_radius(), 11.8f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_613() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Telesto::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_613() {
        assert_eq!(
            (
                0.8815658051823358f64,
                -0.0006283185307179586f64,
                0f64,
                &[] as &[f64]
            ),
            Telesto::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_613() {
        assert_eq!(
            (
                1.4671237692264334f64,
                -0.00006981317007977319f64,
                0f64,
                &[] as &[f64]
            ),
            Telesto::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_613() {
        assert_eq!(
            (
                0.9927432785343747f64,
                3.328306811088206f64,
                0f64,
                &[] as &[f64]
            ),
            Telesto::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_614() {
        assert_eq!(Calypso::id(), 614i32)
    }
    #[test]
    fn test_tri_axial_614() {
        assert_eq!(Calypso::polar_radius(), 6.3f64);
        assert_eq!(Calypso::mean_radius(), 10.3f64);
        assert_eq!(Calypso::subplanetary_radius(), 15.3f64);
        assert_eq!(Calypso::along_orbit_radius(), 9.3f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_614() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Calypso::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_614() {
        assert_eq!(
            (
                0.6354743806511354f64,
                -0.0006283185307179586f64,
                0f64,
                &[] as &[f64]
            ),
            Calypso::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_614() {
        assert_eq!(
            (
                1.4842279958959779f64,
                -0.00006981317007977319f64,
                0f64,
                &[] as &[f64]
            ),
            Calypso::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_614() {
        assert_eq!(
            (
                2.679254934736495f64,
                3.327893239613983f64,
                0f64,
                &[] as &[f64]
            ),
            Calypso::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_615() {
        assert_eq!(Atlas::id(), 615i32)
    }
    #[test]
    fn test_point_mass_615() {
        assert_eq!(Atlas::gravitational_parameter(), 0.0003718871247516475f64);
    }
    #[test]
    fn test_tri_axial_615() {
        assert_eq!(Atlas::polar_radius(), 9.4f64);
        assert_eq!(Atlas::mean_radius(), 15.899999999999999f64);
        assert_eq!(Atlas::subplanetary_radius(), 20.5f64);
        assert_eq!(Atlas::along_orbit_radius(), 17.8f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_615() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Atlas::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_615() {
        assert_eq!(
            (
                0.7082546104592989f64,
                -0.0006283185307179586f64,
                0f64,
                &[] as &[f64]
            ),
            Atlas::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_615() {
        assert_eq!(
            (
                1.4578735241908636f64,
                -0.00006981317007977319f64,
                0f64,
                &[] as &[f64]
            ),
            Atlas::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_615() {
        assert_eq!(
            (
                2.4064599726497815f64,
                10.442409634437194f64,
                0f64,
                &[] as &[f64]
            ),
            Atlas::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_616() {
        assert_eq!(Prometheus::id(), 616i32)
    }
    #[test]
    fn test_point_mass_616() {
        assert_eq!(Prometheus::gravitational_parameter(), 0.0107520800100761f64);
    }
    #[test]
    fn test_tri_axial_616() {
        assert_eq!(Prometheus::polar_radius(), 28.2f64);
        assert_eq!(Prometheus::mean_radius(), 46f64);
        assert_eq!(Prometheus::subplanetary_radius(), 68.2f64);
        assert_eq!(Prometheus::along_orbit_radius(), 41.6f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_616() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Prometheus::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_616() {
        assert_eq!(
            (
                0.7082546104592989f64,
                -0.0006283185307179586f64,
                0f64,
                &[] as &[f64]
            ),
            Prometheus::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_616() {
        assert_eq!(
            (
                1.4578735241908636f64,
                -0.00006981317007977319f64,
                0f64,
                &[] as &[f64]
            ),
            Prometheus::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_616() {
        assert_eq!(
            (
                5.1686180468560075f64,
                10.250126710744977f64,
                0f64,
                &[] as &[f64]
            ),
            Prometheus::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_617() {
        assert_eq!(Pandora::id(), 617i32)
    }
    #[test]
    fn test_point_mass_617() {
        assert_eq!(Pandora::gravitational_parameter(), 0.009290325122028795f64);
    }
    #[test]
    fn test_tri_axial_617() {
        assert_eq!(Pandora::polar_radius(), 31.5f64);
        assert_eq!(Pandora::mean_radius(), 41.5f64);
        assert_eq!(Pandora::subplanetary_radius(), 52.2f64);
        assert_eq!(Pandora::along_orbit_radius(), 40.8f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_617() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Pandora::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_617() {
        assert_eq!(
            (
                0.7082546104592989f64,
                -0.0006283185307179586f64,
                0f64,
                &[] as &[f64]
            ),
            Pandora::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_617() {
        assert_eq!(
            (
                1.4578735241908636f64,
                -0.00006981317007977319f64,
                0f64,
                &[] as &[f64]
            ),
            Pandora::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_617() {
        assert_eq!(
            (
                2.8434904173491615f64,
                9.997055714535051f64,
                0f64,
                &[] as &[f64]
            ),
            Pandora::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_618() {
        assert_eq!(Pan::id(), 618i32)
    }
    #[test]
    fn test_tri_axial_618() {
        assert_eq!(Pan::polar_radius(), 10.4f64);
        assert_eq!(Pan::mean_radius(), 14.333333333333334f64);
        assert_eq!(Pan::subplanetary_radius(), 17.2f64);
        assert_eq!(Pan::along_orbit_radius(), 15.4f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_618() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Pan::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_618() {
        assert_eq!(
            (
                0.7086036763096978f64,
                -0.0006283185307179586f64,
                0f64,
                &[] as &[f64]
            ),
            Pan::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_618() {
        assert_eq!(
            (
                1.457349925415265f64,
                -0.00006981317007977319f64,
                0f64,
                &[] as &[f64]
            ),
            Pan::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_618() {
        assert_eq!(
            (
                0.8517206749732328f64,
                10.92652906235538f64,
                0f64,
                &[] as &[f64]
            ),
            Pan::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_619() {
        assert_eq!(Ymir::id(), 619i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_619() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Ymir::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_619() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ymir::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_619() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ymir::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_619() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ymir::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_620() {
        assert_eq!(Paaliaq::id(), 620i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_620() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Paaliaq::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_620() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Paaliaq::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_620() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Paaliaq::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_620() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Paaliaq::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_621() {
        assert_eq!(Tarvos::id(), 621i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_621() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Tarvos::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_621() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Tarvos::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_621() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Tarvos::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_621() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Tarvos::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_622() {
        assert_eq!(Ijiraq::id(), 622i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_622() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Ijiraq::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_622() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ijiraq::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_622() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ijiraq::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_622() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ijiraq::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_623() {
        assert_eq!(Suttungr::id(), 623i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_623() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Suttungr::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_623() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Suttungr::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_623() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Suttungr::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_623() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Suttungr::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_624() {
        assert_eq!(Kiviuq::id(), 624i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_624() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Kiviuq::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_624() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kiviuq::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_624() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kiviuq::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_624() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kiviuq::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_625() {
        assert_eq!(Mundilfari::id(), 625i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_625() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Mundilfari::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_625() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Mundilfari::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_625() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Mundilfari::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_625() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Mundilfari::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_626() {
        assert_eq!(Albiorix::id(), 626i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_626() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Albiorix::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_626() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Albiorix::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_626() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Albiorix::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_626() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Albiorix::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_627() {
        assert_eq!(Skathi::id(), 627i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_627() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Skathi::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_627() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Skathi::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_627() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Skathi::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_627() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Skathi::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_628() {
        assert_eq!(Erriapus::id(), 628i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_628() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Erriapus::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_628() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Erriapus::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_628() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Erriapus::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_628() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Erriapus::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_629() {
        assert_eq!(Siarnaq::id(), 629i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_629() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Siarnaq::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_629() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Siarnaq::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_629() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Siarnaq::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_629() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Siarnaq::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_630() {
        assert_eq!(Thrymr::id(), 630i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_630() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Thrymr::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_630() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Thrymr::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_630() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Thrymr::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_630() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Thrymr::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_631() {
        assert_eq!(Narvi::id(), 631i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_631() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Narvi::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_631() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Narvi::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_631() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Narvi::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_631() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Narvi::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_632() {
        assert_eq!(Methone::id(), 632i32)
    }
    #[test]
    fn test_tri_axial_632() {
        assert_eq!(Methone::polar_radius(), 1.21f64);
        assert_eq!(Methone::mean_radius(), 1.4799999999999998f64);
        assert_eq!(Methone::subplanetary_radius(), 1.94f64);
        assert_eq!(Methone::along_orbit_radius(), 1.29f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_632() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Methone::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_632() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Methone::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_632() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Methone::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_632() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Methone::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_633() {
        assert_eq!(Pallene::id(), 633i32)
    }
    #[test]
    fn test_tri_axial_633() {
        assert_eq!(Pallene::polar_radius(), 1.8f64);
        assert_eq!(Pallene::mean_radius(), 2.2533333333333334f64);
        assert_eq!(Pallene::subplanetary_radius(), 2.88f64);
        assert_eq!(Pallene::along_orbit_radius(), 2.08f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_633() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Pallene::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_633() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Pallene::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_633() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Pallene::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_633() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Pallene::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_634() {
        assert_eq!(Polydeuces::id(), 634i32)
    }
    #[test]
    fn test_tri_axial_634() {
        assert_eq!(Polydeuces::polar_radius(), 1f64);
        assert_eq!(Polydeuces::mean_radius(), 1.2333333333333334f64);
        assert_eq!(Polydeuces::subplanetary_radius(), 1.5f64);
        assert_eq!(Polydeuces::along_orbit_radius(), 1.2f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_634() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Polydeuces::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_634() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Polydeuces::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_634() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Polydeuces::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_634() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Polydeuces::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_635() {
        assert_eq!(Daphnis::id(), 635i32)
    }
    #[test]
    fn test_tri_axial_635() {
        assert_eq!(Daphnis::polar_radius(), 2.8f64);
        assert_eq!(Daphnis::mean_radius(), 3.9666666666666663f64);
        assert_eq!(Daphnis::subplanetary_radius(), 4.6f64);
        assert_eq!(Daphnis::along_orbit_radius(), 4.5f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_635() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Daphnis::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_635() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Daphnis::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_635() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Daphnis::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_635() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Daphnis::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_636() {
        assert_eq!(Aegir::id(), 636i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_636() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Aegir::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_636() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aegir::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_636() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aegir::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_636() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aegir::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_637() {
        assert_eq!(Bebhionn::id(), 637i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_637() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Bebhionn::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_637() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Bebhionn::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_637() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Bebhionn::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_637() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Bebhionn::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_638() {
        assert_eq!(Bergelmir::id(), 638i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_638() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Bergelmir::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_638() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Bergelmir::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_638() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Bergelmir::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_638() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Bergelmir::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_639() {
        assert_eq!(Bestla::id(), 639i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_639() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Bestla::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_639() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Bestla::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_639() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Bestla::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_639() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Bestla::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_640() {
        assert_eq!(Farbauti::id(), 640i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_640() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Farbauti::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_640() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Farbauti::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_640() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Farbauti::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_640() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Farbauti::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_641() {
        assert_eq!(Fenrir::id(), 641i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_641() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Fenrir::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_641() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Fenrir::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_641() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Fenrir::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_641() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Fenrir::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_642() {
        assert_eq!(Fornjot::id(), 642i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_642() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Fornjot::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_642() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Fornjot::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_642() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Fornjot::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_642() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Fornjot::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_643() {
        assert_eq!(Hati::id(), 643i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_643() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Hati::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_643() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hati::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_643() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hati::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_643() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hati::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_644() {
        assert_eq!(Hyrrokkin::id(), 644i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_644() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Hyrrokkin::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_644() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hyrrokkin::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_644() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hyrrokkin::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_644() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hyrrokkin::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_645() {
        assert_eq!(Kari::id(), 645i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_645() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Kari::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_645() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kari::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_645() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kari::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_645() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kari::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_646() {
        assert_eq!(Loge::id(), 646i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_646() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Loge::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_646() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Loge::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_646() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Loge::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_646() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Loge::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_647() {
        assert_eq!(Skoll::id(), 647i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_647() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Skoll::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_647() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Skoll::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_647() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Skoll::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_647() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Skoll::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_648() {
        assert_eq!(Surtur::id(), 648i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_648() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Surtur::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_648() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Surtur::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_648() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Surtur::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_648() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Surtur::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_649() {
        assert_eq!(Anthe::id(), 649i32)
    }
    #[test]
    fn test_tri_axial_649() {
        assert_eq!(Anthe::polar_radius(), 0.5f64);
        assert_eq!(Anthe::mean_radius(), 0.5f64);
        assert_eq!(Anthe::subplanetary_radius(), 0.5f64);
        assert_eq!(Anthe::along_orbit_radius(), 0.5f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_649() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Anthe::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_649() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Anthe::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_649() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Anthe::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_649() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Anthe::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_650() {
        assert_eq!(Jarnsaxa::id(), 650i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_650() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Jarnsaxa::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_650() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Jarnsaxa::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_650() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Jarnsaxa::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_650() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Jarnsaxa::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_651() {
        assert_eq!(Greip::id(), 651i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_651() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Greip::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_651() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Greip::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_651() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Greip::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_651() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Greip::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_652() {
        assert_eq!(Tarqeq::id(), 652i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_652() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Tarqeq::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_652() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Tarqeq::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_652() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Tarqeq::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_652() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Tarqeq::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_653() {
        assert_eq!(Aegaeon::id(), 653i32)
    }
    #[test]
    fn test_tri_axial_653() {
        assert_eq!(Aegaeon::polar_radius(), 0.2f64);
        assert_eq!(Aegaeon::mean_radius(), 0.3833333333333333f64);
        assert_eq!(Aegaeon::subplanetary_radius(), 0.7f64);
        assert_eq!(Aegaeon::along_orbit_radius(), 0.25f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_653() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Aegaeon::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_653() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aegaeon::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_653() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aegaeon::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_653() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Aegaeon::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_701() {
        assert_eq!(Ariel::id(), 701i32)
    }
    #[test]
    fn test_point_mass_701() {
        assert_eq!(Ariel::gravitational_parameter(), 83.46344431770477f64);
    }
    #[test]
    fn test_tri_axial_701() {
        assert_eq!(Ariel::polar_radius(), 577.7f64);
        assert_eq!(Ariel::mean_radius(), 578.9f64);
        assert_eq!(Ariel::subplanetary_radius(), 581.1f64);
        assert_eq!(Ariel::along_orbit_radius(), 577.9f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_701() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Ariel::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_701() {
        assert_eq!(
            (
                4.493001093409003f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.005061454830783556f64
                ] as &[f64]
            ),
            Ariel::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_701() {
        assert_eq!(
            (
                -0.26354471705114374f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.004886921905584123f64
                ] as &[f64]
            ),
            Ariel::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_701() {
        assert_eq!(
            (
                2.7265533574655416f64,
                -2.492952697630833f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0008726646259971648f64,
                    0.0013962634015954637f64
                ] as &[f64]
            ),
            Ariel::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_702() {
        assert_eq!(Umbriel::id(), 702i32)
    }
    #[test]
    fn test_point_mass_702() {
        assert_eq!(Umbriel::gravitational_parameter(), 85.09338094489388f64);
    }
    #[test]
    fn test_tri_axial_702() {
        assert_eq!(Umbriel::polar_radius(), 584.7f64);
        assert_eq!(Umbriel::mean_radius(), 584.7f64);
        assert_eq!(Umbriel::subplanetary_radius(), 584.7f64);
        assert_eq!(Umbriel::along_orbit_radius(), 584.7f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_702() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Umbriel::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_702() {
        assert_eq!(
            (
                4.493001093409003f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.003665191429188092f64
                ] as &[f64]
            ),
            Umbriel::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_702() {
        assert_eq!(
            (
                -0.26354471705114374f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.003490658503988659f64
                ] as &[f64]
            ),
            Umbriel::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_702() {
        assert_eq!(
            (
                1.885828256779873f64,
                -1.5161481881953498f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0015707963267948964f64,
                    0f64,
                    0.0010471975511965976f64
                ] as &[f64]
            ),
            Umbriel::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_703() {
        assert_eq!(Titania::id(), 703i32)
    }
    #[test]
    fn test_point_mass_703() {
        assert_eq!(Titania::gravitational_parameter(), 226.9437003741248f64);
    }
    #[test]
    fn test_tri_axial_703() {
        assert_eq!(Titania::polar_radius(), 788.9f64);
        assert_eq!(Titania::mean_radius(), 788.9f64);
        assert_eq!(Titania::subplanetary_radius(), 788.9f64);
        assert_eq!(Titania::along_orbit_radius(), 788.9f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_703() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Titania::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_703() {
        assert_eq!(
            (
                4.493001093409003f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.005061454830783556f64
                ] as &[f64]
            ),
            Titania::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_703() {
        assert_eq!(
            (
                -0.26354471705114374f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.004886921905584123f64
                ] as &[f64]
            ),
            Titania::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_703() {
        assert_eq!(
            (
                1.3568189605003917f64,
                -0.7217186318332268f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0013962634015954637f64
                ] as &[f64]
            ),
            Titania::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_704() {
        assert_eq!(Oberon::id(), 704i32)
    }
    #[test]
    fn test_point_mass_704() {
        assert_eq!(Oberon::gravitational_parameter(), 205.3234302535623f64);
    }
    #[test]
    fn test_tri_axial_704() {
        assert_eq!(Oberon::polar_radius(), 761.4f64);
        assert_eq!(Oberon::mean_radius(), 761.4f64);
        assert_eq!(Oberon::subplanetary_radius(), 761.4f64);
        assert_eq!(Oberon::along_orbit_radius(), 761.4f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_704() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Oberon::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_704() {
        assert_eq!(
            (
                4.493001093409003f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0027925268031909274f64
                ] as &[f64]
            ),
            Oberon::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_704() {
        assert_eq!(
            (
                -0.26354471705114374f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0027925268031909274f64
                ] as &[f64]
            ),
            Oberon::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_704() {
        assert_eq!(
            (
                0.1181587903600161f64,
                -0.4666921966546346f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0006981317007977319f64
                ] as &[f64]
            ),
            Oberon::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_705() {
        assert_eq!(Miranda::id(), 705i32)
    }
    #[test]
    fn test_point_mass_705() {
        assert_eq!(Miranda::gravitational_parameter(), 4.3195168992321f64);
    }
    #[test]
    fn test_tri_axial_705() {
        assert_eq!(Miranda::polar_radius(), 232.9f64);
        assert_eq!(Miranda::mean_radius(), 235.83333333333334f64);
        assert_eq!(Miranda::subplanetary_radius(), 240.4f64);
        assert_eq!(Miranda::along_orbit_radius(), 234.2f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_705() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Miranda::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_705() {
        assert_eq!(
            (
                4.493001093409003f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.07696902001294993f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0006981317007977319f64,
                    0f64
                ] as &[f64]
            ),
            Miranda::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_705() {
        assert_eq!(
            (
                -0.2631956512007449f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.07417649320975901f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.00034906585039886593f64,
                    0f64
                ] as &[f64]
            ),
            Miranda::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_705() {
        assert_eq!(
            (
                0.5358160803622591f64,
                -4.445191100713563f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.02007128639793479f64,
                    -0.022165681500327987f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0015707963267948964f64,
                    0.002617993877991494f64
                ] as &[f64]
            ),
            Miranda::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_706() {
        assert_eq!(Cordelia::id(), 706i32)
    }
    #[test]
    fn test_tri_axial_706() {
        assert_eq!(Cordelia::polar_radius(), 13f64);
        assert_eq!(Cordelia::mean_radius(), 13f64);
        assert_eq!(Cordelia::subplanetary_radius(), 13f64);
        assert_eq!(Cordelia::along_orbit_radius(), 13f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_706() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Cordelia::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_706() {
        assert_eq!(
            (
                4.49090669830661f64,
                0f64,
                0f64,
                &[
                    -0.002617993877991494f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Cordelia::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_706() {
        assert_eq!(
            (
                -0.2649409804527392f64,
                0f64,
                0f64,
                &[
                    0.0024434609527920616f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Cordelia::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_706() {
        assert_eq!(
            (
                2.2286109218715593f64,
                -18.753921879266084f64,
                0f64,
                &[
                    -0.0006981317007977319f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Cordelia::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_707() {
        assert_eq!(Ophelia::id(), 707i32)
    }
    #[test]
    fn test_tri_axial_707() {
        assert_eq!(Ophelia::polar_radius(), 15f64);
        assert_eq!(Ophelia::mean_radius(), 15f64);
        assert_eq!(Ophelia::subplanetary_radius(), 15f64);
        assert_eq!(Ophelia::along_orbit_radius(), 15f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_707() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Ophelia::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_707() {
        assert_eq!(
            (
                4.49090669830661f64,
                0f64,
                0f64,
                &[
                    0f64,
                    -0.0015707963267948964f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Ophelia::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_707() {
        assert_eq!(
            (
                -0.2649409804527392f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0.0015707963267948964f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Ophelia::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_707() {
        assert_eq!(
            (
                2.2750366799746087f64,
                -16.692447910262292f64,
                0f64,
                &[
                    0f64,
                    -0.0005235987755982988f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Ophelia::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_708() {
        assert_eq!(Bianca::id(), 708i32)
    }
    #[test]
    fn test_tri_axial_708() {
        assert_eq!(Bianca::polar_radius(), 21f64);
        assert_eq!(Bianca::mean_radius(), 21f64);
        assert_eq!(Bianca::subplanetary_radius(), 21f64);
        assert_eq!(Bianca::along_orbit_radius(), 21f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_708() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Bianca::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_708() {
        assert_eq!(
            (
                4.49090669830661f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    -0.0027925268031909274f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Bianca::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_708() {
        assert_eq!(
            (
                -0.2649409804527392f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0.0027925268031909274f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Bianca::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_708() {
        assert_eq!(
            (
                1.8406242291532198f64,
                -14.458158751655587f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    -0.0006981317007977319f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Bianca::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_709() {
        assert_eq!(Cressida::id(), 709i32)
    }
    #[test]
    fn test_tri_axial_709() {
        assert_eq!(Cressida::polar_radius(), 31f64);
        assert_eq!(Cressida::mean_radius(), 31f64);
        assert_eq!(Cressida::subplanetary_radius(), 31f64);
        assert_eq!(Cressida::along_orbit_radius(), 31f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_709() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Cressida::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_709() {
        assert_eq!(
            (
                4.49090669830661f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    -0.0006981317007977319f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Cressida::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_709() {
        assert_eq!(
            (
                -0.2649409804527392f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0.0006981317007977319f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Cressida::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_709() {
        assert_eq!(
            (
                1.0325367854798453f64,
                -13.553906388910956f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    -0.00017453292519943296f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Cressida::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_710() {
        assert_eq!(Desdemona::id(), 710i32)
    }
    #[test]
    fn test_tri_axial_710() {
        assert_eq!(Desdemona::polar_radius(), 27f64);
        assert_eq!(Desdemona::mean_radius(), 27f64);
        assert_eq!(Desdemona::subplanetary_radius(), 27f64);
        assert_eq!(Desdemona::along_orbit_radius(), 27f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_710() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Desdemona::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_710() {
        assert_eq!(
            (
                4.49090669830661f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0029670597283903604f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Desdemona::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_710() {
        assert_eq!(
            (
                -0.2649409804527392f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0027925268031909274f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Desdemona::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_710() {
        assert_eq!(
            (
                1.6594590527962085f64,
                -13.265430289266899f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0006981317007977319f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Desdemona::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_711() {
        assert_eq!(Juliet::id(), 711i32)
    }
    #[test]
    fn test_tri_axial_711() {
        assert_eq!(Juliet::polar_radius(), 42f64);
        assert_eq!(Juliet::mean_radius(), 42f64);
        assert_eq!(Juliet::subplanetary_radius(), 42f64);
        assert_eq!(Juliet::along_orbit_radius(), 42f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_711() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Juliet::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_711() {
        assert_eq!(
            (
                4.49090669830661f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0010471975511965976f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Juliet::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_711() {
        assert_eq!(
            (
                -0.2649409804527392f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0010471975511965976f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Juliet::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_711() {
        assert_eq!(
            (
                5.2806681848340435f64,
                -12.74309158902866f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.00034906585039886593f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Juliet::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_712() {
        assert_eq!(Portia::id(), 712i32)
    }
    #[test]
    fn test_tri_axial_712() {
        assert_eq!(Portia::polar_radius(), 54f64);
        assert_eq!(Portia::mean_radius(), 54f64);
        assert_eq!(Portia::subplanetary_radius(), 54f64);
        assert_eq!(Portia::along_orbit_radius(), 54f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_712() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Portia::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_712() {
        assert_eq!(
            (
                4.49090669830661f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0015707963267948964f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Portia::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_712() {
        assert_eq!(
            (
                -0.2649409804527392f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0015707963267948964f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Portia::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_712() {
        assert_eq!(
            (
                0.4368559117741807f64,
                -12.243250601727652f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.00034906585039886593f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Portia::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_713() {
        assert_eq!(Rosalind::id(), 713i32)
    }
    #[test]
    fn test_tri_axial_713() {
        assert_eq!(Rosalind::polar_radius(), 27f64);
        assert_eq!(Rosalind::mean_radius(), 27f64);
        assert_eq!(Rosalind::subplanetary_radius(), 27f64);
        assert_eq!(Rosalind::along_orbit_radius(), 27f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_713() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Rosalind::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_713() {
        assert_eq!(
            (
                4.49090669830661f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.005061454830783556f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Rosalind::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_713() {
        assert_eq!(
            (
                -0.2649409804527392f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.004886921905584123f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Rosalind::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_713() {
        assert_eq!(
            (
                5.496041814530144f64,
                -11.250935609538423f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0013962634015954637f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Rosalind::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_714() {
        assert_eq!(Belinda::id(), 714i32)
    }
    #[test]
    fn test_tri_axial_714() {
        assert_eq!(Belinda::polar_radius(), 33f64);
        assert_eq!(Belinda::mean_radius(), 33f64);
        assert_eq!(Belinda::subplanetary_radius(), 33f64);
        assert_eq!(Belinda::along_orbit_radius(), 33f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_714() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Belinda::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_714() {
        assert_eq!(
            (
                4.49090669830661f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0005235987755982988f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Belinda::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_714() {
        assert_eq!(
            (
                -0.2649409804527392f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0005235987755982988f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Belinda::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_714() {
        assert_eq!(
            (
                5.191656392982332f64,
                -10.076882135239488f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.00017453292519943296f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Belinda::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_715() {
        assert_eq!(Puck::id(), 715i32)
    }
    #[test]
    fn test_tri_axial_715() {
        assert_eq!(Puck::polar_radius(), 77f64);
        assert_eq!(Puck::mean_radius(), 77f64);
        assert_eq!(Puck::subplanetary_radius(), 77f64);
        assert_eq!(Puck::along_orbit_radius(), 77f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_715() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Puck::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_715() {
        assert_eq!(
            (
                4.49090669830661f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.005759586531581287f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Puck::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_715() {
        assert_eq!(
            (
                -0.2649409804527392f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0054105206811824215f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Puck::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_715() {
        assert_eq!(
            (
                1.5924384095196262f64,
                -8.247467318113788f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0015707963267948964f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Puck::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_716() {
        assert_eq!(Caliban::id(), 716i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_716() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Caliban::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_716() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Caliban::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_716() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Caliban::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_716() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Caliban::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_717() {
        assert_eq!(Sycorax::id(), 717i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_717() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Sycorax::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_717() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sycorax::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_717() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sycorax::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_717() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sycorax::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_718() {
        assert_eq!(Prospero::id(), 718i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_718() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Prospero::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_718() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Prospero::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_718() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Prospero::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_718() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Prospero::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_719() {
        assert_eq!(Setebos::id(), 719i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_719() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Setebos::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_719() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Setebos::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_719() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Setebos::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_719() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Setebos::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_720() {
        assert_eq!(Stephano::id(), 720i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_720() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Stephano::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_720() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Stephano::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_720() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Stephano::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_720() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Stephano::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_721() {
        assert_eq!(Trinculo::id(), 721i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_721() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Trinculo::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_721() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Trinculo::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_721() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Trinculo::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_721() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Trinculo::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_722() {
        assert_eq!(Francisco::id(), 722i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_722() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Francisco::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_722() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Francisco::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_722() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Francisco::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_722() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Francisco::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_723() {
        assert_eq!(Margaret::id(), 723i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_723() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Margaret::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_723() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Margaret::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_723() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Margaret::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_723() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Margaret::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_724() {
        assert_eq!(Ferdinand::id(), 724i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_724() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Ferdinand::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_724() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ferdinand::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_724() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ferdinand::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_724() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Ferdinand::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_725() {
        assert_eq!(Perdita::id(), 725i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_725() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Perdita::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_725() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Perdita::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_725() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Perdita::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_725() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Perdita::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_726() {
        assert_eq!(Mab::id(), 726i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_726() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Mab::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_726() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Mab::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_726() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Mab::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_726() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Mab::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_727() {
        assert_eq!(Cupid::id(), 727i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_727() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Cupid::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_727() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Cupid::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_727() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Cupid::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_727() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Cupid::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_801() {
        assert_eq!(Triton::id(), 801i32)
    }
    #[test]
    fn test_point_mass_801() {
        assert_eq!(Triton::gravitational_parameter(), 1428.495462910464f64);
    }
    #[test]
    fn test_tri_axial_801() {
        assert_eq!(Triton::polar_radius(), 1352.6f64);
        assert_eq!(Triton::mean_radius(), 1352.6f64);
        assert_eq!(Triton::subplanetary_radius(), 1352.6f64);
        assert_eq!(Triton::along_orbit_radius(), 1352.6f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_801() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Triton::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_801() {
        assert_eq!(
            (
                5.224817648770225f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.5646140130201657f64,
                    0f64,
                    -0.1096066770252439f64,
                    -0.03630284844148206f64,
                    -0.012915436464758038f64,
                    -0.004886921905584123f64,
                    -0.0019198621771937625f64,
                    -0.0012217304763960308f64,
                    -0.00034906585039886593f64,
                    -0.00017453292519943296f64
                ] as &[f64]
            ),
            Triton::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_801() {
        assert_eq!(
            (
                0.7185520530460655f64,
                0f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.3935717463247213f64,
                    0f64,
                    0.03665191429188092f64,
                    0.009599310885968814f64,
                    0.0027925268031909274f64,
                    0.0008726646259971648f64,
                    0.00034906585039886593f64,
                    0.00017453292519943296f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Triton::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_801() {
        assert_eq!(
            (
                5.175424830938785f64,
                -1.069140942327404f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.3883357585687383f64,
                    0f64,
                    0.11746065865921838f64,
                    0.03577924966588375f64,
                    0.012915436464758038f64,
                    0.004886921905584123f64,
                    0.0019198621771937625f64,
                    0.0008726646259971648f64,
                    0.00034906585039886593f64,
                    0.00017453292519943296f64
                ] as &[f64]
            ),
            Triton::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_802() {
        assert_eq!(Nereid::id(), 802i32)
    }
    #[test]
    fn test_tri_axial_802() {
        assert_eq!(Nereid::polar_radius(), 170f64);
        assert_eq!(Nereid::mean_radius(), 170f64);
        assert_eq!(Nereid::subplanetary_radius(), 170f64);
        assert_eq!(Nereid::along_orbit_radius(), 170f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_802() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Nereid::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_802() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Nereid::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_802() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Nereid::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_802() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Nereid::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_803() {
        assert_eq!(Naiad::id(), 803i32)
    }
    #[test]
    fn test_point_mass_803() {
        assert_eq!(Naiad::gravitational_parameter(), 0.008530281246540886f64);
    }
    #[test]
    fn test_tri_axial_803() {
        assert_eq!(Naiad::polar_radius(), 29f64);
        assert_eq!(Naiad::mean_radius(), 29f64);
        assert_eq!(Naiad::subplanetary_radius(), 29f64);
        assert_eq!(Naiad::along_orbit_radius(), 29f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_803() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Naiad::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_803() {
        assert_eq!(
            (
                5.224817648770225f64,
                0f64,
                0f64,
                &[
                    0.012217304763960306f64,
                    -0.11327186845443199f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.004363323129985824f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Naiad::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_803() {
        assert_eq!(
            (
                0.7567747636647413f64,
                0f64,
                0f64,
                &[
                    -0.00890117918517108f64,
                    -0.08290313946973066f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0015707963267948964f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Naiad::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_803() {
        assert_eq!(
            (
                4.434183497616794f64,
                21.342656148360604f64,
                0f64,
                &[
                    -0.008377580409572781f64,
                    0.07679448708775051f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.00471238898038469f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Naiad::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_804() {
        assert_eq!(Thalassa::id(), 804i32)
    }
    #[test]
    fn test_point_mass_804() {
        assert_eq!(Thalassa::gravitational_parameter(), 0.0235887319799217f64);
    }
    #[test]
    fn test_tri_axial_804() {
        assert_eq!(Thalassa::polar_radius(), 40f64);
        assert_eq!(Thalassa::mean_radius(), 40f64);
        assert_eq!(Thalassa::subplanetary_radius(), 40f64);
        assert_eq!(Thalassa::along_orbit_radius(), 40f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_804() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Thalassa::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_804() {
        assert_eq!(
            (
                5.224817648770225f64,
                0f64,
                0f64,
                &[
                    0.012217304763960306f64,
                    0f64,
                    -0.004886921905584123f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Thalassa::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_804() {
        assert_eq!(
            (
                0.7583455599915362f64,
                0f64,
                0f64,
                &[
                    -0.00890117918517108f64,
                    0f64,
                    -0.003665191429188092f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Thalassa::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_804() {
        assert_eq!(
            (
                1.7812830345854127f64,
                20.171739891174827f64,
                0f64,
                &[
                    -0.008377580409572781f64,
                    0f64,
                    0.0033161255787892262f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Thalassa::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_805() {
        assert_eq!(Despina::id(), 805i32)
    }
    #[test]
    fn test_point_mass_805() {
        assert_eq!(Despina::gravitational_parameter(), 0.1167318403814998f64);
    }
    #[test]
    fn test_tri_axial_805() {
        assert_eq!(Despina::polar_radius(), 74f64);
        assert_eq!(Despina::mean_radius(), 74f64);
        assert_eq!(Despina::subplanetary_radius(), 74f64);
        assert_eq!(Despina::along_orbit_radius(), 74f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_805() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Despina::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_805() {
        assert_eq!(
            (
                5.224817648770225f64,
                0f64,
                0f64,
                &[
                    0.012217304763960306f64,
                    0f64,
                    0f64,
                    -0.0015707963267948964f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Despina::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_805() {
        assert_eq!(
            (
                0.7583455599915362f64,
                0f64,
                0f64,
                &[
                    -0.00890117918517108f64,
                    0f64,
                    0f64,
                    -0.0012217304763960308f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Despina::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_805() {
        assert_eq!(
            (
                5.34960869028782f64,
                18.77510290185297f64,
                0f64,
                &[
                    -0.008552113334772215f64,
                    0f64,
                    0f64,
                    0.0010471975511965976f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Despina::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_806() {
        assert_eq!(Galatea::id(), 806i32)
    }
    #[test]
    fn test_point_mass_806() {
        assert_eq!(Galatea::gravitational_parameter(), 0.189898503906069f64);
    }
    #[test]
    fn test_tri_axial_806() {
        assert_eq!(Galatea::polar_radius(), 79f64);
        assert_eq!(Galatea::mean_radius(), 79f64);
        assert_eq!(Galatea::subplanetary_radius(), 79f64);
        assert_eq!(Galatea::along_orbit_radius(), 79f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_806() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Galatea::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_806() {
        assert_eq!(
            (
                5.224817648770225f64,
                0f64,
                0f64,
                &[
                    0.012217304763960306f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0012217304763960308f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Galatea::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_806() {
        assert_eq!(
            (
                0.7579964941411373f64,
                0f64,
                0f64,
                &[
                    -0.00890117918517108f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0008726646259971648f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Galatea::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_806() {
        assert_eq!(
            (
                4.504520266472165f64,
                14.6548275586037f64,
                0f64,
                &[
                    -0.008377580409572781f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0008726646259971648f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Galatea::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_807() {
        assert_eq!(Larissa::id(), 807i32)
    }
    #[test]
    fn test_point_mass_807() {
        assert_eq!(Larissa::gravitational_parameter(), 0.2548437405693583f64);
    }
    #[test]
    fn test_tri_axial_807() {
        assert_eq!(Larissa::polar_radius(), 96f64);
        assert_eq!(Larissa::mean_radius(), 96f64);
        assert_eq!(Larissa::subplanetary_radius(), 96f64);
        assert_eq!(Larissa::along_orbit_radius(), 96f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_807() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Larissa::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_807() {
        assert_eq!(
            (
                5.224817648770225f64,
                0f64,
                0f64,
                &[
                    0.012217304763960306f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.00471238898038469f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Larissa::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_807() {
        assert_eq!(
            (
                0.7576474282907384f64,
                0f64,
                0f64,
                &[
                    -0.00890117918517108f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.003490658503988659f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Larissa::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_807() {
        assert_eq!(
            (
                3.1312952110030268f64,
                11.328119671568512f64,
                0f64,
                &[
                    -0.008377580409572781f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0033161255787892262f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Larissa::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_808() {
        assert_eq!(Proteus::id(), 808i32)
    }
    #[test]
    fn test_point_mass_808() {
        assert_eq!(Proteus::gravitational_parameter(), 2.583422379120727f64);
    }
    #[test]
    fn test_tri_axial_808() {
        assert_eq!(Proteus::polar_radius(), 201f64);
        assert_eq!(Proteus::mean_radius(), 209f64);
        assert_eq!(Proteus::subplanetary_radius(), 218f64);
        assert_eq!(Proteus::along_orbit_radius(), 208f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_808() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Proteus::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_808() {
        assert_eq!(
            (
                5.22324685244343f64,
                0f64,
                0f64,
                &[
                    0.012217304763960306f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0008726646259971648f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Proteus::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_808() {
        assert_eq!(
            (
                0.7489207820307667f64,
                0f64,
                0f64,
                &[
                    -0.00890117918517108f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    -0.0006981317007977319f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Proteus::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_808() {
        assert_eq!(
            (
                1.6297884555123048f64,
                5.598412754411688f64,
                0f64,
                &[
                    -0.008377580409572781f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0006981317007977319f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Proteus::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_809() {
        assert_eq!(Halimede::id(), 809i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_809() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Halimede::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_809() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Halimede::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_809() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Halimede::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_809() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Halimede::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_810() {
        assert_eq!(Psamathe::id(), 810i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_810() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Psamathe::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_810() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Psamathe::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_810() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Psamathe::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_810() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Psamathe::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_811() {
        assert_eq!(Sao::id(), 811i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_811() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Sao::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_811() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sao::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_811() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sao::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_811() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Sao::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_812() {
        assert_eq!(Laomedeia::id(), 812i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_812() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Laomedeia::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_812() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Laomedeia::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_812() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Laomedeia::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_812() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Laomedeia::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_813() {
        assert_eq!(Neso::id(), 813i32)
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_813() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Neso::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_813() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Neso::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_813() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Neso::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_813() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Neso::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_901() {
        assert_eq!(Charon::id(), 901i32)
    }
    #[test]
    fn test_point_mass_901() {
        assert_eq!(Charon::gravitational_parameter(), 105.8799888601881f64);
    }
    #[test]
    fn test_tri_axial_901() {
        assert_eq!(Charon::polar_radius(), 606f64);
        assert_eq!(Charon::mean_radius(), 606f64);
        assert_eq!(Charon::subplanetary_radius(), 606f64);
        assert_eq!(Charon::along_orbit_radius(), 606f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_901() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Charon::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_901() {
        assert_eq!(
            (2.3211657321048187f64, 0f64, 0f64, &[] as &[f64]),
            Charon::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_901() {
        assert_eq!(
            (-0.10756464180041053f64, 0f64, 0f64, &[] as &[f64]),
            Charon::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_901() {
        assert_eq!(
            (
                2.1414317257344426f64,
                0.9837115923543857f64,
                0f64,
                &[] as &[f64]
            ),
            Charon::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_902() {
        assert_eq!(Nix::id(), 902i32)
    }
    #[test]
    fn test_point_mass_902() {
        assert_eq!(Nix::gravitational_parameter(), 0.00304817564816976f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_902() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Nix::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_902() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Nix::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_902() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Nix::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_902() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Nix::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_903() {
        assert_eq!(Hydra::id(), 903i32)
    }
    #[test]
    fn test_point_mass_903() {
        assert_eq!(Hydra::gravitational_parameter(), 0.003211039206155255f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_903() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Hydra::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_903() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hydra::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_903() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hydra::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_903() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Hydra::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_904() {
        assert_eq!(Kerberos::id(), 904i32)
    }
    #[test]
    fn test_point_mass_904() {
        assert_eq!(Kerberos::gravitational_parameter(), 0.001110040850536676f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_904() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Kerberos::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_904() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kerberos::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_904() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kerberos::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_904() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Kerberos::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_905() {
        assert_eq!(Styx::id(), 905i32)
    }
    #[test]
    fn test_point_mass_905() {
        assert_eq!(Styx::gravitational_parameter(), 0f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_905() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Styx::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_905() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Styx::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_905() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Styx::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_905() {
        assert_eq!(
            (0f64, 0f64, 0f64, &[] as &[f64]),
            Styx::prime_meridian_coefficients()
        )
    }
}
