/*
 * Copyright (c) 2023. Helge Eichhorn and the LOX contributors
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

// Auto-generated by `lox_gen`. Do not edit!

use super::{
    BodyRotationalElements, BodyTrigRotationalElements, Ellipsoid, NaifId, PointMass,
    PolynomialCoefficient, TriAxial,
};
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Moon;
impl NaifId for Moon {
    fn id() -> i32 {
        301i32
    }
}
impl PointMass for Moon {
    fn gravitational_parameter() -> f64 {
        4902.80011845755f64
    }
}
impl Ellipsoid for Moon {
    fn polar_radius() -> f64 {
        1737.4f64
    }
    fn mean_radius() -> f64 {
        1737.4000000000003f64
    }
}
impl TriAxial for Moon {
    fn subplanetary_radius() -> f64 {
        1737.4f64
    }
    fn along_orbit_radius() -> f64 {
        1737.4f64
    }
}
impl BodyRotationalElements for Moon {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [269.9949f64, 0.0031f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [66.5392f64, 0.013f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [38.3213f64, 13.17635815f64, -0.0000000000014f64];
}
impl BodyTrigRotationalElements for Moon {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        -3.8787f64, -0.1204f64, 0.07f64, -0.0172f64, 0f64, 0.0072f64, 0f64, 0f64, 0f64, -0.0052f64,
        0f64, 0f64, 0.0043f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        1.5419f64, 0.0239f64, -0.0278f64, 0.0068f64, 0f64, -0.0029f64, 0.0009f64, 0f64, 0f64,
        0.0008f64, 0f64, 0f64, -0.0009f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        3.561f64, 0.1208f64, -0.0642f64, 0.0158f64, 0.0252f64, -0.0066f64, -0.0047f64, -0.0046f64,
        0.0028f64, 0.0052f64, 0.004f64, 0.0019f64, -0.0044f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Phobos;
impl NaifId for Phobos {
    fn id() -> i32 {
        401i32
    }
}
impl PointMass for Phobos {
    fn gravitational_parameter() -> f64 {
        0.0007087546066894452f64
    }
}
impl Ellipsoid for Phobos {
    fn polar_radius() -> f64 {
        9.1f64
    }
    fn mean_radius() -> f64 {
        11.166666666666666f64
    }
}
impl TriAxial for Phobos {
    fn subplanetary_radius() -> f64 {
        13f64
    }
    fn along_orbit_radius() -> f64 {
        11.4f64
    }
}
impl BodyRotationalElements for Phobos {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [317.67071657f64, -0.10844326f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [52.88627266f64, -0.06134706f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] = [
        35.1877444f64,
        1128.84475928f64,
        0.000000009536137031212154f64,
    ];
}
impl BodyTrigRotationalElements for Phobos {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        -1.78428399f64,
        0.02212824f64,
        -0.01028251f64,
        -0.00475595f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[-1.07516537f64, 0.00668626f64, -0.0064874f64, 0.00281576f64];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        1.42421769f64,
        -0.02273783f64,
        0.00410711f64,
        0.00631964f64,
        -1.143f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Deimos;
impl NaifId for Deimos {
    fn id() -> i32 {
        402i32
    }
}
impl PointMass for Deimos {
    fn gravitational_parameter() -> f64 {
        0.00009615569648120313f64
    }
}
impl Ellipsoid for Deimos {
    fn polar_radius() -> f64 {
        5.1f64
    }
    fn mean_radius() -> f64 {
        6.3f64
    }
}
impl TriAxial for Deimos {
    fn subplanetary_radius() -> f64 {
        7.8f64
    }
    fn along_orbit_radius() -> f64 {
        6f64
    }
}
impl BodyRotationalElements for Deimos {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [316.65705808f64, -0.10518014f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [53.50992033f64, -0.05979094f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [79.39932954f64, 285.16188899f64, 0f64];
}
impl BodyTrigRotationalElements for Deimos {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64,
        0f64,
        0f64,
        0f64,
        0f64,
        3.09217726f64,
        0.22980637f64,
        0.06418655f64,
        0.02533537f64,
        0.00778695f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64,
        0f64,
        0f64,
        0f64,
        0f64,
        1.83936004f64,
        0.1432532f64,
        0.01911409f64,
        -0.0148259f64,
        0.0019243f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64,
        0f64,
        0f64,
        0f64,
        0f64,
        -2.73954829f64,
        -0.39968606f64,
        -0.06563259f64,
        -0.0291294f64,
        0.0169916f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Io;
impl NaifId for Io {
    fn id() -> i32 {
        501i32
    }
}
impl PointMass for Io {
    fn gravitational_parameter() -> f64 {
        5959.915466180539f64
    }
}
impl Ellipsoid for Io {
    fn polar_radius() -> f64 {
        1815.7f64
    }
    fn mean_radius() -> f64 {
        1821.5f64
    }
}
impl TriAxial for Io {
    fn subplanetary_radius() -> f64 {
        1829.4f64
    }
    fn along_orbit_radius() -> f64 {
        1819.4f64
    }
}
impl BodyRotationalElements for Io {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [268.05f64, -0.009f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [64.5f64, 0.003f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [200.39f64, 203.4889538f64, 0f64];
}
impl BodyTrigRotationalElements for Io {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, 0.094f64, 0.024f64];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, 0.04f64, 0.011f64];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, -0.085f64, -0.022f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Europa;
impl NaifId for Europa {
    fn id() -> i32 {
        502i32
    }
}
impl PointMass for Europa {
    fn gravitational_parameter() -> f64 {
        3202.712099607295f64
    }
}
impl Ellipsoid for Europa {
    fn polar_radius() -> f64 {
        1559.5f64
    }
    fn mean_radius() -> f64 {
        1560.8f64
    }
}
impl TriAxial for Europa {
    fn subplanetary_radius() -> f64 {
        1562.6f64
    }
    fn along_orbit_radius() -> f64 {
        1560.3f64
    }
}
impl BodyRotationalElements for Europa {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [268.08f64, -0.009f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [64.51f64, 0.003f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [36.022f64, 101.3747235f64, 0f64];
}
impl BodyTrigRotationalElements for Europa {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, 0f64, 1.086f64, 0.06f64, 0.015f64, 0.009f64];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, 0f64, 0.468f64, 0.026f64, 0.007f64, 0.002f64];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, 0f64, -0.98f64, -0.054f64, -0.014f64, -0.008f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Ganymede;
impl NaifId for Ganymede {
    fn id() -> i32 {
        503i32
    }
}
impl PointMass for Ganymede {
    fn gravitational_parameter() -> f64 {
        9887.832752719638f64
    }
}
impl Ellipsoid for Ganymede {
    fn polar_radius() -> f64 {
        2631.2f64
    }
    fn mean_radius() -> f64 {
        2631.2f64
    }
}
impl TriAxial for Ganymede {
    fn subplanetary_radius() -> f64 {
        2631.2f64
    }
    fn along_orbit_radius() -> f64 {
        2631.2f64
    }
}
impl BodyRotationalElements for Ganymede {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [268.2f64, -0.009f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [64.57f64, 0.003f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [44.064f64, 50.3176081f64, 0f64];
}
impl BodyTrigRotationalElements for Ganymede {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, 0f64, -0.037f64, 0.431f64, 0.091f64];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, 0f64, -0.016f64, 0.186f64, 0.039f64];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, 0f64, 0.033f64, -0.389f64, -0.082f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Callisto;
impl NaifId for Callisto {
    fn id() -> i32 {
        504i32
    }
}
impl PointMass for Callisto {
    fn gravitational_parameter() -> f64 {
        7179.283402579837f64
    }
}
impl Ellipsoid for Callisto {
    fn polar_radius() -> f64 {
        2410.3f64
    }
    fn mean_radius() -> f64 {
        2410.3f64
    }
}
impl TriAxial for Callisto {
    fn subplanetary_radius() -> f64 {
        2410.3f64
    }
    fn along_orbit_radius() -> f64 {
        2410.3f64
    }
}
impl BodyRotationalElements for Callisto {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [268.72f64, -0.009f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [64.83f64, 0.003f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [259.51f64, 21.5710715f64, 0f64];
}
impl BodyTrigRotationalElements for Callisto {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, 0f64, 0f64, -0.068f64, 0.59f64, 0f64, 0.01f64];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, 0f64, 0f64, -0.029f64, 0.254f64, 0f64, -0.004f64];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, 0f64, 0f64, 0.061f64, -0.533f64, 0f64, -0.009f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Amalthea;
impl NaifId for Amalthea {
    fn id() -> i32 {
        505i32
    }
}
impl PointMass for Amalthea {
    fn gravitational_parameter() -> f64 {
        0.1645634534798259f64
    }
}
impl Ellipsoid for Amalthea {
    fn polar_radius() -> f64 {
        64f64
    }
    fn mean_radius() -> f64 {
        87.33333333333333f64
    }
}
impl TriAxial for Amalthea {
    fn subplanetary_radius() -> f64 {
        125f64
    }
    fn along_orbit_radius() -> f64 {
        73f64
    }
}
impl BodyRotationalElements for Amalthea {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [268.05f64, -0.009f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [64.49f64, 0.003f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [231.67f64, 722.631456f64, 0f64];
}
impl BodyTrigRotationalElements for Amalthea {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        -0.84f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.01f64, 0f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        -0.36f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0.76f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.01f64, 0f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Himalia;
impl NaifId for Himalia {
    fn id() -> i32 {
        506i32
    }
}
impl PointMass for Himalia {
    fn gravitational_parameter() -> f64 {
        0.1515524299611265f64
    }
}
impl Ellipsoid for Himalia {
    fn polar_radius() -> f64 {
        85f64
    }
    fn mean_radius() -> f64 {
        85f64
    }
}
impl TriAxial for Himalia {
    fn subplanetary_radius() -> f64 {
        85f64
    }
    fn along_orbit_radius() -> f64 {
        85f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Elara;
impl NaifId for Elara {
    fn id() -> i32 {
        507i32
    }
}
impl Ellipsoid for Elara {
    fn polar_radius() -> f64 {
        40f64
    }
    fn mean_radius() -> f64 {
        40f64
    }
}
impl TriAxial for Elara {
    fn subplanetary_radius() -> f64 {
        40f64
    }
    fn along_orbit_radius() -> f64 {
        40f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Pasiphae;
impl NaifId for Pasiphae {
    fn id() -> i32 {
        508i32
    }
}
impl Ellipsoid for Pasiphae {
    fn polar_radius() -> f64 {
        18f64
    }
    fn mean_radius() -> f64 {
        18f64
    }
}
impl TriAxial for Pasiphae {
    fn subplanetary_radius() -> f64 {
        18f64
    }
    fn along_orbit_radius() -> f64 {
        18f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Sinope;
impl NaifId for Sinope {
    fn id() -> i32 {
        509i32
    }
}
impl Ellipsoid for Sinope {
    fn polar_radius() -> f64 {
        14f64
    }
    fn mean_radius() -> f64 {
        14f64
    }
}
impl TriAxial for Sinope {
    fn subplanetary_radius() -> f64 {
        14f64
    }
    fn along_orbit_radius() -> f64 {
        14f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Lysithea;
impl NaifId for Lysithea {
    fn id() -> i32 {
        510i32
    }
}
impl Ellipsoid for Lysithea {
    fn polar_radius() -> f64 {
        12f64
    }
    fn mean_radius() -> f64 {
        12f64
    }
}
impl TriAxial for Lysithea {
    fn subplanetary_radius() -> f64 {
        12f64
    }
    fn along_orbit_radius() -> f64 {
        12f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Carme;
impl NaifId for Carme {
    fn id() -> i32 {
        511i32
    }
}
impl Ellipsoid for Carme {
    fn polar_radius() -> f64 {
        15f64
    }
    fn mean_radius() -> f64 {
        15f64
    }
}
impl TriAxial for Carme {
    fn subplanetary_radius() -> f64 {
        15f64
    }
    fn along_orbit_radius() -> f64 {
        15f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Ananke;
impl NaifId for Ananke {
    fn id() -> i32 {
        512i32
    }
}
impl Ellipsoid for Ananke {
    fn polar_radius() -> f64 {
        10f64
    }
    fn mean_radius() -> f64 {
        10f64
    }
}
impl TriAxial for Ananke {
    fn subplanetary_radius() -> f64 {
        10f64
    }
    fn along_orbit_radius() -> f64 {
        10f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Leda;
impl NaifId for Leda {
    fn id() -> i32 {
        513i32
    }
}
impl Ellipsoid for Leda {
    fn polar_radius() -> f64 {
        5f64
    }
    fn mean_radius() -> f64 {
        5f64
    }
}
impl TriAxial for Leda {
    fn subplanetary_radius() -> f64 {
        5f64
    }
    fn along_orbit_radius() -> f64 {
        5f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Thebe;
impl NaifId for Thebe {
    fn id() -> i32 {
        514i32
    }
}
impl PointMass for Thebe {
    fn gravitational_parameter() -> f64 {
        0.030148f64
    }
}
impl Ellipsoid for Thebe {
    fn polar_radius() -> f64 {
        42f64
    }
    fn mean_radius() -> f64 {
        49.666666666666664f64
    }
}
impl TriAxial for Thebe {
    fn subplanetary_radius() -> f64 {
        58f64
    }
    fn along_orbit_radius() -> f64 {
        49f64
    }
}
impl BodyRotationalElements for Thebe {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [268.05f64, -0.009f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [64.49f64, 0.003f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] = [8.56f64, 533.70041f64, 0f64];
}
impl BodyTrigRotationalElements for Thebe {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, -2.11f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.04f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, -0.91f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.01f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 1.91f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.04f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Adrastea;
impl NaifId for Adrastea {
    fn id() -> i32 {
        515i32
    }
}
impl PointMass for Adrastea {
    fn gravitational_parameter() -> f64 {
        0.000139f64
    }
}
impl Ellipsoid for Adrastea {
    fn polar_radius() -> f64 {
        7f64
    }
    fn mean_radius() -> f64 {
        8.333333333333334f64
    }
}
impl TriAxial for Adrastea {
    fn subplanetary_radius() -> f64 {
        10f64
    }
    fn along_orbit_radius() -> f64 {
        8f64
    }
}
impl BodyRotationalElements for Adrastea {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [268.05f64, -0.009f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [64.49f64, 0.003f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [33.29f64, 1206.9986602f64, 0f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Metis;
impl NaifId for Metis {
    fn id() -> i32 {
        516i32
    }
}
impl PointMass for Metis {
    fn gravitational_parameter() -> f64 {
        0.002501f64
    }
}
impl Ellipsoid for Metis {
    fn polar_radius() -> f64 {
        17f64
    }
    fn mean_radius() -> f64 {
        22.333333333333332f64
    }
}
impl TriAxial for Metis {
    fn subplanetary_radius() -> f64 {
        30f64
    }
    fn along_orbit_radius() -> f64 {
        20f64
    }
}
impl BodyRotationalElements for Metis {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [268.05f64, -0.009f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [64.49f64, 0.003f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [346.09f64, 1221.2547301f64, 0f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Callirrhoe;
impl NaifId for Callirrhoe {
    fn id() -> i32 {
        517i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Themisto;
impl NaifId for Themisto {
    fn id() -> i32 {
        518i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Magaclite;
impl NaifId for Magaclite {
    fn id() -> i32 {
        519i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Taygete;
impl NaifId for Taygete {
    fn id() -> i32 {
        520i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Chaldene;
impl NaifId for Chaldene {
    fn id() -> i32 {
        521i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Harpalyke;
impl NaifId for Harpalyke {
    fn id() -> i32 {
        522i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Kalyke;
impl NaifId for Kalyke {
    fn id() -> i32 {
        523i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Iocaste;
impl NaifId for Iocaste {
    fn id() -> i32 {
        524i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Erinome;
impl NaifId for Erinome {
    fn id() -> i32 {
        525i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Isonoe;
impl NaifId for Isonoe {
    fn id() -> i32 {
        526i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Praxidike;
impl NaifId for Praxidike {
    fn id() -> i32 {
        527i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Autonoe;
impl NaifId for Autonoe {
    fn id() -> i32 {
        528i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Thyone;
impl NaifId for Thyone {
    fn id() -> i32 {
        529i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Hermippe;
impl NaifId for Hermippe {
    fn id() -> i32 {
        530i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Aitne;
impl NaifId for Aitne {
    fn id() -> i32 {
        531i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Eurydome;
impl NaifId for Eurydome {
    fn id() -> i32 {
        532i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Euanthe;
impl NaifId for Euanthe {
    fn id() -> i32 {
        533i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Euporie;
impl NaifId for Euporie {
    fn id() -> i32 {
        534i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Orthosie;
impl NaifId for Orthosie {
    fn id() -> i32 {
        535i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Sponde;
impl NaifId for Sponde {
    fn id() -> i32 {
        536i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Kale;
impl NaifId for Kale {
    fn id() -> i32 {
        537i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Pasithee;
impl NaifId for Pasithee {
    fn id() -> i32 {
        538i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Hegemone;
impl NaifId for Hegemone {
    fn id() -> i32 {
        539i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Mneme;
impl NaifId for Mneme {
    fn id() -> i32 {
        540i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Aoede;
impl NaifId for Aoede {
    fn id() -> i32 {
        541i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Thelxinoe;
impl NaifId for Thelxinoe {
    fn id() -> i32 {
        542i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Arche;
impl NaifId for Arche {
    fn id() -> i32 {
        543i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Kallichore;
impl NaifId for Kallichore {
    fn id() -> i32 {
        544i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Helike;
impl NaifId for Helike {
    fn id() -> i32 {
        545i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Carpo;
impl NaifId for Carpo {
    fn id() -> i32 {
        546i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Eukelade;
impl NaifId for Eukelade {
    fn id() -> i32 {
        547i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Cyllene;
impl NaifId for Cyllene {
    fn id() -> i32 {
        548i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Kore;
impl NaifId for Kore {
    fn id() -> i32 {
        549i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Herse;
impl NaifId for Herse {
    fn id() -> i32 {
        550i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Dia;
impl NaifId for Dia {
    fn id() -> i32 {
        553i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Mimas;
impl NaifId for Mimas {
    fn id() -> i32 {
        601i32
    }
}
impl PointMass for Mimas {
    fn gravitational_parameter() -> f64 {
        2.503488768152587f64
    }
}
impl Ellipsoid for Mimas {
    fn polar_radius() -> f64 {
        190.6f64
    }
    fn mean_radius() -> f64 {
        198.36666666666667f64
    }
}
impl TriAxial for Mimas {
    fn subplanetary_radius() -> f64 {
        207.8f64
    }
    fn along_orbit_radius() -> f64 {
        196.7f64
    }
}
impl BodyRotationalElements for Mimas {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [40.66f64, -0.036f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [83.52f64, -0.004f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [333.46f64, 381.994555f64, 0f64];
}
impl BodyTrigRotationalElements for Mimas {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, 13.56f64, 0f64, 0f64, 0f64, 0f64, 0f64];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, -1.53f64, 0f64, 0f64, 0f64, 0f64, 0f64];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, -13.48f64, 0f64, -44.85f64, 0f64, 0f64, 0f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Enceladus;
impl NaifId for Enceladus {
    fn id() -> i32 {
        602i32
    }
}
impl PointMass for Enceladus {
    fn gravitational_parameter() -> f64 {
        7.210366688598896f64
    }
}
impl Ellipsoid for Enceladus {
    fn polar_radius() -> f64 {
        248.3f64
    }
    fn mean_radius() -> f64 {
        252.1f64
    }
}
impl TriAxial for Enceladus {
    fn subplanetary_radius() -> f64 {
        256.6f64
    }
    fn along_orbit_radius() -> f64 {
        251.4f64
    }
}
impl BodyRotationalElements for Enceladus {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [40.66f64, -0.036f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [83.52f64, -0.004f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] = [6.32f64, 262.7318996f64, 0f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Tethys;
impl NaifId for Tethys {
    fn id() -> i32 {
        603i32
    }
}
impl PointMass for Tethys {
    fn gravitational_parameter() -> f64 {
        41.21352885489587f64
    }
}
impl Ellipsoid for Tethys {
    fn polar_radius() -> f64 {
        526.3f64
    }
    fn mean_radius() -> f64 {
        530.9999999999999f64
    }
}
impl TriAxial for Tethys {
    fn subplanetary_radius() -> f64 {
        538.4f64
    }
    fn along_orbit_radius() -> f64 {
        528.3f64
    }
}
impl BodyRotationalElements for Tethys {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [40.66f64, -0.036f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [83.52f64, -0.004f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] = [8.95f64, 190.6979085f64, 0f64];
}
impl BodyTrigRotationalElements for Tethys {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, 0f64, 9.66f64, 0f64, 0f64, 0f64, 0f64];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, 0f64, -1.09f64, 0f64, 0f64, 0f64, 0f64];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, 0f64, -9.6f64, 2.23f64, 0f64, 0f64, 0f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Dione;
impl NaifId for Dione {
    fn id() -> i32 {
        604i32
    }
}
impl PointMass for Dione {
    fn gravitational_parameter() -> f64 {
        73.11607172482067f64
    }
}
impl Ellipsoid for Dione {
    fn polar_radius() -> f64 {
        559.6f64
    }
    fn mean_radius() -> f64 {
        561.4333333333333f64
    }
}
impl TriAxial for Dione {
    fn subplanetary_radius() -> f64 {
        563.4f64
    }
    fn along_orbit_radius() -> f64 {
        561.3f64
    }
}
impl BodyRotationalElements for Dione {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [40.66f64, -0.036f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [83.52f64, -0.004f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [357.6f64, 131.5349316f64, 0f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Rhea;
impl NaifId for Rhea {
    fn id() -> i32 {
        605i32
    }
}
impl PointMass for Rhea {
    fn gravitational_parameter() -> f64 {
        153.9417519146563f64
    }
}
impl Ellipsoid for Rhea {
    fn polar_radius() -> f64 {
        762.4f64
    }
    fn mean_radius() -> f64 {
        763.5f64
    }
}
impl TriAxial for Rhea {
    fn subplanetary_radius() -> f64 {
        765f64
    }
    fn along_orbit_radius() -> f64 {
        763.1f64
    }
}
impl BodyRotationalElements for Rhea {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [40.38f64, -0.036f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [83.55f64, -0.004f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [235.16f64, 79.6900478f64, 0f64];
}
impl BodyTrigRotationalElements for Rhea {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, 0f64, 0f64, 0f64, 3.1f64, 0f64, 0f64];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, 0f64, 0f64, 0f64, -0.35f64, 0f64, 0f64];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, 0f64, 0f64, 0f64, -3.08f64, 0f64, 0f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Titan;
impl NaifId for Titan {
    fn id() -> i32 {
        606i32
    }
}
impl PointMass for Titan {
    fn gravitational_parameter() -> f64 {
        8978.137095521046f64
    }
}
impl Ellipsoid for Titan {
    fn polar_radius() -> f64 {
        2574.47f64
    }
    fn mean_radius() -> f64 {
        2574.7999999999997f64
    }
}
impl TriAxial for Titan {
    fn subplanetary_radius() -> f64 {
        2575.15f64
    }
    fn along_orbit_radius() -> f64 {
        2574.78f64
    }
}
impl BodyRotationalElements for Titan {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [39.4827f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [83.4279f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [186.5855f64, 22.5769768f64, 0f64];
}
impl BodyTrigRotationalElements for Titan {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Hyperion;
impl NaifId for Hyperion {
    fn id() -> i32 {
        607i32
    }
}
impl PointMass for Hyperion {
    fn gravitational_parameter() -> f64 {
        0.3704913747932265f64
    }
}
impl Ellipsoid for Hyperion {
    fn polar_radius() -> f64 {
        102.7f64
    }
    fn mean_radius() -> f64 {
        138.6f64
    }
}
impl TriAxial for Hyperion {
    fn subplanetary_radius() -> f64 {
        180.1f64
    }
    fn along_orbit_radius() -> f64 {
        133f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Iapetus;
impl NaifId for Iapetus {
    fn id() -> i32 {
        608i32
    }
}
impl PointMass for Iapetus {
    fn gravitational_parameter() -> f64 {
        120.5151060137642f64
    }
}
impl Ellipsoid for Iapetus {
    fn polar_radius() -> f64 {
        712.1f64
    }
    fn mean_radius() -> f64 {
        734.5f64
    }
}
impl TriAxial for Iapetus {
    fn subplanetary_radius() -> f64 {
        745.7f64
    }
    fn along_orbit_radius() -> f64 {
        745.7f64
    }
}
impl BodyRotationalElements for Iapetus {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [318.16f64, -3.949f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [75.03f64, -1.143f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] = [355.2f64, 4.5379572f64, 0f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Phoebe;
impl NaifId for Phoebe {
    fn id() -> i32 {
        609i32
    }
}
impl PointMass for Phoebe {
    fn gravitational_parameter() -> f64 {
        0.5547860052791678f64
    }
}
impl Ellipsoid for Phoebe {
    fn polar_radius() -> f64 {
        101.8f64
    }
    fn mean_radius() -> f64 {
        106.56666666666666f64
    }
}
impl TriAxial for Phoebe {
    fn subplanetary_radius() -> f64 {
        109.4f64
    }
    fn along_orbit_radius() -> f64 {
        108.5f64
    }
}
impl BodyRotationalElements for Phoebe {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [356.9f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [77.8f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] = [178.58f64, 931.639f64, 0f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Janus;
impl NaifId for Janus {
    fn id() -> i32 {
        610i32
    }
}
impl PointMass for Janus {
    fn gravitational_parameter() -> f64 {
        0.1265765099012197f64
    }
}
impl Ellipsoid for Janus {
    fn polar_radius() -> f64 {
        76.3f64
    }
    fn mean_radius() -> f64 {
        90.33333333333333f64
    }
}
impl TriAxial for Janus {
    fn subplanetary_radius() -> f64 {
        101.7f64
    }
    fn along_orbit_radius() -> f64 {
        93f64
    }
}
impl BodyRotationalElements for Janus {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [40.58f64, -0.036f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [83.52f64, -0.004f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [58.83f64, 518.2359876f64, 0f64];
}
impl BodyTrigRotationalElements for Janus {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, -1.623f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.023f64];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, -0.183f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.001f64];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[0f64, 1.613f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.023f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Epimetheus;
impl NaifId for Epimetheus {
    fn id() -> i32 {
        611i32
    }
}
impl PointMass for Epimetheus {
    fn gravitational_parameter() -> f64 {
        0.03512333288208074f64
    }
}
impl Ellipsoid for Epimetheus {
    fn polar_radius() -> f64 {
        53f64
    }
    fn mean_radius() -> f64 {
        58.4f64
    }
}
impl TriAxial for Epimetheus {
    fn subplanetary_radius() -> f64 {
        64.9f64
    }
    fn along_orbit_radius() -> f64 {
        57.3f64
    }
}
impl BodyRotationalElements for Epimetheus {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [40.58f64, -0.036f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [83.52f64, -0.004f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [293.87f64, 518.4907239f64, 0f64];
}
impl BodyTrigRotationalElements for Epimetheus {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[-3.153f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.086f64, 0f64];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[-0.356f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.005f64, 0f64];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] =
        &[3.133f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.086f64, 0f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Helene;
impl NaifId for Helene {
    fn id() -> i32 {
        612i32
    }
}
impl PointMass for Helene {
    fn gravitational_parameter() -> f64 {
        0.0004757419551776972f64
    }
}
impl Ellipsoid for Helene {
    fn polar_radius() -> f64 {
        13.3f64
    }
    fn mean_radius() -> f64 {
        18.46666666666667f64
    }
}
impl TriAxial for Helene {
    fn subplanetary_radius() -> f64 {
        22.5f64
    }
    fn along_orbit_radius() -> f64 {
        19.6f64
    }
}
impl BodyRotationalElements for Helene {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [40.85f64, -0.036f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [83.34f64, -0.004f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [245.12f64, 131.6174056f64, 0f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Telesto;
impl NaifId for Telesto {
    fn id() -> i32 {
        613i32
    }
}
impl Ellipsoid for Telesto {
    fn polar_radius() -> f64 {
        9.8f64
    }
    fn mean_radius() -> f64 {
        12.633333333333335f64
    }
}
impl TriAxial for Telesto {
    fn subplanetary_radius() -> f64 {
        16.3f64
    }
    fn along_orbit_radius() -> f64 {
        11.8f64
    }
}
impl BodyRotationalElements for Telesto {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [50.51f64, -0.036f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [84.06f64, -0.004f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [56.88f64, 190.6979332f64, 0f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Calypso;
impl NaifId for Calypso {
    fn id() -> i32 {
        614i32
    }
}
impl Ellipsoid for Calypso {
    fn polar_radius() -> f64 {
        6.3f64
    }
    fn mean_radius() -> f64 {
        10.3f64
    }
}
impl TriAxial for Calypso {
    fn subplanetary_radius() -> f64 {
        15.3f64
    }
    fn along_orbit_radius() -> f64 {
        9.3f64
    }
}
impl BodyRotationalElements for Calypso {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [36.41f64, -0.036f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [85.04f64, -0.004f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [153.51f64, 190.6742373f64, 0f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Atlas;
impl NaifId for Atlas {
    fn id() -> i32 {
        615i32
    }
}
impl PointMass for Atlas {
    fn gravitational_parameter() -> f64 {
        0.0003718871247516475f64
    }
}
impl Ellipsoid for Atlas {
    fn polar_radius() -> f64 {
        9.4f64
    }
    fn mean_radius() -> f64 {
        15.899999999999999f64
    }
}
impl TriAxial for Atlas {
    fn subplanetary_radius() -> f64 {
        20.5f64
    }
    fn along_orbit_radius() -> f64 {
        17.8f64
    }
}
impl BodyRotationalElements for Atlas {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [40.58f64, -0.036f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [83.53f64, -0.004f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] = [137.88f64, 598.306f64, 0f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Prometheus;
impl NaifId for Prometheus {
    fn id() -> i32 {
        616i32
    }
}
impl PointMass for Prometheus {
    fn gravitational_parameter() -> f64 {
        0.0107520800100761f64
    }
}
impl Ellipsoid for Prometheus {
    fn polar_radius() -> f64 {
        28.2f64
    }
    fn mean_radius() -> f64 {
        46f64
    }
}
impl TriAxial for Prometheus {
    fn subplanetary_radius() -> f64 {
        68.2f64
    }
    fn along_orbit_radius() -> f64 {
        41.6f64
    }
}
impl BodyRotationalElements for Prometheus {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [40.58f64, -0.036f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [83.53f64, -0.004f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] = [296.14f64, 587.289f64, 0f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Pandora;
impl NaifId for Pandora {
    fn id() -> i32 {
        617i32
    }
}
impl PointMass for Pandora {
    fn gravitational_parameter() -> f64 {
        0.009290325122028795f64
    }
}
impl Ellipsoid for Pandora {
    fn polar_radius() -> f64 {
        31.5f64
    }
    fn mean_radius() -> f64 {
        41.5f64
    }
}
impl TriAxial for Pandora {
    fn subplanetary_radius() -> f64 {
        52.2f64
    }
    fn along_orbit_radius() -> f64 {
        40.8f64
    }
}
impl BodyRotationalElements for Pandora {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [40.58f64, -0.036f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [83.53f64, -0.004f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] = [162.92f64, 572.7891f64, 0f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Pan;
impl NaifId for Pan {
    fn id() -> i32 {
        618i32
    }
}
impl Ellipsoid for Pan {
    fn polar_radius() -> f64 {
        10.4f64
    }
    fn mean_radius() -> f64 {
        14.333333333333334f64
    }
}
impl TriAxial for Pan {
    fn subplanetary_radius() -> f64 {
        17.2f64
    }
    fn along_orbit_radius() -> f64 {
        15.4f64
    }
}
impl BodyRotationalElements for Pan {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [40.6f64, -0.036f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [83.5f64, -0.004f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] = [48.8f64, 626.044f64, 0f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Ymir;
impl NaifId for Ymir {
    fn id() -> i32 {
        619i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Paaliaq;
impl NaifId for Paaliaq {
    fn id() -> i32 {
        620i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Tarvos;
impl NaifId for Tarvos {
    fn id() -> i32 {
        621i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Ijiraq;
impl NaifId for Ijiraq {
    fn id() -> i32 {
        622i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Suttungr;
impl NaifId for Suttungr {
    fn id() -> i32 {
        623i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Kiviuq;
impl NaifId for Kiviuq {
    fn id() -> i32 {
        624i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Mundilfari;
impl NaifId for Mundilfari {
    fn id() -> i32 {
        625i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Albiorix;
impl NaifId for Albiorix {
    fn id() -> i32 {
        626i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Skathi;
impl NaifId for Skathi {
    fn id() -> i32 {
        627i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Erriapus;
impl NaifId for Erriapus {
    fn id() -> i32 {
        628i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Siarnaq;
impl NaifId for Siarnaq {
    fn id() -> i32 {
        629i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Thrymr;
impl NaifId for Thrymr {
    fn id() -> i32 {
        630i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Narvi;
impl NaifId for Narvi {
    fn id() -> i32 {
        631i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Methone;
impl NaifId for Methone {
    fn id() -> i32 {
        632i32
    }
}
impl Ellipsoid for Methone {
    fn polar_radius() -> f64 {
        1.21f64
    }
    fn mean_radius() -> f64 {
        1.4799999999999998f64
    }
}
impl TriAxial for Methone {
    fn subplanetary_radius() -> f64 {
        1.94f64
    }
    fn along_orbit_radius() -> f64 {
        1.29f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Pallene;
impl NaifId for Pallene {
    fn id() -> i32 {
        633i32
    }
}
impl Ellipsoid for Pallene {
    fn polar_radius() -> f64 {
        1.8f64
    }
    fn mean_radius() -> f64 {
        2.2533333333333334f64
    }
}
impl TriAxial for Pallene {
    fn subplanetary_radius() -> f64 {
        2.88f64
    }
    fn along_orbit_radius() -> f64 {
        2.08f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Polydeuces;
impl NaifId for Polydeuces {
    fn id() -> i32 {
        634i32
    }
}
impl Ellipsoid for Polydeuces {
    fn polar_radius() -> f64 {
        1f64
    }
    fn mean_radius() -> f64 {
        1.2333333333333334f64
    }
}
impl TriAxial for Polydeuces {
    fn subplanetary_radius() -> f64 {
        1.5f64
    }
    fn along_orbit_radius() -> f64 {
        1.2f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Daphnis;
impl NaifId for Daphnis {
    fn id() -> i32 {
        635i32
    }
}
impl Ellipsoid for Daphnis {
    fn polar_radius() -> f64 {
        2.8f64
    }
    fn mean_radius() -> f64 {
        3.9666666666666663f64
    }
}
impl TriAxial for Daphnis {
    fn subplanetary_radius() -> f64 {
        4.6f64
    }
    fn along_orbit_radius() -> f64 {
        4.5f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Aegir;
impl NaifId for Aegir {
    fn id() -> i32 {
        636i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Bebhionn;
impl NaifId for Bebhionn {
    fn id() -> i32 {
        637i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Bergelmir;
impl NaifId for Bergelmir {
    fn id() -> i32 {
        638i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Bestla;
impl NaifId for Bestla {
    fn id() -> i32 {
        639i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Farbauti;
impl NaifId for Farbauti {
    fn id() -> i32 {
        640i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Fenrir;
impl NaifId for Fenrir {
    fn id() -> i32 {
        641i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Fornjot;
impl NaifId for Fornjot {
    fn id() -> i32 {
        642i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Hati;
impl NaifId for Hati {
    fn id() -> i32 {
        643i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Hyrrokkin;
impl NaifId for Hyrrokkin {
    fn id() -> i32 {
        644i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Kari;
impl NaifId for Kari {
    fn id() -> i32 {
        645i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Loge;
impl NaifId for Loge {
    fn id() -> i32 {
        646i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Skoll;
impl NaifId for Skoll {
    fn id() -> i32 {
        647i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Surtur;
impl NaifId for Surtur {
    fn id() -> i32 {
        648i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Anthe;
impl NaifId for Anthe {
    fn id() -> i32 {
        649i32
    }
}
impl Ellipsoid for Anthe {
    fn polar_radius() -> f64 {
        0.5f64
    }
    fn mean_radius() -> f64 {
        0.5f64
    }
}
impl TriAxial for Anthe {
    fn subplanetary_radius() -> f64 {
        0.5f64
    }
    fn along_orbit_radius() -> f64 {
        0.5f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Jarnsaxa;
impl NaifId for Jarnsaxa {
    fn id() -> i32 {
        650i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Greip;
impl NaifId for Greip {
    fn id() -> i32 {
        651i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Tarqeq;
impl NaifId for Tarqeq {
    fn id() -> i32 {
        652i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Aegaeon;
impl NaifId for Aegaeon {
    fn id() -> i32 {
        653i32
    }
}
impl Ellipsoid for Aegaeon {
    fn polar_radius() -> f64 {
        0.2f64
    }
    fn mean_radius() -> f64 {
        0.3833333333333333f64
    }
}
impl TriAxial for Aegaeon {
    fn subplanetary_radius() -> f64 {
        0.7f64
    }
    fn along_orbit_radius() -> f64 {
        0.25f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Ariel;
impl NaifId for Ariel {
    fn id() -> i32 {
        701i32
    }
}
impl PointMass for Ariel {
    fn gravitational_parameter() -> f64 {
        83.46344431770477f64
    }
}
impl Ellipsoid for Ariel {
    fn polar_radius() -> f64 {
        577.7f64
    }
    fn mean_radius() -> f64 {
        578.9f64
    }
}
impl TriAxial for Ariel {
    fn subplanetary_radius() -> f64 {
        581.1f64
    }
    fn along_orbit_radius() -> f64 {
        577.9f64
    }
}
impl BodyRotationalElements for Ariel {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [257.43f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [-15.1f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [156.22f64, -142.8356681f64, 0f64];
}
impl BodyTrigRotationalElements for Ariel {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.29f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.28f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.05f64, 0.08f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Umbriel;
impl NaifId for Umbriel {
    fn id() -> i32 {
        702i32
    }
}
impl PointMass for Umbriel {
    fn gravitational_parameter() -> f64 {
        85.09338094489388f64
    }
}
impl Ellipsoid for Umbriel {
    fn polar_radius() -> f64 {
        584.7f64
    }
    fn mean_radius() -> f64 {
        584.7f64
    }
}
impl TriAxial for Umbriel {
    fn subplanetary_radius() -> f64 {
        584.7f64
    }
    fn along_orbit_radius() -> f64 {
        584.7f64
    }
}
impl BodyRotationalElements for Umbriel {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [257.43f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [-15.1f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [108.05f64, -86.8688923f64, 0f64];
}
impl BodyTrigRotationalElements for Umbriel {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.21f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.2f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.09f64, 0f64, 0.06f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Titania;
impl NaifId for Titania {
    fn id() -> i32 {
        703i32
    }
}
impl PointMass for Titania {
    fn gravitational_parameter() -> f64 {
        226.9437003741248f64
    }
}
impl Ellipsoid for Titania {
    fn polar_radius() -> f64 {
        788.9f64
    }
    fn mean_radius() -> f64 {
        788.9f64
    }
}
impl TriAxial for Titania {
    fn subplanetary_radius() -> f64 {
        788.9f64
    }
    fn along_orbit_radius() -> f64 {
        788.9f64
    }
}
impl BodyRotationalElements for Titania {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [257.43f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [-15.1f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [77.74f64, -41.3514316f64, 0f64];
}
impl BodyTrigRotationalElements for Titania {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.29f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.28f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.08f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Oberon;
impl NaifId for Oberon {
    fn id() -> i32 {
        704i32
    }
}
impl PointMass for Oberon {
    fn gravitational_parameter() -> f64 {
        205.3234302535623f64
    }
}
impl Ellipsoid for Oberon {
    fn polar_radius() -> f64 {
        761.4f64
    }
    fn mean_radius() -> f64 {
        761.4f64
    }
}
impl TriAxial for Oberon {
    fn subplanetary_radius() -> f64 {
        761.4f64
    }
    fn along_orbit_radius() -> f64 {
        761.4f64
    }
}
impl BodyRotationalElements for Oberon {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [257.43f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [-15.1f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] = [6.77f64, -26.7394932f64, 0f64];
}
impl BodyTrigRotationalElements for Oberon {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0.16f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0.16f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0.04f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Miranda;
impl NaifId for Miranda {
    fn id() -> i32 {
        705i32
    }
}
impl PointMass for Miranda {
    fn gravitational_parameter() -> f64 {
        4.3195168992321f64
    }
}
impl Ellipsoid for Miranda {
    fn polar_radius() -> f64 {
        232.9f64
    }
    fn mean_radius() -> f64 {
        235.83333333333334f64
    }
}
impl TriAxial for Miranda {
    fn subplanetary_radius() -> f64 {
        240.4f64
    }
    fn along_orbit_radius() -> f64 {
        234.2f64
    }
}
impl BodyRotationalElements for Miranda {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [257.43f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [-15.08f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [30.7f64, -254.6906892f64, 0f64];
}
impl BodyTrigRotationalElements for Miranda {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 4.41f64, 0f64, 0f64, 0f64,
        0f64, 0f64, -0.04f64, 0f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 4.25f64, 0f64, 0f64, 0f64,
        0f64, 0f64, -0.02f64, 0f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 1.15f64, -1.27f64, 0f64, 0f64,
        0f64, 0f64, -0.09f64, 0.15f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Cordelia;
impl NaifId for Cordelia {
    fn id() -> i32 {
        706i32
    }
}
impl Ellipsoid for Cordelia {
    fn polar_radius() -> f64 {
        13f64
    }
    fn mean_radius() -> f64 {
        13f64
    }
}
impl TriAxial for Cordelia {
    fn subplanetary_radius() -> f64 {
        13f64
    }
    fn along_orbit_radius() -> f64 {
        13f64
    }
}
impl BodyRotationalElements for Cordelia {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [257.31f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [-15.18f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [127.69f64, -1074.520573f64, 0f64];
}
impl BodyTrigRotationalElements for Cordelia {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        -0.15f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0.14f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        -0.04f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Ophelia;
impl NaifId for Ophelia {
    fn id() -> i32 {
        707i32
    }
}
impl Ellipsoid for Ophelia {
    fn polar_radius() -> f64 {
        15f64
    }
    fn mean_radius() -> f64 {
        15f64
    }
}
impl TriAxial for Ophelia {
    fn subplanetary_radius() -> f64 {
        15f64
    }
    fn along_orbit_radius() -> f64 {
        15f64
    }
}
impl BodyRotationalElements for Ophelia {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [257.31f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [-15.18f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [130.35f64, -956.406815f64, 0f64];
}
impl BodyTrigRotationalElements for Ophelia {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, -0.09f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0.09f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, -0.03f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Bianca;
impl NaifId for Bianca {
    fn id() -> i32 {
        708i32
    }
}
impl Ellipsoid for Bianca {
    fn polar_radius() -> f64 {
        21f64
    }
    fn mean_radius() -> f64 {
        21f64
    }
}
impl TriAxial for Bianca {
    fn subplanetary_radius() -> f64 {
        21f64
    }
    fn along_orbit_radius() -> f64 {
        21f64
    }
}
impl BodyRotationalElements for Bianca {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [257.31f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [-15.18f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [105.46f64, -828.391476f64, 0f64];
}
impl BodyTrigRotationalElements for Bianca {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, -0.16f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0.16f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, -0.04f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Cressida;
impl NaifId for Cressida {
    fn id() -> i32 {
        709i32
    }
}
impl Ellipsoid for Cressida {
    fn polar_radius() -> f64 {
        31f64
    }
    fn mean_radius() -> f64 {
        31f64
    }
}
impl TriAxial for Cressida {
    fn subplanetary_radius() -> f64 {
        31f64
    }
    fn along_orbit_radius() -> f64 {
        31f64
    }
}
impl BodyRotationalElements for Cressida {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [257.31f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [-15.18f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [59.16f64, -776.581632f64, 0f64];
}
impl BodyTrigRotationalElements for Cressida {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, -0.04f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0.04f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, -0.01f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Desdemona;
impl NaifId for Desdemona {
    fn id() -> i32 {
        710i32
    }
}
impl Ellipsoid for Desdemona {
    fn polar_radius() -> f64 {
        27f64
    }
    fn mean_radius() -> f64 {
        27f64
    }
}
impl TriAxial for Desdemona {
    fn subplanetary_radius() -> f64 {
        27f64
    }
    fn along_orbit_radius() -> f64 {
        27f64
    }
}
impl BodyRotationalElements for Desdemona {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [257.31f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [-15.18f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [95.08f64, -760.053169f64, 0f64];
}
impl BodyTrigRotationalElements for Desdemona {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, -0.17f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0.16f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, -0.04f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Juliet;
impl NaifId for Juliet {
    fn id() -> i32 {
        711i32
    }
}
impl Ellipsoid for Juliet {
    fn polar_radius() -> f64 {
        42f64
    }
    fn mean_radius() -> f64 {
        42f64
    }
}
impl TriAxial for Juliet {
    fn subplanetary_radius() -> f64 {
        42f64
    }
    fn along_orbit_radius() -> f64 {
        42f64
    }
}
impl BodyRotationalElements for Juliet {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [257.31f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [-15.18f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [302.56f64, -730.125366f64, 0f64];
}
impl BodyTrigRotationalElements for Juliet {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, -0.06f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0.06f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, -0.02f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Portia;
impl NaifId for Portia {
    fn id() -> i32 {
        712i32
    }
}
impl Ellipsoid for Portia {
    fn polar_radius() -> f64 {
        54f64
    }
    fn mean_radius() -> f64 {
        54f64
    }
}
impl TriAxial for Portia {
    fn subplanetary_radius() -> f64 {
        54f64
    }
    fn along_orbit_radius() -> f64 {
        54f64
    }
}
impl BodyRotationalElements for Portia {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [257.31f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [-15.18f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [25.03f64, -701.486587f64, 0f64];
}
impl BodyTrigRotationalElements for Portia {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.09f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.09f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.02f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Rosalind;
impl NaifId for Rosalind {
    fn id() -> i32 {
        713i32
    }
}
impl Ellipsoid for Rosalind {
    fn polar_radius() -> f64 {
        27f64
    }
    fn mean_radius() -> f64 {
        27f64
    }
}
impl TriAxial for Rosalind {
    fn subplanetary_radius() -> f64 {
        27f64
    }
    fn along_orbit_radius() -> f64 {
        27f64
    }
}
impl BodyRotationalElements for Rosalind {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [257.31f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [-15.18f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [314.9f64, -644.631126f64, 0f64];
}
impl BodyTrigRotationalElements for Rosalind {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.29f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.28f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.08f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Belinda;
impl NaifId for Belinda {
    fn id() -> i32 {
        714i32
    }
}
impl Ellipsoid for Belinda {
    fn polar_radius() -> f64 {
        33f64
    }
    fn mean_radius() -> f64 {
        33f64
    }
}
impl TriAxial for Belinda {
    fn subplanetary_radius() -> f64 {
        33f64
    }
    fn along_orbit_radius() -> f64 {
        33f64
    }
}
impl BodyRotationalElements for Belinda {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [257.31f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [-15.18f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [297.46f64, -577.362817f64, 0f64];
}
impl BodyTrigRotationalElements for Belinda {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.03f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.03f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.01f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Puck;
impl NaifId for Puck {
    fn id() -> i32 {
        715i32
    }
}
impl Ellipsoid for Puck {
    fn polar_radius() -> f64 {
        77f64
    }
    fn mean_radius() -> f64 {
        77f64
    }
}
impl TriAxial for Puck {
    fn subplanetary_radius() -> f64 {
        77f64
    }
    fn along_orbit_radius() -> f64 {
        77f64
    }
}
impl BodyRotationalElements for Puck {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [257.31f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [-15.18f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [91.24f64, -472.545069f64, 0f64];
}
impl BodyTrigRotationalElements for Puck {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.33f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.31f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.09f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Caliban;
impl NaifId for Caliban {
    fn id() -> i32 {
        716i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Sycorax;
impl NaifId for Sycorax {
    fn id() -> i32 {
        717i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Prospero;
impl NaifId for Prospero {
    fn id() -> i32 {
        718i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Setebos;
impl NaifId for Setebos {
    fn id() -> i32 {
        719i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Stephano;
impl NaifId for Stephano {
    fn id() -> i32 {
        720i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Trinculo;
impl NaifId for Trinculo {
    fn id() -> i32 {
        721i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Francisco;
impl NaifId for Francisco {
    fn id() -> i32 {
        722i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Margaret;
impl NaifId for Margaret {
    fn id() -> i32 {
        723i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Ferdinand;
impl NaifId for Ferdinand {
    fn id() -> i32 {
        724i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Perdita;
impl NaifId for Perdita {
    fn id() -> i32 {
        725i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Mab;
impl NaifId for Mab {
    fn id() -> i32 {
        726i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Cupid;
impl NaifId for Cupid {
    fn id() -> i32 {
        727i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Triton;
impl NaifId for Triton {
    fn id() -> i32 {
        801i32
    }
}
impl PointMass for Triton {
    fn gravitational_parameter() -> f64 {
        1428.495462910464f64
    }
}
impl Ellipsoid for Triton {
    fn polar_radius() -> f64 {
        1352.6f64
    }
    fn mean_radius() -> f64 {
        1352.6f64
    }
}
impl TriAxial for Triton {
    fn subplanetary_radius() -> f64 {
        1352.6f64
    }
    fn along_orbit_radius() -> f64 {
        1352.6f64
    }
}
impl BodyRotationalElements for Triton {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [299.36f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [41.17f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [296.53f64, -61.2572637f64, 0f64];
}
impl BodyTrigRotationalElements for Triton {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -32.35f64, 0f64, -6.28f64, -2.08f64, -0.74f64,
        -0.28f64, -0.11f64, -0.07f64, -0.02f64, -0.01f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 22.55f64, 0f64, 2.1f64, 0.55f64, 0.16f64,
        0.05f64, 0.02f64, 0.01f64, 0f64, 0f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 22.25f64, 0f64, 6.73f64, 2.05f64, 0.74f64,
        0.28f64, 0.11f64, 0.05f64, 0.02f64, 0.01f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Nereid;
impl NaifId for Nereid {
    fn id() -> i32 {
        802i32
    }
}
impl Ellipsoid for Nereid {
    fn polar_radius() -> f64 {
        170f64
    }
    fn mean_radius() -> f64 {
        170f64
    }
}
impl TriAxial for Nereid {
    fn subplanetary_radius() -> f64 {
        170f64
    }
    fn along_orbit_radius() -> f64 {
        170f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Naiad;
impl NaifId for Naiad {
    fn id() -> i32 {
        803i32
    }
}
impl PointMass for Naiad {
    fn gravitational_parameter() -> f64 {
        0.008530281246540886f64
    }
}
impl Ellipsoid for Naiad {
    fn polar_radius() -> f64 {
        29f64
    }
    fn mean_radius() -> f64 {
        29f64
    }
}
impl TriAxial for Naiad {
    fn subplanetary_radius() -> f64 {
        29f64
    }
    fn along_orbit_radius() -> f64 {
        29f64
    }
}
impl BodyRotationalElements for Naiad {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [299.36f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [43.36f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [254.06f64, 1222.8441209f64, 0f64];
}
impl BodyTrigRotationalElements for Naiad {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0.7f64, -6.49f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.25f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        -0.51f64, -4.75f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.09f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        -0.48f64, 4.4f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.27f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64, 0f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Thalassa;
impl NaifId for Thalassa {
    fn id() -> i32 {
        804i32
    }
}
impl PointMass for Thalassa {
    fn gravitational_parameter() -> f64 {
        0.0235887319799217f64
    }
}
impl Ellipsoid for Thalassa {
    fn polar_radius() -> f64 {
        40f64
    }
    fn mean_radius() -> f64 {
        40f64
    }
}
impl TriAxial for Thalassa {
    fn subplanetary_radius() -> f64 {
        40f64
    }
    fn along_orbit_radius() -> f64 {
        40f64
    }
}
impl BodyRotationalElements for Thalassa {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [299.36f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [43.45f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [102.06f64, 1155.7555612f64, 0f64];
}
impl BodyTrigRotationalElements for Thalassa {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0.7f64, 0f64, -0.28f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        -0.51f64, 0f64, -0.21f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        -0.48f64, 0f64, 0.19f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Despina;
impl NaifId for Despina {
    fn id() -> i32 {
        805i32
    }
}
impl PointMass for Despina {
    fn gravitational_parameter() -> f64 {
        0.1167318403814998f64
    }
}
impl Ellipsoid for Despina {
    fn polar_radius() -> f64 {
        74f64
    }
    fn mean_radius() -> f64 {
        74f64
    }
}
impl TriAxial for Despina {
    fn subplanetary_radius() -> f64 {
        74f64
    }
    fn along_orbit_radius() -> f64 {
        74f64
    }
}
impl BodyRotationalElements for Despina {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [299.36f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [43.45f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [306.51f64, 1075.7341562f64, 0f64];
}
impl BodyTrigRotationalElements for Despina {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0.7f64, 0f64, 0f64, -0.09f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        -0.51f64, 0f64, 0f64, -0.07f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        -0.49f64, 0f64, 0f64, 0.06f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Galatea;
impl NaifId for Galatea {
    fn id() -> i32 {
        806i32
    }
}
impl PointMass for Galatea {
    fn gravitational_parameter() -> f64 {
        0.189898503906069f64
    }
}
impl Ellipsoid for Galatea {
    fn polar_radius() -> f64 {
        79f64
    }
    fn mean_radius() -> f64 {
        79f64
    }
}
impl TriAxial for Galatea {
    fn subplanetary_radius() -> f64 {
        79f64
    }
    fn along_orbit_radius() -> f64 {
        79f64
    }
}
impl BodyRotationalElements for Galatea {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [299.36f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [43.43f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [258.09f64, 839.6597686f64, 0f64];
}
impl BodyTrigRotationalElements for Galatea {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0.7f64, 0f64, 0f64, 0f64, -0.07f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        -0.51f64, 0f64, 0f64, 0f64, -0.05f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        -0.48f64, 0f64, 0f64, 0f64, 0.05f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Larissa;
impl NaifId for Larissa {
    fn id() -> i32 {
        807i32
    }
}
impl PointMass for Larissa {
    fn gravitational_parameter() -> f64 {
        0.2548437405693583f64
    }
}
impl Ellipsoid for Larissa {
    fn polar_radius() -> f64 {
        96f64
    }
    fn mean_radius() -> f64 {
        96f64
    }
}
impl TriAxial for Larissa {
    fn subplanetary_radius() -> f64 {
        96f64
    }
    fn along_orbit_radius() -> f64 {
        96f64
    }
}
impl BodyRotationalElements for Larissa {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [299.36f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [43.41f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [179.41f64, 649.053447f64, 0f64];
}
impl BodyTrigRotationalElements for Larissa {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0.7f64, 0f64, 0f64, 0f64, 0f64, -0.27f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        -0.51f64, 0f64, 0f64, 0f64, 0f64, -0.2f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        -0.48f64, 0f64, 0f64, 0f64, 0f64, 0.19f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Proteus;
impl NaifId for Proteus {
    fn id() -> i32 {
        808i32
    }
}
impl PointMass for Proteus {
    fn gravitational_parameter() -> f64 {
        2.583422379120727f64
    }
}
impl Ellipsoid for Proteus {
    fn polar_radius() -> f64 {
        201f64
    }
    fn mean_radius() -> f64 {
        209f64
    }
}
impl TriAxial for Proteus {
    fn subplanetary_radius() -> f64 {
        218f64
    }
    fn along_orbit_radius() -> f64 {
        208f64
    }
}
impl BodyRotationalElements for Proteus {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [299.27f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [42.91f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [93.38f64, 320.7654228f64, 0f64];
}
impl BodyTrigRotationalElements for Proteus {
    const NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        0.7f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.05f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64,
    ];
    const NUT_PREC_DECLINATION_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        -0.51f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.04f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64,
    ];
    const NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS: &'static [PolynomialCoefficient] = &[
        -0.48f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.04f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
        0f64, 0f64, 0f64,
    ];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Halimede;
impl NaifId for Halimede {
    fn id() -> i32 {
        809i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Psamathe;
impl NaifId for Psamathe {
    fn id() -> i32 {
        810i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Sao;
impl NaifId for Sao {
    fn id() -> i32 {
        811i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Laomedeia;
impl NaifId for Laomedeia {
    fn id() -> i32 {
        812i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Neso;
impl NaifId for Neso {
    fn id() -> i32 {
        813i32
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Charon;
impl NaifId for Charon {
    fn id() -> i32 {
        901i32
    }
}
impl PointMass for Charon {
    fn gravitational_parameter() -> f64 {
        105.8799888601881f64
    }
}
impl Ellipsoid for Charon {
    fn polar_radius() -> f64 {
        606f64
    }
    fn mean_radius() -> f64 {
        606f64
    }
}
impl TriAxial for Charon {
    fn subplanetary_radius() -> f64 {
        606f64
    }
    fn along_orbit_radius() -> f64 {
        606f64
    }
}
impl BodyRotationalElements for Charon {
    const RIGHT_ASCENSION_COEFFICIENTS: [PolynomialCoefficient; 3] = [132.993f64, 0f64, 0f64];
    const DECLINATION_COEFFICIENTS: [PolynomialCoefficient; 3] = [-6.163f64, 0f64, 0f64];
    const PRIME_MERIDIAN_COEFFICIENTS: [PolynomialCoefficient; 3] =
        [122.695f64, 56.3625225f64, 0f64];
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Nix;
impl NaifId for Nix {
    fn id() -> i32 {
        902i32
    }
}
impl PointMass for Nix {
    fn gravitational_parameter() -> f64 {
        0.00304817564816976f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Hydra;
impl NaifId for Hydra {
    fn id() -> i32 {
        903i32
    }
}
impl PointMass for Hydra {
    fn gravitational_parameter() -> f64 {
        0.003211039206155255f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Kerberos;
impl NaifId for Kerberos {
    fn id() -> i32 {
        904i32
    }
}
impl PointMass for Kerberos {
    fn gravitational_parameter() -> f64 {
        0.001110040850536676f64
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Styx;
impl NaifId for Styx {
    fn id() -> i32 {
        905i32
    }
}
impl PointMass for Styx {
    fn gravitational_parameter() -> f64 {
        0f64
    }
}
#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_naif_id_301() {
        assert_eq!(Moon::id(), 301i32)
    }
    #[test]
    fn test_point_mass_301() {
        assert_eq!(Moon::gravitational_parameter(), 4902.80011845755f64);
    }
    #[test]
    fn test_tri_axial_301() {
        assert_eq!(Moon::polar_radius(), 1737.4f64);
        assert_eq!(Moon::mean_radius(), 1737.4000000000003f64);
        assert_eq!(Moon::subplanetary_radius(), 1737.4f64);
        assert_eq!(Moon::along_orbit_radius(), 1737.4f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_301() {
        assert_eq!(
            [269.9949f64, 0.0031f64, 0f64],
            Moon::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_301() {
        assert_eq!([66.5392f64, 0.013f64, 0f64], Moon::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_301() {
        assert_eq!(
            [38.3213f64, 13.17635815f64, -0.0000000000014f64],
            Moon::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients301() {
        assert_eq!(
            &[
                -3.8787f64, -0.1204f64, 0.07f64, -0.0172f64, 0f64, 0.0072f64, 0f64, 0f64, 0f64,
                -0.0052f64, 0f64, 0f64, 0.0043f64
            ],
            Moon::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients301() {
        assert_eq!(
            &[
                1.5419f64, 0.0239f64, -0.0278f64, 0.0068f64, 0f64, -0.0029f64, 0.0009f64, 0f64,
                0f64, 0.0008f64, 0f64, 0f64, -0.0009f64
            ],
            Moon::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients301() {
        assert_eq!(
            &[
                3.561f64, 0.1208f64, -0.0642f64, 0.0158f64, 0.0252f64, -0.0066f64, -0.0047f64,
                -0.0046f64, 0.0028f64, 0.0052f64, 0.004f64, 0.0019f64, -0.0044f64
            ],
            Moon::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_401() {
        assert_eq!(Phobos::id(), 401i32)
    }
    #[test]
    fn test_point_mass_401() {
        assert_eq!(Phobos::gravitational_parameter(), 0.0007087546066894452f64);
    }
    #[test]
    fn test_tri_axial_401() {
        assert_eq!(Phobos::polar_radius(), 9.1f64);
        assert_eq!(Phobos::mean_radius(), 11.166666666666666f64);
        assert_eq!(Phobos::subplanetary_radius(), 13f64);
        assert_eq!(Phobos::along_orbit_radius(), 11.4f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_401() {
        assert_eq!(
            [317.67071657f64, -0.10844326f64, 0f64],
            Phobos::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_401() {
        assert_eq!(
            [52.88627266f64, -0.06134706f64, 0f64],
            Phobos::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_401() {
        assert_eq!(
            [
                35.1877444f64,
                1128.84475928f64,
                0.000000009536137031212154f64
            ],
            Phobos::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients401() {
        assert_eq!(
            &[
                -1.78428399f64,
                0.02212824f64,
                -0.01028251f64,
                -0.00475595f64
            ],
            Phobos::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients401() {
        assert_eq!(
            &[-1.07516537f64, 0.00668626f64, -0.0064874f64, 0.00281576f64],
            Phobos::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients401() {
        assert_eq!(
            &[
                1.42421769f64,
                -0.02273783f64,
                0.00410711f64,
                0.00631964f64,
                -1.143f64
            ],
            Phobos::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_402() {
        assert_eq!(Deimos::id(), 402i32)
    }
    #[test]
    fn test_point_mass_402() {
        assert_eq!(Deimos::gravitational_parameter(), 0.00009615569648120313f64);
    }
    #[test]
    fn test_tri_axial_402() {
        assert_eq!(Deimos::polar_radius(), 5.1f64);
        assert_eq!(Deimos::mean_radius(), 6.3f64);
        assert_eq!(Deimos::subplanetary_radius(), 7.8f64);
        assert_eq!(Deimos::along_orbit_radius(), 6f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_402() {
        assert_eq!(
            [316.65705808f64, -0.10518014f64, 0f64],
            Deimos::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_402() {
        assert_eq!(
            [53.50992033f64, -0.05979094f64, 0f64],
            Deimos::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_402() {
        assert_eq!(
            [79.39932954f64, 285.16188899f64, 0f64],
            Deimos::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients402() {
        assert_eq!(
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                3.09217726f64,
                0.22980637f64,
                0.06418655f64,
                0.02533537f64,
                0.00778695f64
            ],
            Deimos::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients402() {
        assert_eq!(
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                1.83936004f64,
                0.1432532f64,
                0.01911409f64,
                -0.0148259f64,
                0.0019243f64
            ],
            Deimos::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients402() {
        assert_eq!(
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                -2.73954829f64,
                -0.39968606f64,
                -0.06563259f64,
                -0.0291294f64,
                0.0169916f64
            ],
            Deimos::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_501() {
        assert_eq!(Io::id(), 501i32)
    }
    #[test]
    fn test_point_mass_501() {
        assert_eq!(Io::gravitational_parameter(), 5959.915466180539f64);
    }
    #[test]
    fn test_tri_axial_501() {
        assert_eq!(Io::polar_radius(), 1815.7f64);
        assert_eq!(Io::mean_radius(), 1821.5f64);
        assert_eq!(Io::subplanetary_radius(), 1829.4f64);
        assert_eq!(Io::along_orbit_radius(), 1819.4f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_501() {
        assert_eq!(
            [268.05f64, -0.009f64, 0f64],
            Io::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_501() {
        assert_eq!([64.5f64, 0.003f64, 0f64], Io::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_501() {
        assert_eq!(
            [200.39f64, 203.4889538f64, 0f64],
            Io::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients501() {
        assert_eq!(
            &[0f64, 0f64, 0.094f64, 0.024f64],
            Io::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients501() {
        assert_eq!(
            &[0f64, 0f64, 0.04f64, 0.011f64],
            Io::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients501() {
        assert_eq!(
            &[0f64, 0f64, -0.085f64, -0.022f64],
            Io::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_502() {
        assert_eq!(Europa::id(), 502i32)
    }
    #[test]
    fn test_point_mass_502() {
        assert_eq!(Europa::gravitational_parameter(), 3202.712099607295f64);
    }
    #[test]
    fn test_tri_axial_502() {
        assert_eq!(Europa::polar_radius(), 1559.5f64);
        assert_eq!(Europa::mean_radius(), 1560.8f64);
        assert_eq!(Europa::subplanetary_radius(), 1562.6f64);
        assert_eq!(Europa::along_orbit_radius(), 1560.3f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_502() {
        assert_eq!(
            [268.08f64, -0.009f64, 0f64],
            Europa::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_502() {
        assert_eq!([64.51f64, 0.003f64, 0f64], Europa::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_502() {
        assert_eq!(
            [36.022f64, 101.3747235f64, 0f64],
            Europa::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients502() {
        assert_eq!(
            &[0f64, 0f64, 0f64, 1.086f64, 0.06f64, 0.015f64, 0.009f64],
            Europa::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients502() {
        assert_eq!(
            &[0f64, 0f64, 0f64, 0.468f64, 0.026f64, 0.007f64, 0.002f64],
            Europa::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients502() {
        assert_eq!(
            &[0f64, 0f64, 0f64, -0.98f64, -0.054f64, -0.014f64, -0.008f64],
            Europa::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_503() {
        assert_eq!(Ganymede::id(), 503i32)
    }
    #[test]
    fn test_point_mass_503() {
        assert_eq!(Ganymede::gravitational_parameter(), 9887.832752719638f64);
    }
    #[test]
    fn test_tri_axial_503() {
        assert_eq!(Ganymede::polar_radius(), 2631.2f64);
        assert_eq!(Ganymede::mean_radius(), 2631.2f64);
        assert_eq!(Ganymede::subplanetary_radius(), 2631.2f64);
        assert_eq!(Ganymede::along_orbit_radius(), 2631.2f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_503() {
        assert_eq!(
            [268.2f64, -0.009f64, 0f64],
            Ganymede::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_503() {
        assert_eq!(
            [64.57f64, 0.003f64, 0f64],
            Ganymede::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_503() {
        assert_eq!(
            [44.064f64, 50.3176081f64, 0f64],
            Ganymede::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients503() {
        assert_eq!(
            &[0f64, 0f64, 0f64, -0.037f64, 0.431f64, 0.091f64],
            Ganymede::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients503() {
        assert_eq!(
            &[0f64, 0f64, 0f64, -0.016f64, 0.186f64, 0.039f64],
            Ganymede::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients503() {
        assert_eq!(
            &[0f64, 0f64, 0f64, 0.033f64, -0.389f64, -0.082f64],
            Ganymede::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_504() {
        assert_eq!(Callisto::id(), 504i32)
    }
    #[test]
    fn test_point_mass_504() {
        assert_eq!(Callisto::gravitational_parameter(), 7179.283402579837f64);
    }
    #[test]
    fn test_tri_axial_504() {
        assert_eq!(Callisto::polar_radius(), 2410.3f64);
        assert_eq!(Callisto::mean_radius(), 2410.3f64);
        assert_eq!(Callisto::subplanetary_radius(), 2410.3f64);
        assert_eq!(Callisto::along_orbit_radius(), 2410.3f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_504() {
        assert_eq!(
            [268.72f64, -0.009f64, 0f64],
            Callisto::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_504() {
        assert_eq!(
            [64.83f64, 0.003f64, 0f64],
            Callisto::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_504() {
        assert_eq!(
            [259.51f64, 21.5710715f64, 0f64],
            Callisto::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients504() {
        assert_eq!(
            &[0f64, 0f64, 0f64, 0f64, -0.068f64, 0.59f64, 0f64, 0.01f64],
            Callisto::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients504() {
        assert_eq!(
            &[0f64, 0f64, 0f64, 0f64, -0.029f64, 0.254f64, 0f64, -0.004f64],
            Callisto::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients504() {
        assert_eq!(
            &[0f64, 0f64, 0f64, 0f64, 0.061f64, -0.533f64, 0f64, -0.009f64],
            Callisto::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_505() {
        assert_eq!(Amalthea::id(), 505i32)
    }
    #[test]
    fn test_point_mass_505() {
        assert_eq!(Amalthea::gravitational_parameter(), 0.1645634534798259f64);
    }
    #[test]
    fn test_tri_axial_505() {
        assert_eq!(Amalthea::polar_radius(), 64f64);
        assert_eq!(Amalthea::mean_radius(), 87.33333333333333f64);
        assert_eq!(Amalthea::subplanetary_radius(), 125f64);
        assert_eq!(Amalthea::along_orbit_radius(), 73f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_505() {
        assert_eq!(
            [268.05f64, -0.009f64, 0f64],
            Amalthea::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_505() {
        assert_eq!(
            [64.49f64, 0.003f64, 0f64],
            Amalthea::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_505() {
        assert_eq!(
            [231.67f64, 722.631456f64, 0f64],
            Amalthea::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients505() {
        assert_eq!(
            &[-0.84f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.01f64, 0f64],
            Amalthea::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients505() {
        assert_eq!(
            &[-0.36f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64],
            Amalthea::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients505() {
        assert_eq!(
            &[0.76f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.01f64, 0f64],
            Amalthea::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_506() {
        assert_eq!(Himalia::id(), 506i32)
    }
    #[test]
    fn test_point_mass_506() {
        assert_eq!(Himalia::gravitational_parameter(), 0.1515524299611265f64);
    }
    #[test]
    fn test_tri_axial_506() {
        assert_eq!(Himalia::polar_radius(), 85f64);
        assert_eq!(Himalia::mean_radius(), 85f64);
        assert_eq!(Himalia::subplanetary_radius(), 85f64);
        assert_eq!(Himalia::along_orbit_radius(), 85f64);
    }
    #[test]
    fn test_naif_id_507() {
        assert_eq!(Elara::id(), 507i32)
    }
    #[test]
    fn test_tri_axial_507() {
        assert_eq!(Elara::polar_radius(), 40f64);
        assert_eq!(Elara::mean_radius(), 40f64);
        assert_eq!(Elara::subplanetary_radius(), 40f64);
        assert_eq!(Elara::along_orbit_radius(), 40f64);
    }
    #[test]
    fn test_naif_id_508() {
        assert_eq!(Pasiphae::id(), 508i32)
    }
    #[test]
    fn test_tri_axial_508() {
        assert_eq!(Pasiphae::polar_radius(), 18f64);
        assert_eq!(Pasiphae::mean_radius(), 18f64);
        assert_eq!(Pasiphae::subplanetary_radius(), 18f64);
        assert_eq!(Pasiphae::along_orbit_radius(), 18f64);
    }
    #[test]
    fn test_naif_id_509() {
        assert_eq!(Sinope::id(), 509i32)
    }
    #[test]
    fn test_tri_axial_509() {
        assert_eq!(Sinope::polar_radius(), 14f64);
        assert_eq!(Sinope::mean_radius(), 14f64);
        assert_eq!(Sinope::subplanetary_radius(), 14f64);
        assert_eq!(Sinope::along_orbit_radius(), 14f64);
    }
    #[test]
    fn test_naif_id_510() {
        assert_eq!(Lysithea::id(), 510i32)
    }
    #[test]
    fn test_tri_axial_510() {
        assert_eq!(Lysithea::polar_radius(), 12f64);
        assert_eq!(Lysithea::mean_radius(), 12f64);
        assert_eq!(Lysithea::subplanetary_radius(), 12f64);
        assert_eq!(Lysithea::along_orbit_radius(), 12f64);
    }
    #[test]
    fn test_naif_id_511() {
        assert_eq!(Carme::id(), 511i32)
    }
    #[test]
    fn test_tri_axial_511() {
        assert_eq!(Carme::polar_radius(), 15f64);
        assert_eq!(Carme::mean_radius(), 15f64);
        assert_eq!(Carme::subplanetary_radius(), 15f64);
        assert_eq!(Carme::along_orbit_radius(), 15f64);
    }
    #[test]
    fn test_naif_id_512() {
        assert_eq!(Ananke::id(), 512i32)
    }
    #[test]
    fn test_tri_axial_512() {
        assert_eq!(Ananke::polar_radius(), 10f64);
        assert_eq!(Ananke::mean_radius(), 10f64);
        assert_eq!(Ananke::subplanetary_radius(), 10f64);
        assert_eq!(Ananke::along_orbit_radius(), 10f64);
    }
    #[test]
    fn test_naif_id_513() {
        assert_eq!(Leda::id(), 513i32)
    }
    #[test]
    fn test_tri_axial_513() {
        assert_eq!(Leda::polar_radius(), 5f64);
        assert_eq!(Leda::mean_radius(), 5f64);
        assert_eq!(Leda::subplanetary_radius(), 5f64);
        assert_eq!(Leda::along_orbit_radius(), 5f64);
    }
    #[test]
    fn test_naif_id_514() {
        assert_eq!(Thebe::id(), 514i32)
    }
    #[test]
    fn test_point_mass_514() {
        assert_eq!(Thebe::gravitational_parameter(), 0.030148f64);
    }
    #[test]
    fn test_tri_axial_514() {
        assert_eq!(Thebe::polar_radius(), 42f64);
        assert_eq!(Thebe::mean_radius(), 49.666666666666664f64);
        assert_eq!(Thebe::subplanetary_radius(), 58f64);
        assert_eq!(Thebe::along_orbit_radius(), 49f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_514() {
        assert_eq!(
            [268.05f64, -0.009f64, 0f64],
            Thebe::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_514() {
        assert_eq!([64.49f64, 0.003f64, 0f64], Thebe::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_514() {
        assert_eq!(
            [8.56f64, 533.70041f64, 0f64],
            Thebe::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients514() {
        assert_eq!(
            &[0f64, -2.11f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.04f64],
            Thebe::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients514() {
        assert_eq!(
            &[0f64, -0.91f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.01f64],
            Thebe::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients514() {
        assert_eq!(
            &[0f64, 1.91f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.04f64],
            Thebe::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_515() {
        assert_eq!(Adrastea::id(), 515i32)
    }
    #[test]
    fn test_point_mass_515() {
        assert_eq!(Adrastea::gravitational_parameter(), 0.000139f64);
    }
    #[test]
    fn test_tri_axial_515() {
        assert_eq!(Adrastea::polar_radius(), 7f64);
        assert_eq!(Adrastea::mean_radius(), 8.333333333333334f64);
        assert_eq!(Adrastea::subplanetary_radius(), 10f64);
        assert_eq!(Adrastea::along_orbit_radius(), 8f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_515() {
        assert_eq!(
            [268.05f64, -0.009f64, 0f64],
            Adrastea::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_515() {
        assert_eq!(
            [64.49f64, 0.003f64, 0f64],
            Adrastea::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_515() {
        assert_eq!(
            [33.29f64, 1206.9986602f64, 0f64],
            Adrastea::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_516() {
        assert_eq!(Metis::id(), 516i32)
    }
    #[test]
    fn test_point_mass_516() {
        assert_eq!(Metis::gravitational_parameter(), 0.002501f64);
    }
    #[test]
    fn test_tri_axial_516() {
        assert_eq!(Metis::polar_radius(), 17f64);
        assert_eq!(Metis::mean_radius(), 22.333333333333332f64);
        assert_eq!(Metis::subplanetary_radius(), 30f64);
        assert_eq!(Metis::along_orbit_radius(), 20f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_516() {
        assert_eq!(
            [268.05f64, -0.009f64, 0f64],
            Metis::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_516() {
        assert_eq!([64.49f64, 0.003f64, 0f64], Metis::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_516() {
        assert_eq!(
            [346.09f64, 1221.2547301f64, 0f64],
            Metis::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_517() {
        assert_eq!(Callirrhoe::id(), 517i32)
    }
    #[test]
    fn test_naif_id_518() {
        assert_eq!(Themisto::id(), 518i32)
    }
    #[test]
    fn test_naif_id_519() {
        assert_eq!(Magaclite::id(), 519i32)
    }
    #[test]
    fn test_naif_id_520() {
        assert_eq!(Taygete::id(), 520i32)
    }
    #[test]
    fn test_naif_id_521() {
        assert_eq!(Chaldene::id(), 521i32)
    }
    #[test]
    fn test_naif_id_522() {
        assert_eq!(Harpalyke::id(), 522i32)
    }
    #[test]
    fn test_naif_id_523() {
        assert_eq!(Kalyke::id(), 523i32)
    }
    #[test]
    fn test_naif_id_524() {
        assert_eq!(Iocaste::id(), 524i32)
    }
    #[test]
    fn test_naif_id_525() {
        assert_eq!(Erinome::id(), 525i32)
    }
    #[test]
    fn test_naif_id_526() {
        assert_eq!(Isonoe::id(), 526i32)
    }
    #[test]
    fn test_naif_id_527() {
        assert_eq!(Praxidike::id(), 527i32)
    }
    #[test]
    fn test_naif_id_528() {
        assert_eq!(Autonoe::id(), 528i32)
    }
    #[test]
    fn test_naif_id_529() {
        assert_eq!(Thyone::id(), 529i32)
    }
    #[test]
    fn test_naif_id_530() {
        assert_eq!(Hermippe::id(), 530i32)
    }
    #[test]
    fn test_naif_id_531() {
        assert_eq!(Aitne::id(), 531i32)
    }
    #[test]
    fn test_naif_id_532() {
        assert_eq!(Eurydome::id(), 532i32)
    }
    #[test]
    fn test_naif_id_533() {
        assert_eq!(Euanthe::id(), 533i32)
    }
    #[test]
    fn test_naif_id_534() {
        assert_eq!(Euporie::id(), 534i32)
    }
    #[test]
    fn test_naif_id_535() {
        assert_eq!(Orthosie::id(), 535i32)
    }
    #[test]
    fn test_naif_id_536() {
        assert_eq!(Sponde::id(), 536i32)
    }
    #[test]
    fn test_naif_id_537() {
        assert_eq!(Kale::id(), 537i32)
    }
    #[test]
    fn test_naif_id_538() {
        assert_eq!(Pasithee::id(), 538i32)
    }
    #[test]
    fn test_naif_id_539() {
        assert_eq!(Hegemone::id(), 539i32)
    }
    #[test]
    fn test_naif_id_540() {
        assert_eq!(Mneme::id(), 540i32)
    }
    #[test]
    fn test_naif_id_541() {
        assert_eq!(Aoede::id(), 541i32)
    }
    #[test]
    fn test_naif_id_542() {
        assert_eq!(Thelxinoe::id(), 542i32)
    }
    #[test]
    fn test_naif_id_543() {
        assert_eq!(Arche::id(), 543i32)
    }
    #[test]
    fn test_naif_id_544() {
        assert_eq!(Kallichore::id(), 544i32)
    }
    #[test]
    fn test_naif_id_545() {
        assert_eq!(Helike::id(), 545i32)
    }
    #[test]
    fn test_naif_id_546() {
        assert_eq!(Carpo::id(), 546i32)
    }
    #[test]
    fn test_naif_id_547() {
        assert_eq!(Eukelade::id(), 547i32)
    }
    #[test]
    fn test_naif_id_548() {
        assert_eq!(Cyllene::id(), 548i32)
    }
    #[test]
    fn test_naif_id_549() {
        assert_eq!(Kore::id(), 549i32)
    }
    #[test]
    fn test_naif_id_550() {
        assert_eq!(Herse::id(), 550i32)
    }
    #[test]
    fn test_naif_id_553() {
        assert_eq!(Dia::id(), 553i32)
    }
    #[test]
    fn test_naif_id_601() {
        assert_eq!(Mimas::id(), 601i32)
    }
    #[test]
    fn test_point_mass_601() {
        assert_eq!(Mimas::gravitational_parameter(), 2.503488768152587f64);
    }
    #[test]
    fn test_tri_axial_601() {
        assert_eq!(Mimas::polar_radius(), 190.6f64);
        assert_eq!(Mimas::mean_radius(), 198.36666666666667f64);
        assert_eq!(Mimas::subplanetary_radius(), 207.8f64);
        assert_eq!(Mimas::along_orbit_radius(), 196.7f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_601() {
        assert_eq!(
            [40.66f64, -0.036f64, 0f64],
            Mimas::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_601() {
        assert_eq!([83.52f64, -0.004f64, 0f64], Mimas::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_601() {
        assert_eq!(
            [333.46f64, 381.994555f64, 0f64],
            Mimas::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients601() {
        assert_eq!(
            &[0f64, 0f64, 13.56f64, 0f64, 0f64, 0f64, 0f64, 0f64],
            Mimas::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients601() {
        assert_eq!(
            &[0f64, 0f64, -1.53f64, 0f64, 0f64, 0f64, 0f64, 0f64],
            Mimas::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients601() {
        assert_eq!(
            &[0f64, 0f64, -13.48f64, 0f64, -44.85f64, 0f64, 0f64, 0f64],
            Mimas::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_602() {
        assert_eq!(Enceladus::id(), 602i32)
    }
    #[test]
    fn test_point_mass_602() {
        assert_eq!(Enceladus::gravitational_parameter(), 7.210366688598896f64);
    }
    #[test]
    fn test_tri_axial_602() {
        assert_eq!(Enceladus::polar_radius(), 248.3f64);
        assert_eq!(Enceladus::mean_radius(), 252.1f64);
        assert_eq!(Enceladus::subplanetary_radius(), 256.6f64);
        assert_eq!(Enceladus::along_orbit_radius(), 251.4f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_602() {
        assert_eq!(
            [40.66f64, -0.036f64, 0f64],
            Enceladus::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_602() {
        assert_eq!(
            [83.52f64, -0.004f64, 0f64],
            Enceladus::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_602() {
        assert_eq!(
            [6.32f64, 262.7318996f64, 0f64],
            Enceladus::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_603() {
        assert_eq!(Tethys::id(), 603i32)
    }
    #[test]
    fn test_point_mass_603() {
        assert_eq!(Tethys::gravitational_parameter(), 41.21352885489587f64);
    }
    #[test]
    fn test_tri_axial_603() {
        assert_eq!(Tethys::polar_radius(), 526.3f64);
        assert_eq!(Tethys::mean_radius(), 530.9999999999999f64);
        assert_eq!(Tethys::subplanetary_radius(), 538.4f64);
        assert_eq!(Tethys::along_orbit_radius(), 528.3f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_603() {
        assert_eq!(
            [40.66f64, -0.036f64, 0f64],
            Tethys::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_603() {
        assert_eq!(
            [83.52f64, -0.004f64, 0f64],
            Tethys::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_603() {
        assert_eq!(
            [8.95f64, 190.6979085f64, 0f64],
            Tethys::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients603() {
        assert_eq!(
            &[0f64, 0f64, 0f64, 9.66f64, 0f64, 0f64, 0f64, 0f64],
            Tethys::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients603() {
        assert_eq!(
            &[0f64, 0f64, 0f64, -1.09f64, 0f64, 0f64, 0f64, 0f64],
            Tethys::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients603() {
        assert_eq!(
            &[0f64, 0f64, 0f64, -9.6f64, 2.23f64, 0f64, 0f64, 0f64],
            Tethys::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_604() {
        assert_eq!(Dione::id(), 604i32)
    }
    #[test]
    fn test_point_mass_604() {
        assert_eq!(Dione::gravitational_parameter(), 73.11607172482067f64);
    }
    #[test]
    fn test_tri_axial_604() {
        assert_eq!(Dione::polar_radius(), 559.6f64);
        assert_eq!(Dione::mean_radius(), 561.4333333333333f64);
        assert_eq!(Dione::subplanetary_radius(), 563.4f64);
        assert_eq!(Dione::along_orbit_radius(), 561.3f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_604() {
        assert_eq!(
            [40.66f64, -0.036f64, 0f64],
            Dione::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_604() {
        assert_eq!([83.52f64, -0.004f64, 0f64], Dione::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_604() {
        assert_eq!(
            [357.6f64, 131.5349316f64, 0f64],
            Dione::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_605() {
        assert_eq!(Rhea::id(), 605i32)
    }
    #[test]
    fn test_point_mass_605() {
        assert_eq!(Rhea::gravitational_parameter(), 153.9417519146563f64);
    }
    #[test]
    fn test_tri_axial_605() {
        assert_eq!(Rhea::polar_radius(), 762.4f64);
        assert_eq!(Rhea::mean_radius(), 763.5f64);
        assert_eq!(Rhea::subplanetary_radius(), 765f64);
        assert_eq!(Rhea::along_orbit_radius(), 763.1f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_605() {
        assert_eq!(
            [40.38f64, -0.036f64, 0f64],
            Rhea::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_605() {
        assert_eq!([83.55f64, -0.004f64, 0f64], Rhea::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_605() {
        assert_eq!(
            [235.16f64, 79.6900478f64, 0f64],
            Rhea::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients605() {
        assert_eq!(
            &[0f64, 0f64, 0f64, 0f64, 0f64, 3.1f64, 0f64, 0f64],
            Rhea::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients605() {
        assert_eq!(
            &[0f64, 0f64, 0f64, 0f64, 0f64, -0.35f64, 0f64, 0f64],
            Rhea::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients605() {
        assert_eq!(
            &[0f64, 0f64, 0f64, 0f64, 0f64, -3.08f64, 0f64, 0f64],
            Rhea::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_606() {
        assert_eq!(Titan::id(), 606i32)
    }
    #[test]
    fn test_point_mass_606() {
        assert_eq!(Titan::gravitational_parameter(), 8978.137095521046f64);
    }
    #[test]
    fn test_tri_axial_606() {
        assert_eq!(Titan::polar_radius(), 2574.47f64);
        assert_eq!(Titan::mean_radius(), 2574.7999999999997f64);
        assert_eq!(Titan::subplanetary_radius(), 2575.15f64);
        assert_eq!(Titan::along_orbit_radius(), 2574.78f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_606() {
        assert_eq!(
            [39.4827f64, 0f64, 0f64],
            Titan::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_606() {
        assert_eq!([83.4279f64, 0f64, 0f64], Titan::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_606() {
        assert_eq!(
            [186.5855f64, 22.5769768f64, 0f64],
            Titan::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients606() {
        assert_eq!(
            &[0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64],
            Titan::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients606() {
        assert_eq!(
            &[0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64],
            Titan::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients606() {
        assert_eq!(
            &[0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64],
            Titan::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_607() {
        assert_eq!(Hyperion::id(), 607i32)
    }
    #[test]
    fn test_point_mass_607() {
        assert_eq!(Hyperion::gravitational_parameter(), 0.3704913747932265f64);
    }
    #[test]
    fn test_tri_axial_607() {
        assert_eq!(Hyperion::polar_radius(), 102.7f64);
        assert_eq!(Hyperion::mean_radius(), 138.6f64);
        assert_eq!(Hyperion::subplanetary_radius(), 180.1f64);
        assert_eq!(Hyperion::along_orbit_radius(), 133f64);
    }
    #[test]
    fn test_naif_id_608() {
        assert_eq!(Iapetus::id(), 608i32)
    }
    #[test]
    fn test_point_mass_608() {
        assert_eq!(Iapetus::gravitational_parameter(), 120.5151060137642f64);
    }
    #[test]
    fn test_tri_axial_608() {
        assert_eq!(Iapetus::polar_radius(), 712.1f64);
        assert_eq!(Iapetus::mean_radius(), 734.5f64);
        assert_eq!(Iapetus::subplanetary_radius(), 745.7f64);
        assert_eq!(Iapetus::along_orbit_radius(), 745.7f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_608() {
        assert_eq!(
            [318.16f64, -3.949f64, 0f64],
            Iapetus::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_608() {
        assert_eq!(
            [75.03f64, -1.143f64, 0f64],
            Iapetus::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_608() {
        assert_eq!(
            [355.2f64, 4.5379572f64, 0f64],
            Iapetus::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_609() {
        assert_eq!(Phoebe::id(), 609i32)
    }
    #[test]
    fn test_point_mass_609() {
        assert_eq!(Phoebe::gravitational_parameter(), 0.5547860052791678f64);
    }
    #[test]
    fn test_tri_axial_609() {
        assert_eq!(Phoebe::polar_radius(), 101.8f64);
        assert_eq!(Phoebe::mean_radius(), 106.56666666666666f64);
        assert_eq!(Phoebe::subplanetary_radius(), 109.4f64);
        assert_eq!(Phoebe::along_orbit_radius(), 108.5f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_609() {
        assert_eq!([356.9f64, 0f64, 0f64], Phoebe::RIGHT_ASCENSION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_609() {
        assert_eq!([77.8f64, 0f64, 0f64], Phoebe::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_609() {
        assert_eq!(
            [178.58f64, 931.639f64, 0f64],
            Phoebe::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_610() {
        assert_eq!(Janus::id(), 610i32)
    }
    #[test]
    fn test_point_mass_610() {
        assert_eq!(Janus::gravitational_parameter(), 0.1265765099012197f64);
    }
    #[test]
    fn test_tri_axial_610() {
        assert_eq!(Janus::polar_radius(), 76.3f64);
        assert_eq!(Janus::mean_radius(), 90.33333333333333f64);
        assert_eq!(Janus::subplanetary_radius(), 101.7f64);
        assert_eq!(Janus::along_orbit_radius(), 93f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_610() {
        assert_eq!(
            [40.58f64, -0.036f64, 0f64],
            Janus::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_610() {
        assert_eq!([83.52f64, -0.004f64, 0f64], Janus::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_610() {
        assert_eq!(
            [58.83f64, 518.2359876f64, 0f64],
            Janus::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients610() {
        assert_eq!(
            &[0f64, -1.623f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.023f64],
            Janus::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients610() {
        assert_eq!(
            &[0f64, -0.183f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.001f64],
            Janus::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients610() {
        assert_eq!(
            &[0f64, 1.613f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.023f64],
            Janus::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_611() {
        assert_eq!(Epimetheus::id(), 611i32)
    }
    #[test]
    fn test_point_mass_611() {
        assert_eq!(
            Epimetheus::gravitational_parameter(),
            0.03512333288208074f64
        );
    }
    #[test]
    fn test_tri_axial_611() {
        assert_eq!(Epimetheus::polar_radius(), 53f64);
        assert_eq!(Epimetheus::mean_radius(), 58.4f64);
        assert_eq!(Epimetheus::subplanetary_radius(), 64.9f64);
        assert_eq!(Epimetheus::along_orbit_radius(), 57.3f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_611() {
        assert_eq!(
            [40.58f64, -0.036f64, 0f64],
            Epimetheus::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_611() {
        assert_eq!(
            [83.52f64, -0.004f64, 0f64],
            Epimetheus::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_611() {
        assert_eq!(
            [293.87f64, 518.4907239f64, 0f64],
            Epimetheus::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients611() {
        assert_eq!(
            &[-3.153f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.086f64, 0f64],
            Epimetheus::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients611() {
        assert_eq!(
            &[-0.356f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.005f64, 0f64],
            Epimetheus::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients611() {
        assert_eq!(
            &[3.133f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.086f64, 0f64],
            Epimetheus::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_612() {
        assert_eq!(Helene::id(), 612i32)
    }
    #[test]
    fn test_point_mass_612() {
        assert_eq!(Helene::gravitational_parameter(), 0.0004757419551776972f64);
    }
    #[test]
    fn test_tri_axial_612() {
        assert_eq!(Helene::polar_radius(), 13.3f64);
        assert_eq!(Helene::mean_radius(), 18.46666666666667f64);
        assert_eq!(Helene::subplanetary_radius(), 22.5f64);
        assert_eq!(Helene::along_orbit_radius(), 19.6f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_612() {
        assert_eq!(
            [40.85f64, -0.036f64, 0f64],
            Helene::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_612() {
        assert_eq!(
            [83.34f64, -0.004f64, 0f64],
            Helene::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_612() {
        assert_eq!(
            [245.12f64, 131.6174056f64, 0f64],
            Helene::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_613() {
        assert_eq!(Telesto::id(), 613i32)
    }
    #[test]
    fn test_tri_axial_613() {
        assert_eq!(Telesto::polar_radius(), 9.8f64);
        assert_eq!(Telesto::mean_radius(), 12.633333333333335f64);
        assert_eq!(Telesto::subplanetary_radius(), 16.3f64);
        assert_eq!(Telesto::along_orbit_radius(), 11.8f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_613() {
        assert_eq!(
            [50.51f64, -0.036f64, 0f64],
            Telesto::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_613() {
        assert_eq!(
            [84.06f64, -0.004f64, 0f64],
            Telesto::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_613() {
        assert_eq!(
            [56.88f64, 190.6979332f64, 0f64],
            Telesto::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_614() {
        assert_eq!(Calypso::id(), 614i32)
    }
    #[test]
    fn test_tri_axial_614() {
        assert_eq!(Calypso::polar_radius(), 6.3f64);
        assert_eq!(Calypso::mean_radius(), 10.3f64);
        assert_eq!(Calypso::subplanetary_radius(), 15.3f64);
        assert_eq!(Calypso::along_orbit_radius(), 9.3f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_614() {
        assert_eq!(
            [36.41f64, -0.036f64, 0f64],
            Calypso::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_614() {
        assert_eq!(
            [85.04f64, -0.004f64, 0f64],
            Calypso::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_614() {
        assert_eq!(
            [153.51f64, 190.6742373f64, 0f64],
            Calypso::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_615() {
        assert_eq!(Atlas::id(), 615i32)
    }
    #[test]
    fn test_point_mass_615() {
        assert_eq!(Atlas::gravitational_parameter(), 0.0003718871247516475f64);
    }
    #[test]
    fn test_tri_axial_615() {
        assert_eq!(Atlas::polar_radius(), 9.4f64);
        assert_eq!(Atlas::mean_radius(), 15.899999999999999f64);
        assert_eq!(Atlas::subplanetary_radius(), 20.5f64);
        assert_eq!(Atlas::along_orbit_radius(), 17.8f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_615() {
        assert_eq!(
            [40.58f64, -0.036f64, 0f64],
            Atlas::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_615() {
        assert_eq!([83.53f64, -0.004f64, 0f64], Atlas::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_615() {
        assert_eq!(
            [137.88f64, 598.306f64, 0f64],
            Atlas::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_616() {
        assert_eq!(Prometheus::id(), 616i32)
    }
    #[test]
    fn test_point_mass_616() {
        assert_eq!(Prometheus::gravitational_parameter(), 0.0107520800100761f64);
    }
    #[test]
    fn test_tri_axial_616() {
        assert_eq!(Prometheus::polar_radius(), 28.2f64);
        assert_eq!(Prometheus::mean_radius(), 46f64);
        assert_eq!(Prometheus::subplanetary_radius(), 68.2f64);
        assert_eq!(Prometheus::along_orbit_radius(), 41.6f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_616() {
        assert_eq!(
            [40.58f64, -0.036f64, 0f64],
            Prometheus::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_616() {
        assert_eq!(
            [83.53f64, -0.004f64, 0f64],
            Prometheus::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_616() {
        assert_eq!(
            [296.14f64, 587.289f64, 0f64],
            Prometheus::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_617() {
        assert_eq!(Pandora::id(), 617i32)
    }
    #[test]
    fn test_point_mass_617() {
        assert_eq!(Pandora::gravitational_parameter(), 0.009290325122028795f64);
    }
    #[test]
    fn test_tri_axial_617() {
        assert_eq!(Pandora::polar_radius(), 31.5f64);
        assert_eq!(Pandora::mean_radius(), 41.5f64);
        assert_eq!(Pandora::subplanetary_radius(), 52.2f64);
        assert_eq!(Pandora::along_orbit_radius(), 40.8f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_617() {
        assert_eq!(
            [40.58f64, -0.036f64, 0f64],
            Pandora::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_617() {
        assert_eq!(
            [83.53f64, -0.004f64, 0f64],
            Pandora::DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_617() {
        assert_eq!(
            [162.92f64, 572.7891f64, 0f64],
            Pandora::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_618() {
        assert_eq!(Pan::id(), 618i32)
    }
    #[test]
    fn test_tri_axial_618() {
        assert_eq!(Pan::polar_radius(), 10.4f64);
        assert_eq!(Pan::mean_radius(), 14.333333333333334f64);
        assert_eq!(Pan::subplanetary_radius(), 17.2f64);
        assert_eq!(Pan::along_orbit_radius(), 15.4f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_618() {
        assert_eq!(
            [40.6f64, -0.036f64, 0f64],
            Pan::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_618() {
        assert_eq!([83.5f64, -0.004f64, 0f64], Pan::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_618() {
        assert_eq!(
            [48.8f64, 626.044f64, 0f64],
            Pan::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_619() {
        assert_eq!(Ymir::id(), 619i32)
    }
    #[test]
    fn test_naif_id_620() {
        assert_eq!(Paaliaq::id(), 620i32)
    }
    #[test]
    fn test_naif_id_621() {
        assert_eq!(Tarvos::id(), 621i32)
    }
    #[test]
    fn test_naif_id_622() {
        assert_eq!(Ijiraq::id(), 622i32)
    }
    #[test]
    fn test_naif_id_623() {
        assert_eq!(Suttungr::id(), 623i32)
    }
    #[test]
    fn test_naif_id_624() {
        assert_eq!(Kiviuq::id(), 624i32)
    }
    #[test]
    fn test_naif_id_625() {
        assert_eq!(Mundilfari::id(), 625i32)
    }
    #[test]
    fn test_naif_id_626() {
        assert_eq!(Albiorix::id(), 626i32)
    }
    #[test]
    fn test_naif_id_627() {
        assert_eq!(Skathi::id(), 627i32)
    }
    #[test]
    fn test_naif_id_628() {
        assert_eq!(Erriapus::id(), 628i32)
    }
    #[test]
    fn test_naif_id_629() {
        assert_eq!(Siarnaq::id(), 629i32)
    }
    #[test]
    fn test_naif_id_630() {
        assert_eq!(Thrymr::id(), 630i32)
    }
    #[test]
    fn test_naif_id_631() {
        assert_eq!(Narvi::id(), 631i32)
    }
    #[test]
    fn test_naif_id_632() {
        assert_eq!(Methone::id(), 632i32)
    }
    #[test]
    fn test_tri_axial_632() {
        assert_eq!(Methone::polar_radius(), 1.21f64);
        assert_eq!(Methone::mean_radius(), 1.4799999999999998f64);
        assert_eq!(Methone::subplanetary_radius(), 1.94f64);
        assert_eq!(Methone::along_orbit_radius(), 1.29f64);
    }
    #[test]
    fn test_naif_id_633() {
        assert_eq!(Pallene::id(), 633i32)
    }
    #[test]
    fn test_tri_axial_633() {
        assert_eq!(Pallene::polar_radius(), 1.8f64);
        assert_eq!(Pallene::mean_radius(), 2.2533333333333334f64);
        assert_eq!(Pallene::subplanetary_radius(), 2.88f64);
        assert_eq!(Pallene::along_orbit_radius(), 2.08f64);
    }
    #[test]
    fn test_naif_id_634() {
        assert_eq!(Polydeuces::id(), 634i32)
    }
    #[test]
    fn test_tri_axial_634() {
        assert_eq!(Polydeuces::polar_radius(), 1f64);
        assert_eq!(Polydeuces::mean_radius(), 1.2333333333333334f64);
        assert_eq!(Polydeuces::subplanetary_radius(), 1.5f64);
        assert_eq!(Polydeuces::along_orbit_radius(), 1.2f64);
    }
    #[test]
    fn test_naif_id_635() {
        assert_eq!(Daphnis::id(), 635i32)
    }
    #[test]
    fn test_tri_axial_635() {
        assert_eq!(Daphnis::polar_radius(), 2.8f64);
        assert_eq!(Daphnis::mean_radius(), 3.9666666666666663f64);
        assert_eq!(Daphnis::subplanetary_radius(), 4.6f64);
        assert_eq!(Daphnis::along_orbit_radius(), 4.5f64);
    }
    #[test]
    fn test_naif_id_636() {
        assert_eq!(Aegir::id(), 636i32)
    }
    #[test]
    fn test_naif_id_637() {
        assert_eq!(Bebhionn::id(), 637i32)
    }
    #[test]
    fn test_naif_id_638() {
        assert_eq!(Bergelmir::id(), 638i32)
    }
    #[test]
    fn test_naif_id_639() {
        assert_eq!(Bestla::id(), 639i32)
    }
    #[test]
    fn test_naif_id_640() {
        assert_eq!(Farbauti::id(), 640i32)
    }
    #[test]
    fn test_naif_id_641() {
        assert_eq!(Fenrir::id(), 641i32)
    }
    #[test]
    fn test_naif_id_642() {
        assert_eq!(Fornjot::id(), 642i32)
    }
    #[test]
    fn test_naif_id_643() {
        assert_eq!(Hati::id(), 643i32)
    }
    #[test]
    fn test_naif_id_644() {
        assert_eq!(Hyrrokkin::id(), 644i32)
    }
    #[test]
    fn test_naif_id_645() {
        assert_eq!(Kari::id(), 645i32)
    }
    #[test]
    fn test_naif_id_646() {
        assert_eq!(Loge::id(), 646i32)
    }
    #[test]
    fn test_naif_id_647() {
        assert_eq!(Skoll::id(), 647i32)
    }
    #[test]
    fn test_naif_id_648() {
        assert_eq!(Surtur::id(), 648i32)
    }
    #[test]
    fn test_naif_id_649() {
        assert_eq!(Anthe::id(), 649i32)
    }
    #[test]
    fn test_tri_axial_649() {
        assert_eq!(Anthe::polar_radius(), 0.5f64);
        assert_eq!(Anthe::mean_radius(), 0.5f64);
        assert_eq!(Anthe::subplanetary_radius(), 0.5f64);
        assert_eq!(Anthe::along_orbit_radius(), 0.5f64);
    }
    #[test]
    fn test_naif_id_650() {
        assert_eq!(Jarnsaxa::id(), 650i32)
    }
    #[test]
    fn test_naif_id_651() {
        assert_eq!(Greip::id(), 651i32)
    }
    #[test]
    fn test_naif_id_652() {
        assert_eq!(Tarqeq::id(), 652i32)
    }
    #[test]
    fn test_naif_id_653() {
        assert_eq!(Aegaeon::id(), 653i32)
    }
    #[test]
    fn test_tri_axial_653() {
        assert_eq!(Aegaeon::polar_radius(), 0.2f64);
        assert_eq!(Aegaeon::mean_radius(), 0.3833333333333333f64);
        assert_eq!(Aegaeon::subplanetary_radius(), 0.7f64);
        assert_eq!(Aegaeon::along_orbit_radius(), 0.25f64);
    }
    #[test]
    fn test_naif_id_701() {
        assert_eq!(Ariel::id(), 701i32)
    }
    #[test]
    fn test_point_mass_701() {
        assert_eq!(Ariel::gravitational_parameter(), 83.46344431770477f64);
    }
    #[test]
    fn test_tri_axial_701() {
        assert_eq!(Ariel::polar_radius(), 577.7f64);
        assert_eq!(Ariel::mean_radius(), 578.9f64);
        assert_eq!(Ariel::subplanetary_radius(), 581.1f64);
        assert_eq!(Ariel::along_orbit_radius(), 577.9f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_701() {
        assert_eq!([257.43f64, 0f64, 0f64], Ariel::RIGHT_ASCENSION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_701() {
        assert_eq!([-15.1f64, 0f64, 0f64], Ariel::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_701() {
        assert_eq!(
            [156.22f64, -142.8356681f64, 0f64],
            Ariel::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients701() {
        assert_eq!(
            &[0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.29f64],
            Ariel::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients701() {
        assert_eq!(
            &[0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.28f64],
            Ariel::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients701() {
        assert_eq!(
            &[0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.05f64, 0.08f64],
            Ariel::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_702() {
        assert_eq!(Umbriel::id(), 702i32)
    }
    #[test]
    fn test_point_mass_702() {
        assert_eq!(Umbriel::gravitational_parameter(), 85.09338094489388f64);
    }
    #[test]
    fn test_tri_axial_702() {
        assert_eq!(Umbriel::polar_radius(), 584.7f64);
        assert_eq!(Umbriel::mean_radius(), 584.7f64);
        assert_eq!(Umbriel::subplanetary_radius(), 584.7f64);
        assert_eq!(Umbriel::along_orbit_radius(), 584.7f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_702() {
        assert_eq!(
            [257.43f64, 0f64, 0f64],
            Umbriel::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_702() {
        assert_eq!([-15.1f64, 0f64, 0f64], Umbriel::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_702() {
        assert_eq!(
            [108.05f64, -86.8688923f64, 0f64],
            Umbriel::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients702() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0.21f64
            ],
            Umbriel::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients702() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0.2f64
            ],
            Umbriel::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients702() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.09f64, 0f64,
                0.06f64
            ],
            Umbriel::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_703() {
        assert_eq!(Titania::id(), 703i32)
    }
    #[test]
    fn test_point_mass_703() {
        assert_eq!(Titania::gravitational_parameter(), 226.9437003741248f64);
    }
    #[test]
    fn test_tri_axial_703() {
        assert_eq!(Titania::polar_radius(), 788.9f64);
        assert_eq!(Titania::mean_radius(), 788.9f64);
        assert_eq!(Titania::subplanetary_radius(), 788.9f64);
        assert_eq!(Titania::along_orbit_radius(), 788.9f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_703() {
        assert_eq!(
            [257.43f64, 0f64, 0f64],
            Titania::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_703() {
        assert_eq!([-15.1f64, 0f64, 0f64], Titania::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_703() {
        assert_eq!(
            [77.74f64, -41.3514316f64, 0f64],
            Titania::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients703() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0.29f64
            ],
            Titania::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients703() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0.28f64
            ],
            Titania::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients703() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0.08f64
            ],
            Titania::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_704() {
        assert_eq!(Oberon::id(), 704i32)
    }
    #[test]
    fn test_point_mass_704() {
        assert_eq!(Oberon::gravitational_parameter(), 205.3234302535623f64);
    }
    #[test]
    fn test_tri_axial_704() {
        assert_eq!(Oberon::polar_radius(), 761.4f64);
        assert_eq!(Oberon::mean_radius(), 761.4f64);
        assert_eq!(Oberon::subplanetary_radius(), 761.4f64);
        assert_eq!(Oberon::along_orbit_radius(), 761.4f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_704() {
        assert_eq!(
            [257.43f64, 0f64, 0f64],
            Oberon::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_704() {
        assert_eq!([-15.1f64, 0f64, 0f64], Oberon::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_704() {
        assert_eq!(
            [6.77f64, -26.7394932f64, 0f64],
            Oberon::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients704() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0.16f64
            ],
            Oberon::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients704() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0.16f64
            ],
            Oberon::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients704() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0.04f64
            ],
            Oberon::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_705() {
        assert_eq!(Miranda::id(), 705i32)
    }
    #[test]
    fn test_point_mass_705() {
        assert_eq!(Miranda::gravitational_parameter(), 4.3195168992321f64);
    }
    #[test]
    fn test_tri_axial_705() {
        assert_eq!(Miranda::polar_radius(), 232.9f64);
        assert_eq!(Miranda::mean_radius(), 235.83333333333334f64);
        assert_eq!(Miranda::subplanetary_radius(), 240.4f64);
        assert_eq!(Miranda::along_orbit_radius(), 234.2f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_705() {
        assert_eq!(
            [257.43f64, 0f64, 0f64],
            Miranda::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_705() {
        assert_eq!([-15.08f64, 0f64, 0f64], Miranda::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_705() {
        assert_eq!(
            [30.7f64, -254.6906892f64, 0f64],
            Miranda::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients705() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 4.41f64, 0f64, 0f64,
                0f64, 0f64, 0f64, -0.04f64, 0f64
            ],
            Miranda::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients705() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 4.25f64, 0f64, 0f64,
                0f64, 0f64, 0f64, -0.02f64, 0f64
            ],
            Miranda::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients705() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 1.15f64, -1.27f64,
                0f64, 0f64, 0f64, 0f64, -0.09f64, 0.15f64
            ],
            Miranda::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_706() {
        assert_eq!(Cordelia::id(), 706i32)
    }
    #[test]
    fn test_tri_axial_706() {
        assert_eq!(Cordelia::polar_radius(), 13f64);
        assert_eq!(Cordelia::mean_radius(), 13f64);
        assert_eq!(Cordelia::subplanetary_radius(), 13f64);
        assert_eq!(Cordelia::along_orbit_radius(), 13f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_706() {
        assert_eq!(
            [257.31f64, 0f64, 0f64],
            Cordelia::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_706() {
        assert_eq!([-15.18f64, 0f64, 0f64], Cordelia::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_706() {
        assert_eq!(
            [127.69f64, -1074.520573f64, 0f64],
            Cordelia::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients706() {
        assert_eq!(
            &[
                -0.15f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Cordelia::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients706() {
        assert_eq!(
            &[
                0.14f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Cordelia::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients706() {
        assert_eq!(
            &[
                -0.04f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Cordelia::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_707() {
        assert_eq!(Ophelia::id(), 707i32)
    }
    #[test]
    fn test_tri_axial_707() {
        assert_eq!(Ophelia::polar_radius(), 15f64);
        assert_eq!(Ophelia::mean_radius(), 15f64);
        assert_eq!(Ophelia::subplanetary_radius(), 15f64);
        assert_eq!(Ophelia::along_orbit_radius(), 15f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_707() {
        assert_eq!(
            [257.31f64, 0f64, 0f64],
            Ophelia::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_707() {
        assert_eq!([-15.18f64, 0f64, 0f64], Ophelia::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_707() {
        assert_eq!(
            [130.35f64, -956.406815f64, 0f64],
            Ophelia::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients707() {
        assert_eq!(
            &[
                0f64, -0.09f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Ophelia::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients707() {
        assert_eq!(
            &[
                0f64, 0.09f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Ophelia::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients707() {
        assert_eq!(
            &[
                0f64, -0.03f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Ophelia::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_708() {
        assert_eq!(Bianca::id(), 708i32)
    }
    #[test]
    fn test_tri_axial_708() {
        assert_eq!(Bianca::polar_radius(), 21f64);
        assert_eq!(Bianca::mean_radius(), 21f64);
        assert_eq!(Bianca::subplanetary_radius(), 21f64);
        assert_eq!(Bianca::along_orbit_radius(), 21f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_708() {
        assert_eq!(
            [257.31f64, 0f64, 0f64],
            Bianca::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_708() {
        assert_eq!([-15.18f64, 0f64, 0f64], Bianca::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_708() {
        assert_eq!(
            [105.46f64, -828.391476f64, 0f64],
            Bianca::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients708() {
        assert_eq!(
            &[
                0f64, 0f64, -0.16f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Bianca::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients708() {
        assert_eq!(
            &[
                0f64, 0f64, 0.16f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Bianca::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients708() {
        assert_eq!(
            &[
                0f64, 0f64, -0.04f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Bianca::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_709() {
        assert_eq!(Cressida::id(), 709i32)
    }
    #[test]
    fn test_tri_axial_709() {
        assert_eq!(Cressida::polar_radius(), 31f64);
        assert_eq!(Cressida::mean_radius(), 31f64);
        assert_eq!(Cressida::subplanetary_radius(), 31f64);
        assert_eq!(Cressida::along_orbit_radius(), 31f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_709() {
        assert_eq!(
            [257.31f64, 0f64, 0f64],
            Cressida::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_709() {
        assert_eq!([-15.18f64, 0f64, 0f64], Cressida::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_709() {
        assert_eq!(
            [59.16f64, -776.581632f64, 0f64],
            Cressida::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients709() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, -0.04f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Cressida::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients709() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0.04f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Cressida::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients709() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, -0.01f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Cressida::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_710() {
        assert_eq!(Desdemona::id(), 710i32)
    }
    #[test]
    fn test_tri_axial_710() {
        assert_eq!(Desdemona::polar_radius(), 27f64);
        assert_eq!(Desdemona::mean_radius(), 27f64);
        assert_eq!(Desdemona::subplanetary_radius(), 27f64);
        assert_eq!(Desdemona::along_orbit_radius(), 27f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_710() {
        assert_eq!(
            [257.31f64, 0f64, 0f64],
            Desdemona::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_710() {
        assert_eq!([-15.18f64, 0f64, 0f64], Desdemona::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_710() {
        assert_eq!(
            [95.08f64, -760.053169f64, 0f64],
            Desdemona::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients710() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, -0.17f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Desdemona::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients710() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0.16f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Desdemona::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients710() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, -0.04f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Desdemona::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_711() {
        assert_eq!(Juliet::id(), 711i32)
    }
    #[test]
    fn test_tri_axial_711() {
        assert_eq!(Juliet::polar_radius(), 42f64);
        assert_eq!(Juliet::mean_radius(), 42f64);
        assert_eq!(Juliet::subplanetary_radius(), 42f64);
        assert_eq!(Juliet::along_orbit_radius(), 42f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_711() {
        assert_eq!(
            [257.31f64, 0f64, 0f64],
            Juliet::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_711() {
        assert_eq!([-15.18f64, 0f64, 0f64], Juliet::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_711() {
        assert_eq!(
            [302.56f64, -730.125366f64, 0f64],
            Juliet::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients711() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, -0.06f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Juliet::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients711() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0.06f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Juliet::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients711() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, -0.02f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Juliet::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_712() {
        assert_eq!(Portia::id(), 712i32)
    }
    #[test]
    fn test_tri_axial_712() {
        assert_eq!(Portia::polar_radius(), 54f64);
        assert_eq!(Portia::mean_radius(), 54f64);
        assert_eq!(Portia::subplanetary_radius(), 54f64);
        assert_eq!(Portia::along_orbit_radius(), 54f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_712() {
        assert_eq!(
            [257.31f64, 0f64, 0f64],
            Portia::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_712() {
        assert_eq!([-15.18f64, 0f64, 0f64], Portia::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_712() {
        assert_eq!(
            [25.03f64, -701.486587f64, 0f64],
            Portia::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients712() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.09f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Portia::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients712() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.09f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Portia::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients712() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.02f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Portia::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_713() {
        assert_eq!(Rosalind::id(), 713i32)
    }
    #[test]
    fn test_tri_axial_713() {
        assert_eq!(Rosalind::polar_radius(), 27f64);
        assert_eq!(Rosalind::mean_radius(), 27f64);
        assert_eq!(Rosalind::subplanetary_radius(), 27f64);
        assert_eq!(Rosalind::along_orbit_radius(), 27f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_713() {
        assert_eq!(
            [257.31f64, 0f64, 0f64],
            Rosalind::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_713() {
        assert_eq!([-15.18f64, 0f64, 0f64], Rosalind::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_713() {
        assert_eq!(
            [314.9f64, -644.631126f64, 0f64],
            Rosalind::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients713() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.29f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Rosalind::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients713() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.28f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Rosalind::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients713() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.08f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Rosalind::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_714() {
        assert_eq!(Belinda::id(), 714i32)
    }
    #[test]
    fn test_tri_axial_714() {
        assert_eq!(Belinda::polar_radius(), 33f64);
        assert_eq!(Belinda::mean_radius(), 33f64);
        assert_eq!(Belinda::subplanetary_radius(), 33f64);
        assert_eq!(Belinda::along_orbit_radius(), 33f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_714() {
        assert_eq!(
            [257.31f64, 0f64, 0f64],
            Belinda::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_714() {
        assert_eq!([-15.18f64, 0f64, 0f64], Belinda::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_714() {
        assert_eq!(
            [297.46f64, -577.362817f64, 0f64],
            Belinda::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients714() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.03f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Belinda::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients714() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.03f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Belinda::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients714() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.01f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Belinda::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_715() {
        assert_eq!(Puck::id(), 715i32)
    }
    #[test]
    fn test_tri_axial_715() {
        assert_eq!(Puck::polar_radius(), 77f64);
        assert_eq!(Puck::mean_radius(), 77f64);
        assert_eq!(Puck::subplanetary_radius(), 77f64);
        assert_eq!(Puck::along_orbit_radius(), 77f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_715() {
        assert_eq!([257.31f64, 0f64, 0f64], Puck::RIGHT_ASCENSION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_715() {
        assert_eq!([-15.18f64, 0f64, 0f64], Puck::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_715() {
        assert_eq!(
            [91.24f64, -472.545069f64, 0f64],
            Puck::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients715() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.33f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Puck::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients715() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.31f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Puck::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients715() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.09f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Puck::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_716() {
        assert_eq!(Caliban::id(), 716i32)
    }
    #[test]
    fn test_naif_id_717() {
        assert_eq!(Sycorax::id(), 717i32)
    }
    #[test]
    fn test_naif_id_718() {
        assert_eq!(Prospero::id(), 718i32)
    }
    #[test]
    fn test_naif_id_719() {
        assert_eq!(Setebos::id(), 719i32)
    }
    #[test]
    fn test_naif_id_720() {
        assert_eq!(Stephano::id(), 720i32)
    }
    #[test]
    fn test_naif_id_721() {
        assert_eq!(Trinculo::id(), 721i32)
    }
    #[test]
    fn test_naif_id_722() {
        assert_eq!(Francisco::id(), 722i32)
    }
    #[test]
    fn test_naif_id_723() {
        assert_eq!(Margaret::id(), 723i32)
    }
    #[test]
    fn test_naif_id_724() {
        assert_eq!(Ferdinand::id(), 724i32)
    }
    #[test]
    fn test_naif_id_725() {
        assert_eq!(Perdita::id(), 725i32)
    }
    #[test]
    fn test_naif_id_726() {
        assert_eq!(Mab::id(), 726i32)
    }
    #[test]
    fn test_naif_id_727() {
        assert_eq!(Cupid::id(), 727i32)
    }
    #[test]
    fn test_naif_id_801() {
        assert_eq!(Triton::id(), 801i32)
    }
    #[test]
    fn test_point_mass_801() {
        assert_eq!(Triton::gravitational_parameter(), 1428.495462910464f64);
    }
    #[test]
    fn test_tri_axial_801() {
        assert_eq!(Triton::polar_radius(), 1352.6f64);
        assert_eq!(Triton::mean_radius(), 1352.6f64);
        assert_eq!(Triton::subplanetary_radius(), 1352.6f64);
        assert_eq!(Triton::along_orbit_radius(), 1352.6f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_801() {
        assert_eq!(
            [299.36f64, 0f64, 0f64],
            Triton::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_801() {
        assert_eq!([41.17f64, 0f64, 0f64], Triton::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_801() {
        assert_eq!(
            [296.53f64, -61.2572637f64, 0f64],
            Triton::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients801() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -32.35f64, 0f64, -6.28f64, -2.08f64,
                -0.74f64, -0.28f64, -0.11f64, -0.07f64, -0.02f64, -0.01f64
            ],
            Triton::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients801() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 22.55f64, 0f64, 2.1f64, 0.55f64, 0.16f64,
                0.05f64, 0.02f64, 0.01f64, 0f64, 0f64
            ],
            Triton::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients801() {
        assert_eq!(
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 22.25f64, 0f64, 6.73f64, 2.05f64,
                0.74f64, 0.28f64, 0.11f64, 0.05f64, 0.02f64, 0.01f64
            ],
            Triton::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_802() {
        assert_eq!(Nereid::id(), 802i32)
    }
    #[test]
    fn test_tri_axial_802() {
        assert_eq!(Nereid::polar_radius(), 170f64);
        assert_eq!(Nereid::mean_radius(), 170f64);
        assert_eq!(Nereid::subplanetary_radius(), 170f64);
        assert_eq!(Nereid::along_orbit_radius(), 170f64);
    }
    #[test]
    fn test_naif_id_803() {
        assert_eq!(Naiad::id(), 803i32)
    }
    #[test]
    fn test_point_mass_803() {
        assert_eq!(Naiad::gravitational_parameter(), 0.008530281246540886f64);
    }
    #[test]
    fn test_tri_axial_803() {
        assert_eq!(Naiad::polar_radius(), 29f64);
        assert_eq!(Naiad::mean_radius(), 29f64);
        assert_eq!(Naiad::subplanetary_radius(), 29f64);
        assert_eq!(Naiad::along_orbit_radius(), 29f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_803() {
        assert_eq!([299.36f64, 0f64, 0f64], Naiad::RIGHT_ASCENSION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_803() {
        assert_eq!([43.36f64, 0f64, 0f64], Naiad::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_803() {
        assert_eq!(
            [254.06f64, 1222.8441209f64, 0f64],
            Naiad::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients803() {
        assert_eq!(
            &[
                0.7f64, -6.49f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.25f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Naiad::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients803() {
        assert_eq!(
            &[
                -0.51f64, -4.75f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.09f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Naiad::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients803() {
        assert_eq!(
            &[
                -0.48f64, 4.4f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.27f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Naiad::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_804() {
        assert_eq!(Thalassa::id(), 804i32)
    }
    #[test]
    fn test_point_mass_804() {
        assert_eq!(Thalassa::gravitational_parameter(), 0.0235887319799217f64);
    }
    #[test]
    fn test_tri_axial_804() {
        assert_eq!(Thalassa::polar_radius(), 40f64);
        assert_eq!(Thalassa::mean_radius(), 40f64);
        assert_eq!(Thalassa::subplanetary_radius(), 40f64);
        assert_eq!(Thalassa::along_orbit_radius(), 40f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_804() {
        assert_eq!(
            [299.36f64, 0f64, 0f64],
            Thalassa::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_804() {
        assert_eq!([43.45f64, 0f64, 0f64], Thalassa::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_804() {
        assert_eq!(
            [102.06f64, 1155.7555612f64, 0f64],
            Thalassa::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients804() {
        assert_eq!(
            &[
                0.7f64, 0f64, -0.28f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64
            ],
            Thalassa::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients804() {
        assert_eq!(
            &[
                -0.51f64, 0f64, -0.21f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Thalassa::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients804() {
        assert_eq!(
            &[
                -0.48f64, 0f64, 0.19f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Thalassa::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_805() {
        assert_eq!(Despina::id(), 805i32)
    }
    #[test]
    fn test_point_mass_805() {
        assert_eq!(Despina::gravitational_parameter(), 0.1167318403814998f64);
    }
    #[test]
    fn test_tri_axial_805() {
        assert_eq!(Despina::polar_radius(), 74f64);
        assert_eq!(Despina::mean_radius(), 74f64);
        assert_eq!(Despina::subplanetary_radius(), 74f64);
        assert_eq!(Despina::along_orbit_radius(), 74f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_805() {
        assert_eq!(
            [299.36f64, 0f64, 0f64],
            Despina::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_805() {
        assert_eq!([43.45f64, 0f64, 0f64], Despina::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_805() {
        assert_eq!(
            [306.51f64, 1075.7341562f64, 0f64],
            Despina::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients805() {
        assert_eq!(
            &[
                0.7f64, 0f64, 0f64, -0.09f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64
            ],
            Despina::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients805() {
        assert_eq!(
            &[
                -0.51f64, 0f64, 0f64, -0.07f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Despina::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients805() {
        assert_eq!(
            &[
                -0.49f64, 0f64, 0f64, 0.06f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Despina::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_806() {
        assert_eq!(Galatea::id(), 806i32)
    }
    #[test]
    fn test_point_mass_806() {
        assert_eq!(Galatea::gravitational_parameter(), 0.189898503906069f64);
    }
    #[test]
    fn test_tri_axial_806() {
        assert_eq!(Galatea::polar_radius(), 79f64);
        assert_eq!(Galatea::mean_radius(), 79f64);
        assert_eq!(Galatea::subplanetary_radius(), 79f64);
        assert_eq!(Galatea::along_orbit_radius(), 79f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_806() {
        assert_eq!(
            [299.36f64, 0f64, 0f64],
            Galatea::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_806() {
        assert_eq!([43.43f64, 0f64, 0f64], Galatea::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_806() {
        assert_eq!(
            [258.09f64, 839.6597686f64, 0f64],
            Galatea::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients806() {
        assert_eq!(
            &[
                0.7f64, 0f64, 0f64, 0f64, -0.07f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64
            ],
            Galatea::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients806() {
        assert_eq!(
            &[
                -0.51f64, 0f64, 0f64, 0f64, -0.05f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Galatea::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients806() {
        assert_eq!(
            &[
                -0.48f64, 0f64, 0f64, 0f64, 0.05f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Galatea::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_807() {
        assert_eq!(Larissa::id(), 807i32)
    }
    #[test]
    fn test_point_mass_807() {
        assert_eq!(Larissa::gravitational_parameter(), 0.2548437405693583f64);
    }
    #[test]
    fn test_tri_axial_807() {
        assert_eq!(Larissa::polar_radius(), 96f64);
        assert_eq!(Larissa::mean_radius(), 96f64);
        assert_eq!(Larissa::subplanetary_radius(), 96f64);
        assert_eq!(Larissa::along_orbit_radius(), 96f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_807() {
        assert_eq!(
            [299.36f64, 0f64, 0f64],
            Larissa::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_807() {
        assert_eq!([43.41f64, 0f64, 0f64], Larissa::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_807() {
        assert_eq!(
            [179.41f64, 649.053447f64, 0f64],
            Larissa::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients807() {
        assert_eq!(
            &[
                0.7f64, 0f64, 0f64, 0f64, 0f64, -0.27f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64
            ],
            Larissa::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients807() {
        assert_eq!(
            &[
                -0.51f64, 0f64, 0f64, 0f64, 0f64, -0.2f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Larissa::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients807() {
        assert_eq!(
            &[
                -0.48f64, 0f64, 0f64, 0f64, 0f64, 0.19f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Larissa::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_808() {
        assert_eq!(Proteus::id(), 808i32)
    }
    #[test]
    fn test_point_mass_808() {
        assert_eq!(Proteus::gravitational_parameter(), 2.583422379120727f64);
    }
    #[test]
    fn test_tri_axial_808() {
        assert_eq!(Proteus::polar_radius(), 201f64);
        assert_eq!(Proteus::mean_radius(), 209f64);
        assert_eq!(Proteus::subplanetary_radius(), 218f64);
        assert_eq!(Proteus::along_orbit_radius(), 208f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_808() {
        assert_eq!(
            [299.27f64, 0f64, 0f64],
            Proteus::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_808() {
        assert_eq!([42.91f64, 0f64, 0f64], Proteus::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_808() {
        assert_eq!(
            [93.38f64, 320.7654228f64, 0f64],
            Proteus::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_right_ascension_coefficients808() {
        assert_eq!(
            &[
                0.7f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.05f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64
            ],
            Proteus::NUT_PREC_RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_declination_coefficients808() {
        assert_eq!(
            &[
                -0.51f64, 0f64, 0f64, 0f64, 0f64, 0f64, -0.04f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Proteus::NUT_PREC_DECLINATION_COEFFICIENTS
        )
    }
    #[test]
    fn test_trig_rotational_elements_nut_prec_prime_meridian_coefficients808() {
        assert_eq!(
            &[
                -0.48f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0.04f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64, 0f64, 0f64, 0f64, 0f64
            ],
            Proteus::NUT_PREC_PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_809() {
        assert_eq!(Halimede::id(), 809i32)
    }
    #[test]
    fn test_naif_id_810() {
        assert_eq!(Psamathe::id(), 810i32)
    }
    #[test]
    fn test_naif_id_811() {
        assert_eq!(Sao::id(), 811i32)
    }
    #[test]
    fn test_naif_id_812() {
        assert_eq!(Laomedeia::id(), 812i32)
    }
    #[test]
    fn test_naif_id_813() {
        assert_eq!(Neso::id(), 813i32)
    }
    #[test]
    fn test_naif_id_901() {
        assert_eq!(Charon::id(), 901i32)
    }
    #[test]
    fn test_point_mass_901() {
        assert_eq!(Charon::gravitational_parameter(), 105.8799888601881f64);
    }
    #[test]
    fn test_tri_axial_901() {
        assert_eq!(Charon::polar_radius(), 606f64);
        assert_eq!(Charon::mean_radius(), 606f64);
        assert_eq!(Charon::subplanetary_radius(), 606f64);
        assert_eq!(Charon::along_orbit_radius(), 606f64);
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_901() {
        assert_eq!(
            [132.993f64, 0f64, 0f64],
            Charon::RIGHT_ASCENSION_COEFFICIENTS
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_901() {
        assert_eq!([-6.163f64, 0f64, 0f64], Charon::DECLINATION_COEFFICIENTS)
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_901() {
        assert_eq!(
            [122.695f64, 56.3625225f64, 0f64],
            Charon::PRIME_MERIDIAN_COEFFICIENTS
        )
    }
    #[test]
    fn test_naif_id_902() {
        assert_eq!(Nix::id(), 902i32)
    }
    #[test]
    fn test_point_mass_902() {
        assert_eq!(Nix::gravitational_parameter(), 0.00304817564816976f64);
    }
    #[test]
    fn test_naif_id_903() {
        assert_eq!(Hydra::id(), 903i32)
    }
    #[test]
    fn test_point_mass_903() {
        assert_eq!(Hydra::gravitational_parameter(), 0.003211039206155255f64);
    }
    #[test]
    fn test_naif_id_904() {
        assert_eq!(Kerberos::id(), 904i32)
    }
    #[test]
    fn test_point_mass_904() {
        assert_eq!(Kerberos::gravitational_parameter(), 0.001110040850536676f64);
    }
    #[test]
    fn test_naif_id_905() {
        assert_eq!(Styx::id(), 905i32)
    }
    #[test]
    fn test_point_mass_905() {
        assert_eq!(Styx::gravitational_parameter(), 0f64);
    }
}
