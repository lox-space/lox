/*
 * Copyright (c) 2023. Helge Eichhorn and the LOX contributors
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

// Auto-generated by `lox_gen`. Do not edit!

use super::{
    Ellipsoid, NaifId, NutationPrecessionCoefficients, PointMass, PolynomialCoefficients,
    RotationalElements, Spheroid,
};
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Mercury;
impl NaifId for Mercury {
    fn id() -> i32 {
        199i32
    }
}
impl PointMass for Mercury {
    fn gravitational_parameter() -> f64 {
        22031.868551400003f64
    }
}
impl Ellipsoid for Mercury {
    fn polar_radius() -> f64 {
        2438.26f64
    }
    fn mean_radius() -> f64 {
        2439.7733333333335f64
    }
}
impl Spheroid for Mercury {
    fn equatorial_radius() -> f64 {
        2440.53f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Mercury {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (
            &[
                174.7910857f64,
                349.5821714f64,
                164.3732571f64,
                339.1643429f64,
                153.9554286f64,
            ] as &[f64],
            &[
                149472.53587500003f64,
                298945.07175000006f64,
                448417.60762500006f64,
                597890.1435000001f64,
                747362.679375f64,
            ] as &[f64],
        )
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            281.0103f64,
            -0.0328f64,
            0f64,
            &[0f64, 0f64, 0f64, 0f64, 0f64] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            61.4155f64,
            -0.0049f64,
            0f64,
            &[0f64, 0f64, 0f64, 0f64, 0f64] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            329.5988f64,
            6.1385108f64,
            0f64,
            &[
                0.01067257f64,
                -0.00112309f64,
                -0.0001104f64,
                -0.00002539f64,
                -0.00000571f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Venus;
impl NaifId for Venus {
    fn id() -> i32 {
        299i32
    }
}
impl PointMass for Venus {
    fn gravitational_parameter() -> f64 {
        324858.592f64
    }
}
impl Ellipsoid for Venus {
    fn polar_radius() -> f64 {
        6051.8f64
    }
    fn mean_radius() -> f64 {
        6051.8f64
    }
}
impl Spheroid for Venus {
    fn equatorial_radius() -> f64 {
        6051.8f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Venus {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (272.76f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (67.16f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (160.2f64, -1.4813688f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Earth;
impl NaifId for Earth {
    fn id() -> i32 {
        399i32
    }
}
impl PointMass for Earth {
    fn gravitational_parameter() -> f64 {
        398600.43550702266f64
    }
}
impl Ellipsoid for Earth {
    fn polar_radius() -> f64 {
        6356.7519f64
    }
    fn mean_radius() -> f64 {
        6371.008366666666f64
    }
}
impl Spheroid for Earth {
    fn equatorial_radius() -> f64 {
        6378.1366f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Earth {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (
            &[
                125.045f64, 250.089f64, 260.008f64, 176.625f64, 357.529f64, 311.589f64, 134.963f64,
                276.617f64, 34.226f64, 15.134f64, 119.743f64, 239.961f64, 25.053f64,
            ] as &[f64],
            &[
                -1935.5364525f64,
                -3871.072905f64,
                475263.3328725f64,
                487269.629985f64,
                35999.0509575f64,
                964468.49931f64,
                477198.869325f64,
                12006.300765f64,
                63863.5132425f64,
                -5806.6093575f64,
                131.84064f64,
                6003.1503825f64,
                473327.79642f64,
            ] as &[f64],
        )
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (0f64, -0.641f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (90f64, -0.557f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (190.147f64, 360.9856235f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Mars;
impl NaifId for Mars {
    fn id() -> i32 {
        499i32
    }
}
impl PointMass for Mars {
    fn gravitational_parameter() -> f64 {
        42828.37362069909f64
    }
}
impl Ellipsoid for Mars {
    fn polar_radius() -> f64 {
        3376.2f64
    }
    fn mean_radius() -> f64 {
        3389.5266666666666f64
    }
}
impl Spheroid for Mars {
    fn equatorial_radius() -> f64 {
        3396.19f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Mars {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (
            &[
                190.72646643f64,
                0f64,
                31834.27934054f64,
                332.86082793f64,
                0f64,
                38280.79631835f64,
                189.6327156f64,
                12.711923222f64,
                660.22803474f64,
                231.05028581f64,
                0f64,
                1320.50145245f64,
                217.98635955f64,
                0f64,
                19139.83628608f64,
                198.991226f64,
                0f64,
                38280.8511281f64,
                249.663391f64,
                0f64,
                76560.636795f64,
                79.398797f64,
                0f64,
                19139.9407476f64,
                43.058401f64,
                0f64,
                57420.7517205f64,
                79.476401f64,
                0f64,
                0.5042615f64,
                129.071773f64,
                0f64,
                38281.0473591f64,
                56.668646f64,
                0f64,
                76560.2552215f64,
                104.79268f64,
                0f64,
                0.5042615f64,
            ] as &[f64],
            &[
                15917.10818695f64,
                21.4689247f64,
                0f64,
                19139.89694742f64,
                394.93256437f64,
                0f64,
                41215158.1842005f64,
                121.46893664f64,
                0f64,
                660.9912354f64,
                251.37314025f64,
                0f64,
                38279.9612555f64,
                196.19729402f64,
                0f64,
                19139.4819985f64,
                226.292679f64,
                0f64,
                57420.7251593f64,
                266.18351f64,
                0f64,
                0.5042615f64,
                122.433576f64,
                0f64,
                38280.8753272f64,
                57.663379f64,
                0f64,
                76560.6495004f64,
                166.325722f64,
                0f64,
                19140.0328244f64,
                36.352167f64,
                0f64,
                57420.929536f64,
                67.364003f64,
                0f64,
                95700.4387578f64,
                95.391654f64,
                0f64,
            ] as &[f64],
        )
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            317.269202f64,
            -0.10927547f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.000068f64,
                0.000238f64,
                0.000052f64,
                0.000009f64,
                0.419057f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            54.432516f64,
            -0.05827105f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.000051f64,
                0.000141f64,
                0.000031f64,
                0.000005f64,
                1.591274f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            176.049863f64,
            350.891982443297f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.000145f64,
                0.000157f64,
                0.00004f64,
                0.000001f64,
                0.000001f64,
                0.584542f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Jupiter;
impl NaifId for Jupiter {
    fn id() -> i32 {
        599i32
    }
}
impl PointMass for Jupiter {
    fn gravitational_parameter() -> f64 {
        126686531.9003704f64
    }
}
impl Ellipsoid for Jupiter {
    fn polar_radius() -> f64 {
        66854f64
    }
    fn mean_radius() -> f64 {
        69946f64
    }
}
impl Spheroid for Jupiter {
    fn equatorial_radius() -> f64 {
        71492f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Jupiter {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (
            &[
                73.32f64,
                24.62f64,
                283.9f64,
                355.8f64,
                119.9f64,
                229.8f64,
                352.25f64,
                113.35f64,
                146.64f64,
                49.24f64,
                99.360714f64,
                175.895369f64,
                300.323162f64,
                114.012305f64,
                49.511251f64,
            ] as &[f64],
            &[
                91472.9f64,
                45137.2f64,
                4850.7f64,
                1191.3f64,
                262.1f64,
                64.3f64,
                2382.6f64,
                6070f64,
                182945.8f64,
                90274.4f64,
                4850.4046f64,
                1191.9605f64,
                262.5475f64,
                6070.2476f64,
                64.3f64,
            ] as &[f64],
        )
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            268.056595f64,
            -0.006499f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.000117f64,
                0.000938f64,
                0.001432f64,
                0.00003f64,
                0.00215f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            64.495303f64,
            0.002413f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.00005f64,
                0.000404f64,
                0.000617f64,
                -0.000013f64,
                0.000926f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            284.95f64,
            870.536f64,
            0f64,
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Saturn;
impl NaifId for Saturn {
    fn id() -> i32 {
        699i32
    }
}
impl PointMass for Saturn {
    fn gravitational_parameter() -> f64 {
        37931206.23436167f64
    }
}
impl Ellipsoid for Saturn {
    fn polar_radius() -> f64 {
        54364f64
    }
    fn mean_radius() -> f64 {
        58300f64
    }
}
impl Spheroid for Saturn {
    fn equatorial_radius() -> f64 {
        60268f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Saturn {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (
            &[
                353.32f64, 28.72f64, 177.4f64, 300f64, 316.45f64, 345.2f64, 706.64f64, 57.44f64,
            ] as &[f64],
            &[
                75706.7f64,
                75706.7f64,
                -36505.5f64,
                -7225.9f64,
                506.2f64,
                -1016.3f64,
                151413.4f64,
                151413.4f64,
            ] as &[f64],
        )
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (40.589f64, -0.036f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (83.537f64, -0.004f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (38.9f64, 810.7939024f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Uranus;
impl NaifId for Uranus {
    fn id() -> i32 {
        799i32
    }
}
impl PointMass for Uranus {
    fn gravitational_parameter() -> f64 {
        5793951.256527211f64
    }
}
impl Ellipsoid for Uranus {
    fn polar_radius() -> f64 {
        24973f64
    }
    fn mean_radius() -> f64 {
        25363.666666666668f64
    }
}
impl Spheroid for Uranus {
    fn equatorial_radius() -> f64 {
        25559f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Uranus {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (
            &[
                115.75f64, 141.69f64, 135.03f64, 61.77f64, 249.32f64, 43.86f64, 77.66f64,
                157.36f64, 101.81f64, 138.64f64, 102.23f64, 316.41f64, 304.01f64, 308.71f64,
                340.82f64, 259.14f64, 204.46f64, 632.82f64,
            ] as &[f64],
            &[
                54991.87f64,
                41887.66f64,
                29927.35f64,
                25733.59f64,
                24471.46f64,
                22278.41f64,
                20289.42f64,
                16652.76f64,
                12872.63f64,
                8061.81f64,
                -2024.22f64,
                2863.96f64,
                -51.94f64,
                -93.17f64,
                -75.32f64,
                -504.81f64,
                -4048.44f64,
                5727.92f64,
            ] as &[f64],
        )
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (257.311f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (-15.175f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (203.81f64, -501.1600928f64, 0f64, &[] as &[f64])
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Neptune;
impl NaifId for Neptune {
    fn id() -> i32 {
        899i32
    }
}
impl PointMass for Neptune {
    fn gravitational_parameter() -> f64 {
        6835103.145462294f64
    }
}
impl Ellipsoid for Neptune {
    fn polar_radius() -> f64 {
        24341f64
    }
    fn mean_radius() -> f64 {
        24623f64
    }
}
impl Spheroid for Neptune {
    fn equatorial_radius() -> f64 {
        24764f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Neptune {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (
            &[
                357.85f64, 323.92f64, 220.51f64, 354.27f64, 75.31f64, 35.36f64, 142.61f64,
                177.85f64, 647.84f64, 355.7f64, 533.55f64, 711.4f64, 889.25f64, 1067.1f64,
                1244.95f64, 1422.8f64, 1600.65f64,
            ] as &[f64],
            &[
                52.316f64,
                62606.6f64,
                55064.2f64,
                46564.5f64,
                26109.4f64,
                14325.4f64,
                2824.6f64,
                52.316f64,
                125213.2f64,
                104.632f64,
                156.948f64,
                209.264f64,
                261.58f64,
                313.896f64,
                366.212f64,
                418.528f64,
                470.844f64,
            ] as &[f64],
        )
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (
            299.36f64,
            0f64,
            0f64,
            &[0.7f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64] as &[f64],
        )
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (
            43.46f64,
            0f64,
            0f64,
            &[-0.51f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64] as &[f64],
        )
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (
            249.978f64,
            541.1397757f64,
            0f64,
            &[-0.48f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64] as &[f64],
        )
    }
}
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Pluto;
impl NaifId for Pluto {
    fn id() -> i32 {
        999i32
    }
}
impl PointMass for Pluto {
    fn gravitational_parameter() -> f64 {
        869.6138177608748f64
    }
}
impl Ellipsoid for Pluto {
    fn polar_radius() -> f64 {
        1188.3f64
    }
    fn mean_radius() -> f64 {
        1188.3f64
    }
}
impl Spheroid for Pluto {
    fn equatorial_radius() -> f64 {
        1188.3f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Pluto {
    fn nutation_precession_coefficients() -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients() -> PolynomialCoefficients {
        (132.993f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients() -> PolynomialCoefficients {
        (-6.163f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients() -> PolynomialCoefficients {
        (302.695f64, 56.3625225f64, 0f64, &[] as &[f64])
    }
}
#[cfg(test)]
#[allow(clippy::approx_constant)]
mod tests {
    use super::*;
    #[test]
    fn test_naif_id_199() {
        assert_eq!(Mercury::id(), 199i32)
    }
    #[test]
    fn test_point_mass_199() {
        assert_eq!(Mercury::gravitational_parameter(), 22031.868551400003f64);
    }
    #[test]
    fn test_spheroid_199() {
        assert_eq!(Mercury::polar_radius(), 2438.26f64);
        assert_eq!(Mercury::mean_radius(), 2439.7733333333335f64);
        assert_eq!(Mercury::equatorial_radius(), 2440.53f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_199() {
        assert_eq!(
            (
                &[
                    174.7910857f64,
                    349.5821714f64,
                    164.3732571f64,
                    339.1643429f64,
                    153.9554286f64
                ] as &[f64],
                &[
                    149472.53587500003f64,
                    298945.07175000006f64,
                    448417.60762500006f64,
                    597890.1435000001f64,
                    747362.679375f64
                ] as &[f64]
            ),
            Mercury::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_199() {
        assert_eq!(
            (
                281.0103f64,
                -0.0328f64,
                0f64,
                &[0f64, 0f64, 0f64, 0f64, 0f64] as &[f64]
            ),
            Mercury::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_199() {
        assert_eq!(
            (
                61.4155f64,
                -0.0049f64,
                0f64,
                &[0f64, 0f64, 0f64, 0f64, 0f64] as &[f64]
            ),
            Mercury::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_199() {
        assert_eq!(
            (
                329.5988f64,
                6.1385108f64,
                0f64,
                &[
                    0.01067257f64,
                    -0.00112309f64,
                    -0.0001104f64,
                    -0.00002539f64,
                    -0.00000571f64
                ] as &[f64]
            ),
            Mercury::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_299() {
        assert_eq!(Venus::id(), 299i32)
    }
    #[test]
    fn test_point_mass_299() {
        assert_eq!(Venus::gravitational_parameter(), 324858.592f64);
    }
    #[test]
    fn test_spheroid_299() {
        assert_eq!(Venus::polar_radius(), 6051.8f64);
        assert_eq!(Venus::mean_radius(), 6051.8f64);
        assert_eq!(Venus::equatorial_radius(), 6051.8f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_299() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Venus::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_299() {
        assert_eq!(
            (272.76f64, 0f64, 0f64, &[] as &[f64]),
            Venus::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_299() {
        assert_eq!(
            (67.16f64, 0f64, 0f64, &[] as &[f64]),
            Venus::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_299() {
        assert_eq!(
            (160.2f64, -1.4813688f64, 0f64, &[] as &[f64]),
            Venus::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_399() {
        assert_eq!(Earth::id(), 399i32)
    }
    #[test]
    fn test_point_mass_399() {
        assert_eq!(Earth::gravitational_parameter(), 398600.43550702266f64);
    }
    #[test]
    fn test_spheroid_399() {
        assert_eq!(Earth::polar_radius(), 6356.7519f64);
        assert_eq!(Earth::mean_radius(), 6371.008366666666f64);
        assert_eq!(Earth::equatorial_radius(), 6378.1366f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_399() {
        assert_eq!(
            (
                &[
                    125.045f64, 250.089f64, 260.008f64, 176.625f64, 357.529f64, 311.589f64,
                    134.963f64, 276.617f64, 34.226f64, 15.134f64, 119.743f64, 239.961f64,
                    25.053f64
                ] as &[f64],
                &[
                    -1935.5364525f64,
                    -3871.072905f64,
                    475263.3328725f64,
                    487269.629985f64,
                    35999.0509575f64,
                    964468.49931f64,
                    477198.869325f64,
                    12006.300765f64,
                    63863.5132425f64,
                    -5806.6093575f64,
                    131.84064f64,
                    6003.1503825f64,
                    473327.79642f64
                ] as &[f64]
            ),
            Earth::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_399() {
        assert_eq!(
            (0f64, -0.641f64, 0f64, &[] as &[f64]),
            Earth::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_399() {
        assert_eq!(
            (90f64, -0.557f64, 0f64, &[] as &[f64]),
            Earth::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_399() {
        assert_eq!(
            (190.147f64, 360.9856235f64, 0f64, &[] as &[f64]),
            Earth::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_499() {
        assert_eq!(Mars::id(), 499i32)
    }
    #[test]
    fn test_point_mass_499() {
        assert_eq!(Mars::gravitational_parameter(), 42828.37362069909f64);
    }
    #[test]
    fn test_spheroid_499() {
        assert_eq!(Mars::polar_radius(), 3376.2f64);
        assert_eq!(Mars::mean_radius(), 3389.5266666666666f64);
        assert_eq!(Mars::equatorial_radius(), 3396.19f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_499() {
        assert_eq!(
            (
                &[
                    190.72646643f64,
                    0f64,
                    31834.27934054f64,
                    332.86082793f64,
                    0f64,
                    38280.79631835f64,
                    189.6327156f64,
                    12.711923222f64,
                    660.22803474f64,
                    231.05028581f64,
                    0f64,
                    1320.50145245f64,
                    217.98635955f64,
                    0f64,
                    19139.83628608f64,
                    198.991226f64,
                    0f64,
                    38280.8511281f64,
                    249.663391f64,
                    0f64,
                    76560.636795f64,
                    79.398797f64,
                    0f64,
                    19139.9407476f64,
                    43.058401f64,
                    0f64,
                    57420.7517205f64,
                    79.476401f64,
                    0f64,
                    0.5042615f64,
                    129.071773f64,
                    0f64,
                    38281.0473591f64,
                    56.668646f64,
                    0f64,
                    76560.2552215f64,
                    104.79268f64,
                    0f64,
                    0.5042615f64
                ] as &[f64],
                &[
                    15917.10818695f64,
                    21.4689247f64,
                    0f64,
                    19139.89694742f64,
                    394.93256437f64,
                    0f64,
                    41215158.1842005f64,
                    121.46893664f64,
                    0f64,
                    660.9912354f64,
                    251.37314025f64,
                    0f64,
                    38279.9612555f64,
                    196.19729402f64,
                    0f64,
                    19139.4819985f64,
                    226.292679f64,
                    0f64,
                    57420.7251593f64,
                    266.18351f64,
                    0f64,
                    0.5042615f64,
                    122.433576f64,
                    0f64,
                    38280.8753272f64,
                    57.663379f64,
                    0f64,
                    76560.6495004f64,
                    166.325722f64,
                    0f64,
                    19140.0328244f64,
                    36.352167f64,
                    0f64,
                    57420.929536f64,
                    67.364003f64,
                    0f64,
                    95700.4387578f64,
                    95.391654f64,
                    0f64
                ] as &[f64]
            ),
            Mars::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_499() {
        assert_eq!(
            (
                317.269202f64,
                -0.10927547f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.000068f64,
                    0.000238f64,
                    0.000052f64,
                    0.000009f64,
                    0.419057f64
                ] as &[f64]
            ),
            Mars::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_499() {
        assert_eq!(
            (
                54.432516f64,
                -0.05827105f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.000051f64,
                    0.000141f64,
                    0.000031f64,
                    0.000005f64,
                    1.591274f64
                ] as &[f64]
            ),
            Mars::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_499() {
        assert_eq!(
            (
                176.049863f64,
                350.891982443297f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.000145f64,
                    0.000157f64,
                    0.00004f64,
                    0.000001f64,
                    0.000001f64,
                    0.584542f64
                ] as &[f64]
            ),
            Mars::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_599() {
        assert_eq!(Jupiter::id(), 599i32)
    }
    #[test]
    fn test_point_mass_599() {
        assert_eq!(Jupiter::gravitational_parameter(), 126686531.9003704f64);
    }
    #[test]
    fn test_spheroid_599() {
        assert_eq!(Jupiter::polar_radius(), 66854f64);
        assert_eq!(Jupiter::mean_radius(), 69946f64);
        assert_eq!(Jupiter::equatorial_radius(), 71492f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_599() {
        assert_eq!(
            (
                &[
                    73.32f64,
                    24.62f64,
                    283.9f64,
                    355.8f64,
                    119.9f64,
                    229.8f64,
                    352.25f64,
                    113.35f64,
                    146.64f64,
                    49.24f64,
                    99.360714f64,
                    175.895369f64,
                    300.323162f64,
                    114.012305f64,
                    49.511251f64
                ] as &[f64],
                &[
                    91472.9f64,
                    45137.2f64,
                    4850.7f64,
                    1191.3f64,
                    262.1f64,
                    64.3f64,
                    2382.6f64,
                    6070f64,
                    182945.8f64,
                    90274.4f64,
                    4850.4046f64,
                    1191.9605f64,
                    262.5475f64,
                    6070.2476f64,
                    64.3f64
                ] as &[f64]
            ),
            Jupiter::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_599() {
        assert_eq!(
            (
                268.056595f64,
                -0.006499f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.000117f64,
                    0.000938f64,
                    0.001432f64,
                    0.00003f64,
                    0.00215f64
                ] as &[f64]
            ),
            Jupiter::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_599() {
        assert_eq!(
            (
                64.495303f64,
                0.002413f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.00005f64,
                    0.000404f64,
                    0.000617f64,
                    -0.000013f64,
                    0.000926f64
                ] as &[f64]
            ),
            Jupiter::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_599() {
        assert_eq!(
            (
                284.95f64,
                870.536f64,
                0f64,
                &[
                    0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    0f64, 0f64
                ] as &[f64]
            ),
            Jupiter::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_699() {
        assert_eq!(Saturn::id(), 699i32)
    }
    #[test]
    fn test_point_mass_699() {
        assert_eq!(Saturn::gravitational_parameter(), 37931206.23436167f64);
    }
    #[test]
    fn test_spheroid_699() {
        assert_eq!(Saturn::polar_radius(), 54364f64);
        assert_eq!(Saturn::mean_radius(), 58300f64);
        assert_eq!(Saturn::equatorial_radius(), 60268f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_699() {
        assert_eq!(
            (
                &[353.32f64, 28.72f64, 177.4f64, 300f64, 316.45f64, 345.2f64, 706.64f64, 57.44f64]
                    as &[f64],
                &[
                    75706.7f64,
                    75706.7f64,
                    -36505.5f64,
                    -7225.9f64,
                    506.2f64,
                    -1016.3f64,
                    151413.4f64,
                    151413.4f64
                ] as &[f64]
            ),
            Saturn::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_699() {
        assert_eq!(
            (40.589f64, -0.036f64, 0f64, &[] as &[f64]),
            Saturn::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_699() {
        assert_eq!(
            (83.537f64, -0.004f64, 0f64, &[] as &[f64]),
            Saturn::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_699() {
        assert_eq!(
            (38.9f64, 810.7939024f64, 0f64, &[] as &[f64]),
            Saturn::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_799() {
        assert_eq!(Uranus::id(), 799i32)
    }
    #[test]
    fn test_point_mass_799() {
        assert_eq!(Uranus::gravitational_parameter(), 5793951.256527211f64);
    }
    #[test]
    fn test_spheroid_799() {
        assert_eq!(Uranus::polar_radius(), 24973f64);
        assert_eq!(Uranus::mean_radius(), 25363.666666666668f64);
        assert_eq!(Uranus::equatorial_radius(), 25559f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_799() {
        assert_eq!(
            (
                &[
                    115.75f64, 141.69f64, 135.03f64, 61.77f64, 249.32f64, 43.86f64, 77.66f64,
                    157.36f64, 101.81f64, 138.64f64, 102.23f64, 316.41f64, 304.01f64, 308.71f64,
                    340.82f64, 259.14f64, 204.46f64, 632.82f64
                ] as &[f64],
                &[
                    54991.87f64,
                    41887.66f64,
                    29927.35f64,
                    25733.59f64,
                    24471.46f64,
                    22278.41f64,
                    20289.42f64,
                    16652.76f64,
                    12872.63f64,
                    8061.81f64,
                    -2024.22f64,
                    2863.96f64,
                    -51.94f64,
                    -93.17f64,
                    -75.32f64,
                    -504.81f64,
                    -4048.44f64,
                    5727.92f64
                ] as &[f64]
            ),
            Uranus::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_799() {
        assert_eq!(
            (257.311f64, 0f64, 0f64, &[] as &[f64]),
            Uranus::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_799() {
        assert_eq!(
            (-15.175f64, 0f64, 0f64, &[] as &[f64]),
            Uranus::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_799() {
        assert_eq!(
            (203.81f64, -501.1600928f64, 0f64, &[] as &[f64]),
            Uranus::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_899() {
        assert_eq!(Neptune::id(), 899i32)
    }
    #[test]
    fn test_point_mass_899() {
        assert_eq!(Neptune::gravitational_parameter(), 6835103.145462294f64);
    }
    #[test]
    fn test_spheroid_899() {
        assert_eq!(Neptune::polar_radius(), 24341f64);
        assert_eq!(Neptune::mean_radius(), 24623f64);
        assert_eq!(Neptune::equatorial_radius(), 24764f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_899() {
        assert_eq!(
            (
                &[
                    357.85f64, 323.92f64, 220.51f64, 354.27f64, 75.31f64, 35.36f64, 142.61f64,
                    177.85f64, 647.84f64, 355.7f64, 533.55f64, 711.4f64, 889.25f64, 1067.1f64,
                    1244.95f64, 1422.8f64, 1600.65f64
                ] as &[f64],
                &[
                    52.316f64,
                    62606.6f64,
                    55064.2f64,
                    46564.5f64,
                    26109.4f64,
                    14325.4f64,
                    2824.6f64,
                    52.316f64,
                    125213.2f64,
                    104.632f64,
                    156.948f64,
                    209.264f64,
                    261.58f64,
                    313.896f64,
                    366.212f64,
                    418.528f64,
                    470.844f64
                ] as &[f64]
            ),
            Neptune::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_899() {
        assert_eq!(
            (
                299.36f64,
                0f64,
                0f64,
                &[0.7f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64] as &[f64]
            ),
            Neptune::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_899() {
        assert_eq!(
            (
                43.46f64,
                0f64,
                0f64,
                &[-0.51f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64] as &[f64]
            ),
            Neptune::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_899() {
        assert_eq!(
            (
                249.978f64,
                541.1397757f64,
                0f64,
                &[-0.48f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64] as &[f64]
            ),
            Neptune::prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_naif_id_999() {
        assert_eq!(Pluto::id(), 999i32)
    }
    #[test]
    fn test_point_mass_999() {
        assert_eq!(Pluto::gravitational_parameter(), 869.6138177608748f64);
    }
    #[test]
    fn test_spheroid_999() {
        assert_eq!(Pluto::polar_radius(), 1188.3f64);
        assert_eq!(Pluto::mean_radius(), 1188.3f64);
        assert_eq!(Pluto::equatorial_radius(), 1188.3f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_999() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Pluto::nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_999() {
        assert_eq!(
            (132.993f64, 0f64, 0f64, &[] as &[f64]),
            Pluto::right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_999() {
        assert_eq!(
            (-6.163f64, 0f64, 0f64, &[] as &[f64]),
            Pluto::declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_999() {
        assert_eq!(
            (302.695f64, 56.3625225f64, 0f64, &[] as &[f64]),
            Pluto::prime_meridian_coefficients()
        )
    }
}
