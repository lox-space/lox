from typing import Literal, overload

type Scale = Literal["TAI", "TCB", "TCG", "TDB", "TT", "UT1"]
type Epoch = Literal["jd", "mjd", "j1950", "j2000"]
type Unit = Literal["seconds", "days", "centuries"]


class Time:
    def __new__(
        cls,
        scale: Scale,
        year: int,
        month: int,
        day: int,
        hour: int = 0,
        minute: int = 0,
        seconds: float = 0.0,
    ): ...

    @classmethod
    def from_julian_date(cls, scale: Scale, jd: float, epoch: str = "jd") -> Time: ...

    def __str__(self) -> str: ...

    def __repr__(self) -> str: ...

    def __add__(self, other: TimeDelta) -> Time: ...

    @overload
    def __sub__(self, other: TimeDelta) -> Time: ...

    @overload
    def __sub__(self, other: Time) -> TimeDelta: ...

    def __eq__(self, other: object) -> bool: ...

    def __lt__(self, other: object) -> bool: ...

    def __le__(self, other: object) -> bool: ...

    def isclose(
        self, other: Time, rel_tol: float = 1e-8, abs_tol: float = 1e-14
    ) -> bool: ...

    def julian_date(
        self,
        epoch: Epoch = "jd",
        unit: Unit = "days",
    ): ...

    def scale(self) -> Scale: ...

    def year(self) -> int: ...

    def month(self) -> int: ...

    def day(self) -> int: ...

    def hour(self) -> int: ...

    def minute(self) -> int: ...

    def second(self) -> int: ...

    def millisecond(self) -> int: ...

    def microsecond(self) -> int: ...

    def nanosecond(self) -> int: ...

    def picosecond(self) -> int: ...

    def femtosecond(self) -> int: ...

    def decimal_seconds(self) -> float: ...

    def to_tai(self, provider: UT1Provider | None = None) -> Time: ...

    def to_tcb(self, provider: UT1Provider | None = None) -> Time: ...

    def to_tcg(self, provider: UT1Provider | None = None) -> Time: ...

    def to_tdb(self, provider: UT1Provider | None = None) -> Time: ...

    def to_tt(self, provider: UT1Provider | None = None) -> Time: ...

    def to_ut1(self, provider: UT1Provider | None = None) -> Time: ...

    def to_utc(self, provider: UT1Provider | None = None) -> UTC: ...


class TimeDelta:
    def __new__(cls, seconds: float): ...

    def __repr__(self) -> str: ...

    def __str__(self) -> str: ...

    def __float__(self) -> float: ...

    def __neg__(self) -> TimeDelta: ...

    def __add__(self, other: TimeDelta) -> TimeDelta: ...

    def __sub__(self, other: TimeDelta) -> TimeDelta: ...

    def seconds(self) -> int: ...

    def subsecond(self) -> float: ...

    @classmethod
    def from_seconds(cls, seconds: int) -> TimeDelta: ...

    @classmethod
    def from_minutes(cls, minutes: float) -> TimeDelta: ...

    @classmethod
    def from_hours(cls, hours: float) -> TimeDelta: ...

    @classmethod
    def from_days(cls, days: float) -> TimeDelta: ...

    @classmethod
    def from_julian_years(cls, years: float) -> TimeDelta: ...

    @classmethod
    def from_julian_centuries(cls, centuries: float) -> TimeDelta: ...

    def to_decimal_seconds(self) -> float: ...


class UTC:
    def __new__(
        cls,
        year: int,
        month: int,
        day: int,
        hour: int = 0,
        minute: int = 0,
        seconds: float = 0.0,
    ): ...

    def __str__(self) -> str: ...

    def __repr__(self) -> str: ...

    def __eq__(self, other: object) -> bool: ...

    def year(self) -> int: ...

    def month(self) -> int: ...

    def day(self) -> int: ...

    def hour(self) -> int: ...

    def minute(self) -> int: ...

    def second(self) -> int: ...

    def millisecond(self) -> int: ...

    def microsecond(self) -> int: ...

    def nanosecond(self) -> int: ...

    def picosecond(self) -> int: ...

    def decimal_seconds(self) -> float: ...

    def to_tai(self) -> Time: ...

    def to_tcb(self) -> Time: ...

    def to_tcg(self) -> Time: ...

    def to_tdb(self) -> Time: ...

    def to_tt(self) -> Time: ...

    def to_ut1(self, provider: UT1Provider) -> Time: ...


class UT1Provider:
    def __new__(cls, path: str): ...


class Sun:
    def __new__(cls): ...

    def id(self) -> int: ...

    def name(self) -> str: ...

    def gravitational_parameter(self) -> float: ...

    def mean_radius(self) -> float: ...

    def polar_radius(self) -> float: ...

    def equatorial_radius(self) -> float: ...


class Barycenter:
    def __new__(cls, name: str): ...

    def id(self) -> int: ...

    def name(self) -> str: ...

    def gravitational_parameter(self) -> float: ...


class Planet:
    def __new__(cls, name: str): ...

    def id(self) -> int: ...

    def name(self) -> str: ...

    def gravitational_parameter(self) -> float: ...

    def mean_radius(self) -> float: ...

    def polar_radius(self) -> float: ...

    def equatorial_radius(self) -> float: ...


class Satellite:
    def __new__(cls, name: str): ...

    def id(self) -> int: ...

    def name(self) -> str: ...

    def gravitational_parameter(self) -> float: ...

    def mean_radius(self) -> float: ...

    def polar_radius(self) -> float: ...

    def subplanetary_radius(self) -> float: ...

    def along_orbit_radius(self) -> float: ...


class MinorBody:
    def __new__(cls, name: str): ...

    def id(self) -> int: ...

    def name(self) -> str: ...

    def gravitational_parameter(self) -> float: ...

    def mean_radius(self) -> float: ...

    def polar_radius(self) -> float: ...

    def subplanetary_radius(self) -> float: ...

    def along_orbit_radius(self) -> float: ...
