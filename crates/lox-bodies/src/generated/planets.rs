/*
 * Copyright (c) 2024. Helge Eichhorn and the LOX contributors
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at https://mozilla.org/MPL/2.0/.
 */

// Auto-generated by `lox-gen`. Do not edit!

use crate::{
    Body, Ellipsoid, NaifId, NutationPrecessionCoefficients, Planet, PointMass,
    PolynomialCoefficients, RotationalElements, Spheroid,
};
use std::fmt::{Display, Formatter};
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub struct Mercury;
impl Planet for Mercury {}
impl Body for Mercury {
    fn id(&self) -> NaifId {
        NaifId(199i32)
    }
    fn name(&self) -> &'static str {
        "Mercury"
    }
}
impl Display for Mercury {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.name())
    }
}
impl Ellipsoid for Mercury {
    fn polar_radius(&self) -> f64 {
        2438.26f64
    }
    fn mean_radius(&self) -> f64 {
        2439.7733333333335f64
    }
}
impl Spheroid for Mercury {
    fn equatorial_radius(&self) -> f64 {
        2440.53f64
    }
}
impl PointMass for Mercury {
    fn gravitational_parameter(&self) -> f64 {
        22031.868551400003f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Mercury {
    fn nutation_precession_coefficients(&self) -> NutationPrecessionCoefficients {
        (
            &[
                3.0506799486005773f64,
                6.101359897201155f64,
                2.868854538622146f64,
                5.919534488968053f64,
                2.6870291303890443f64,
            ] as &[f64],
            &[
                2608.7878923240937f64,
                5217.575784648187f64,
                7826.363676972282f64,
                10435.151569296375f64,
                13043.939461620466f64,
            ] as &[f64],
        )
    }
    fn right_ascension_coefficients(&self) -> PolynomialCoefficients {
        (
            4.904554967017021f64,
            -0.0005724679946541401f64,
            0f64,
            &[0f64, 0f64, 0f64, 0f64, 0f64] as &[f64],
        )
    }
    fn declination_coefficients(&self) -> PolynomialCoefficients {
        (
            1.0719026867585775f64,
            -0.00008552113334772214f64,
            0f64,
            &[0f64, 0f64, 0f64, 0f64, 0f64] as &[f64],
        )
    }
    fn prime_meridian_coefficients(&self) -> PolynomialCoefficients {
        (
            5.752584270622286f64,
            0.10713722462923113f64,
            0f64,
            &[
                0.0001862714861495712f64,
                -0.000019601618296223117f64,
                -0.00000192684349420174f64,
                -0.00000044313909708136026f64,
                -0.00000009965830028887623f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub struct Venus;
impl Planet for Venus {}
impl Body for Venus {
    fn id(&self) -> NaifId {
        NaifId(299i32)
    }
    fn name(&self) -> &'static str {
        "Venus"
    }
}
impl Display for Venus {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.name())
    }
}
impl Ellipsoid for Venus {
    fn polar_radius(&self) -> f64 {
        6051.8f64
    }
    fn mean_radius(&self) -> f64 {
        6051.8f64
    }
}
impl Spheroid for Venus {
    fn equatorial_radius(&self) -> f64 {
        6051.8f64
    }
}
impl PointMass for Venus {
    fn gravitational_parameter(&self) -> f64 {
        324858.592f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Venus {
    fn nutation_precession_coefficients(&self) -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients(&self) -> PolynomialCoefficients {
        (4.760560067739733f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients(&self) -> PolynomialCoefficients {
        (1.1721631256393916f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients(&self) -> PolynomialCoefficients {
        (
            2.7960174616949156f64,
            -0.025854762996317376f64,
            0f64,
            &[] as &[f64],
        )
    }
}
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub struct Earth;
impl Planet for Earth {}
impl Body for Earth {
    fn id(&self) -> NaifId {
        NaifId(399i32)
    }
    fn name(&self) -> &'static str {
        "Earth"
    }
}
impl Display for Earth {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.name())
    }
}
impl Ellipsoid for Earth {
    fn polar_radius(&self) -> f64 {
        6356.7519f64
    }
    fn mean_radius(&self) -> f64 {
        6371.008366666666f64
    }
}
impl Spheroid for Earth {
    fn equatorial_radius(&self) -> f64 {
        6378.1366f64
    }
}
impl PointMass for Earth {
    fn gravitational_parameter(&self) -> f64 {
        398600.43550702266f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Earth {
    fn nutation_precession_coefficients(&self) -> NutationPrecessionCoefficients {
        (
            &[
                2.1824469631563095f64,
                4.364876473020098f64,
                4.537995681525416f64,
                3.0826877913349846f64,
                6.240058221362807f64,
                5.438253962996612f64,
                2.355548718369107f64,
                4.827877416989155f64,
                0.5973563897875792f64,
                0.2641381289968218f64,
                2.0899096062155698f64,
                4.188109526378113f64,
                0.4372573375021394f64,
            ] as &[f64],
            &[
                -33.781483888495835f64,
                -67.56296777699167f64,
                8294.909972626925f64,
                8504.459388212737f64,
                628.3019668015924f64,
                16833.15084472816f64,
                8328.69145651542f64,
                209.54947933396397f64,
                1114.6285779726247f64,
                -101.3444516654875f64,
                2.301053255936537f64,
                104.77473966698199f64,
                8261.12848873843f64,
            ] as &[f64],
        )
    }
    fn right_ascension_coefficients(&self) -> PolynomialCoefficients {
        (0f64, -0.011187560505283653f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients(&self) -> PolynomialCoefficients {
        (
            1.5707963267948966f64,
            -0.009721483933608416f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn prime_meridian_coefficients(&self) -> PolynomialCoefficients {
        (
            3.3186912127896577f64,
            6.3003876824396166f64,
            0f64,
            &[] as &[f64],
        )
    }
}
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub struct Mars;
impl Planet for Mars {}
impl Body for Mars {
    fn id(&self) -> NaifId {
        NaifId(499i32)
    }
    fn name(&self) -> &'static str {
        "Mars"
    }
}
impl Display for Mars {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.name())
    }
}
impl Ellipsoid for Mars {
    fn polar_radius(&self) -> f64 {
        3376.2f64
    }
    fn mean_radius(&self) -> f64 {
        3389.5266666666666f64
    }
}
impl Spheroid for Mars {
    fn equatorial_radius(&self) -> f64 {
        3396.19f64
    }
}
impl PointMass for Mars {
    fn gravitational_parameter(&self) -> f64 {
        42828.37362069909f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Mars {
    fn nutation_precession_coefficients(&self) -> NutationPrecessionCoefficients {
        (
            &[
                3.328804809897935f64,
                0f64,
                555.6129894920322f64,
                5.809517398292802f64,
                0f64,
                668.125936040531f64,
                3.3097152567180146f64,
                0.22186491448462606f64,
                11.523153020184504f64,
                4.032588225058434f64,
                0f64,
                23.047098122619843f64,
                3.8045796985836846f64,
                0f64,
                334.05316148477937f64,
                3.4730520762801462f64,
                0f64,
                668.1268926511307f64,
                4.357448194643978f64,
                0f64,
                1336.235189496269f64,
                1.3857704297725961f64,
                0f64,
                334.054984682245f64,
                0.751510868094019f64,
                0f64,
                1002.1811764929237f64,
                1.3871248750853138f64,
                0f64,
                0.008801023466045386f64,
                2.252727410236719f64,
                0f64,
                668.130317528175f64,
                0.9890544553471146f64,
                0f64,
                1336.2285297823557f64,
                1.8289772979888115f64,
                0f64,
                0.008801023466045386f64,
            ] as &[f64],
            &[
                277.80594525842264f64,
                0.37470342287773584f64,
                0f64,
                334.05422022489097f64,
                6.892873571600945f64,
                0f64,
                719340.2120445863f64,
                2.120032883264378f64,
                0f64,
                11.536473384554899f64,
                4.387288948439982f64,
                0f64,
                668.1113614443373f64,
                3.424288764152381f64,
                0f64,
                334.0469780000094f64,
                3.9495523217086292f64,
                0f64,
                1002.1807129125305f64,
                4.645778664015252f64,
                0f64,
                0.008801023466045386f64,
                2.136869016190709f64,
                0f64,
                668.1273150051017f64,
                1.0064158213753553f64,
                0f64,
                1336.2354112473317f64,
                2.9029314796567682f64,
                0f64,
                334.05659172556966f64,
                0.6344650043848296f64,
                0f64,
                1002.1842799588599f64,
                1.1757236496733376f64,
                0f64,
                1670.2877519268022f64,
                1.664898441223219f64,
                0f64,
            ] as &[f64],
        )
    }
    fn right_ascension_coefficients(&self) -> PolynomialCoefficients {
        (
            5.5373921900749785f64,
            -0.001907216743164288f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.000001186823891356144f64,
                0.000004153883619746505f64,
                0.0000009075712110370513f64,
                0.00000015707963267948966f64,
                0.007313924403529878f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients(&self) -> PolynomialCoefficients {
        (
            0.9500266243444937f64,
            -0.0010170216810942417f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.000000890117918517108f64,
                0.000002460914245312005f64,
                0.0000005410520681182422f64,
                0.00000008726646259971648f64,
                0.02777297060138025f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients(&self) -> PolynomialCoefficients {
        (
            3.0726497570349416f64,
            6.12422041248567f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.000002530727415391778f64,
                0.0000027401669256310974f64,
                0.0000006981317007977319f64,
                0.000000017453292519943295f64,
                0.000000017453292519943295f64,
                0.010202182516192693f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub struct Jupiter;
impl Planet for Jupiter {}
impl Body for Jupiter {
    fn id(&self) -> NaifId {
        NaifId(599i32)
    }
    fn name(&self) -> &'static str {
        "Jupiter"
    }
}
impl Display for Jupiter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.name())
    }
}
impl Ellipsoid for Jupiter {
    fn polar_radius(&self) -> f64 {
        66854f64
    }
    fn mean_radius(&self) -> f64 {
        69946f64
    }
}
impl Spheroid for Jupiter {
    fn equatorial_radius(&self) -> f64 {
        71492f64
    }
}
impl PointMass for Jupiter {
    fn gravitational_parameter(&self) -> f64 {
        126686531.9003704f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Jupiter {
    fn nutation_precession_coefficients(&self) -> NutationPrecessionCoefficients {
        (
            &[
                1.2796754075622423f64,
                0.42970006184100396f64,
                4.9549897464119015f64,
                6.2098814785958245f64,
                2.092649773141201f64,
                4.010766621082969f64,
                6.147922290150026f64,
                1.9783307071355725f64,
                2.5593508151244846f64,
                0.8594001236820079f64,
                1.734171606432425f64,
                3.0699533280603655f64,
                5.241627996900319f64,
                1.9898901100379935f64,
                0.864134346731335f64,
            ] as &[f64],
            &[
                1596.503281347521f64,
                787.7927551311844f64,
                84.66068602648895f64,
                20.792107379008446f64,
                4.574507969477138f64,
                1.1222467090323538f64,
                41.58421475801689f64,
                105.9414855960558f64,
                3193.006562695042f64,
                1575.5855102623689f64,
                84.65553032387855f64,
                20.80363527871787f64,
                4.582318317879813f64,
                105.94580703128374f64,
                1.1222467090323538f64,
            ] as &[f64],
        )
    }
    fn right_ascension_coefficients(&self) -> PolynomialCoefficients {
        (
            4.6784701644349695f64,
            -0.00011342894808711148f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.0000020420352248333656f64,
                0.000016371188383706813f64,
                0.000024993114888558796f64,
                0.0000005235987755982989f64,
                0.00003752457891787809f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients(&self) -> PolynomialCoefficients {
        (
            1.1256553894213766f64,
            0.00004211479485062318f64,
            0f64,
            &[
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0.0000008726646259971648f64,
                0.000007051130178057092f64,
                0.000010768681484805013f64,
                -0.00000022689280275926283f64,
                0.00001616174887346749f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients(&self) -> PolynomialCoefficients {
        (
            4.973315703557842f64,
            15.193719457141356f64,
            0f64,
            &[
                0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub struct Saturn;
impl Planet for Saturn {}
impl Body for Saturn {
    fn id(&self) -> NaifId {
        NaifId(699i32)
    }
    fn name(&self) -> &'static str {
        "Saturn"
    }
}
impl Display for Saturn {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.name())
    }
}
impl Ellipsoid for Saturn {
    fn polar_radius(&self) -> f64 {
        54364f64
    }
    fn mean_radius(&self) -> f64 {
        58300f64
    }
}
impl Spheroid for Saturn {
    fn equatorial_radius(&self) -> f64 {
        60268f64
    }
}
impl PointMass for Saturn {
    fn gravitational_parameter(&self) -> f64 {
        37931206.23436167f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Saturn {
    fn nutation_precession_coefficients(&self) -> NutationPrecessionCoefficients {
        (
            &[
                6.166597313146365f64,
                0.5012585611727715f64,
                3.0962140930379407f64,
                5.235987755982989f64,
                5.523094417936056f64,
                6.0248765778844255f64,
                12.33319462629273f64,
                1.002517122345543f64,
            ] as &[f64],
            &[
                1321.331180819591f64,
                1321.331180819591f64,
                -637.14117008679f64,
                -126.11574641985825f64,
                8.834856673595295f64,
                -17.73778118801837f64,
                2642.662361639182f64,
                2642.662361639182f64,
            ] as &[f64],
        )
    }
    fn right_ascension_coefficients(&self) -> PolynomialCoefficients {
        (
            0.7084116900919784f64,
            -0.0006283185307179586f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn declination_coefficients(&self) -> PolynomialCoefficients {
        (
            1.457995697238503f64,
            -0.00006981317007977319f64,
            0f64,
            &[] as &[f64],
        )
    }
    fn prime_meridian_coefficients(&self) -> PolynomialCoefficients {
        (
            0.6789330790257941f64,
            14.151023151973554f64,
            0f64,
            &[] as &[f64],
        )
    }
}
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub struct Uranus;
impl Planet for Uranus {}
impl Body for Uranus {
    fn id(&self) -> NaifId {
        NaifId(799i32)
    }
    fn name(&self) -> &'static str {
        "Uranus"
    }
}
impl Display for Uranus {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.name())
    }
}
impl Ellipsoid for Uranus {
    fn polar_radius(&self) -> f64 {
        24973f64
    }
    fn mean_radius(&self) -> f64 {
        25363.666666666668f64
    }
}
impl Spheroid for Uranus {
    fn equatorial_radius(&self) -> f64 {
        25559f64
    }
}
impl PointMass for Uranus {
    fn gravitational_parameter(&self) -> f64 {
        5793951.256527211f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Uranus {
    fn nutation_precession_coefficients(&self) -> NutationPrecessionCoefficients {
        (
            &[
                2.0202186091834364f64,
                2.4729570171507653f64,
                2.356718088967943f64,
                1.0780898789568973f64,
                4.351454891072263f64,
                0.7655014099247129f64,
                1.3554226970987964f64,
                2.746450110938277f64,
                1.776919711455427f64,
                2.419724474964938f64,
                1.784250094313803f64,
                5.522396286235258f64,
                5.3059754589879615f64,
                5.388005933831694f64,
                5.948431156647074f64,
                4.522846223618106f64,
                3.568500188627606f64,
                11.044792572470516f64,
            ] as &[f64],
            &[
                959.7891933286942f64,
                731.077582955928f64,
                522.3307938967249f64,
                449.1358738582876f64,
                427.10754977009157f64,
                388.83160660922994f64,
                354.1171823199879f64,
                290.6454915444109f64,
                224.66977689099764f64,
                140.70512817020406f64,
                -35.32930378471962f64,
                49.9855316454168f64,
                -0.9065240134858548f64,
                -1.626123264083117f64,
                -1.314581992602129f64,
                -8.810596596992575f64,
                -70.65860756943924f64,
                99.9710632908336f64,
            ] as &[f64],
        )
    }
    fn right_ascension_coefficients(&self) -> PolynomialCoefficients {
        (4.4909241515991285f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients(&self) -> PolynomialCoefficients {
        (-0.2648537139901395f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients(&self) -> PolynomialCoefficients {
        (
            3.557155548489643f64,
            -8.746893698960328f64,
            0f64,
            &[] as &[f64],
        )
    }
}
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub struct Neptune;
impl Planet for Neptune {}
impl Body for Neptune {
    fn id(&self) -> NaifId {
        NaifId(899i32)
    }
    fn name(&self) -> &'static str {
        "Neptune"
    }
}
impl Display for Neptune {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.name())
    }
}
impl Ellipsoid for Neptune {
    fn polar_radius(&self) -> f64 {
        24341f64
    }
    fn mean_radius(&self) -> f64 {
        24623f64
    }
}
impl Spheroid for Neptune {
    fn equatorial_radius(&self) -> f64 {
        24764f64
    }
}
impl PointMass for Neptune {
    fn gravitational_parameter(&self) -> f64 {
        6835103.145462294f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Neptune {
    fn nutation_precession_coefficients(&self) -> NutationPrecessionCoefficients {
        (
            &[
                6.245660728261709f64,
                5.653470513060032f64,
                3.848625533572696f64,
                6.183177941040311f64,
                1.3144074596769295f64,
                0.6171484235051949f64,
                2.4890140462691135f64,
                3.104068074671915f64,
                11.306941026120064f64,
                6.20813614934383f64,
                9.312204224015744f64,
                12.41627229868766f64,
                15.520340373359575f64,
                18.624408448031488f64,
                21.728476522703406f64,
                24.83254459737532f64,
                27.936612672047236f64,
            ] as &[f64],
            &[
                0.9130864514733535f64,
                1092.6913034790819f64,
                961.0515899766616f64,
                812.7038395448996f64,
                455.6949957202075f64,
                250.02539666519567f64,
                49.29857005183183f64,
                0.9130864514733535f64,
                2185.3826069581637f64,
                1.826172902946707f64,
                2.7392593544200605f64,
                3.652345805893414f64,
                4.565432257366767f64,
                5.478518708840121f64,
                6.391605160313474f64,
                7.304691611786828f64,
                8.21777806326018f64,
            ] as &[f64],
        )
    }
    fn right_ascension_coefficients(&self) -> PolynomialCoefficients {
        (
            5.224817648770225f64,
            0f64,
            0f64,
            &[
                0.012217304763960306f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn declination_coefficients(&self) -> PolynomialCoefficients {
        (
            0.7585200929167356f64,
            0f64,
            0f64,
            &[
                -0.00890117918517108f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
    fn prime_meridian_coefficients(&self) -> PolynomialCoefficients {
        (
            4.362939157550385f64,
            9.444670799468602f64,
            0f64,
            &[
                -0.008377580409572781f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
                0f64,
            ] as &[f64],
        )
    }
}
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub struct Pluto;
impl Planet for Pluto {}
impl Body for Pluto {
    fn id(&self) -> NaifId {
        NaifId(999i32)
    }
    fn name(&self) -> &'static str {
        "Pluto"
    }
}
impl Display for Pluto {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.name())
    }
}
impl Ellipsoid for Pluto {
    fn polar_radius(&self) -> f64 {
        1188.3f64
    }
    fn mean_radius(&self) -> f64 {
        1188.3f64
    }
}
impl Spheroid for Pluto {
    fn equatorial_radius(&self) -> f64 {
        1188.3f64
    }
}
impl PointMass for Pluto {
    fn gravitational_parameter(&self) -> f64 {
        869.6138177608748f64
    }
}
#[allow(clippy::approx_constant)]
impl RotationalElements for Pluto {
    fn nutation_precession_coefficients(&self) -> NutationPrecessionCoefficients {
        (&[] as &[f64], &[] as &[f64])
    }
    fn right_ascension_coefficients(&self) -> PolynomialCoefficients {
        (2.3211657321048187f64, 0f64, 0f64, &[] as &[f64])
    }
    fn declination_coefficients(&self) -> PolynomialCoefficients {
        (-0.10756464180041053f64, 0f64, 0f64, &[] as &[f64])
    }
    fn prime_meridian_coefficients(&self) -> PolynomialCoefficients {
        (
            5.283024379324235f64,
            0.9837115923543857f64,
            0f64,
            &[] as &[f64],
        )
    }
}
#[cfg(test)]
#[allow(clippy::approx_constant)]
mod tests {
    use super::*;
    #[test]
    fn test_body_199() {
        assert_eq!(Mercury.id(), NaifId(199i32));
        assert_eq!(Mercury.name(), "Mercury");
        assert_eq!(format!("{}", Mercury), "Mercury");
    }
    #[test]
    fn test_spheroid_199() {
        assert_eq!(Mercury.polar_radius(), 2438.26f64);
        assert_eq!(Mercury.mean_radius(), 2439.7733333333335f64);
        assert_eq!(Mercury.equatorial_radius(), 2440.53f64);
    }
    #[test]
    fn test_point_mass_199() {
        assert_eq!(Mercury.gravitational_parameter(), 22031.868551400003f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_199() {
        assert_eq!(
            (
                &[
                    3.0506799486005773f64,
                    6.101359897201155f64,
                    2.868854538622146f64,
                    5.919534488968053f64,
                    2.6870291303890443f64
                ] as &[f64],
                &[
                    2608.7878923240937f64,
                    5217.575784648187f64,
                    7826.363676972282f64,
                    10435.151569296375f64,
                    13043.939461620466f64
                ] as &[f64]
            ),
            Mercury.nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_199() {
        assert_eq!(
            (
                4.904554967017021f64,
                -0.0005724679946541401f64,
                0f64,
                &[0f64, 0f64, 0f64, 0f64, 0f64] as &[f64]
            ),
            Mercury.right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_199() {
        assert_eq!(
            (
                1.0719026867585775f64,
                -0.00008552113334772214f64,
                0f64,
                &[0f64, 0f64, 0f64, 0f64, 0f64] as &[f64]
            ),
            Mercury.declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_199() {
        assert_eq!(
            (
                5.752584270622286f64,
                0.10713722462923113f64,
                0f64,
                &[
                    0.0001862714861495712f64,
                    -0.000019601618296223117f64,
                    -0.00000192684349420174f64,
                    -0.00000044313909708136026f64,
                    -0.00000009965830028887623f64
                ] as &[f64]
            ),
            Mercury.prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_body_299() {
        assert_eq!(Venus.id(), NaifId(299i32));
        assert_eq!(Venus.name(), "Venus");
        assert_eq!(format!("{}", Venus), "Venus");
    }
    #[test]
    fn test_spheroid_299() {
        assert_eq!(Venus.polar_radius(), 6051.8f64);
        assert_eq!(Venus.mean_radius(), 6051.8f64);
        assert_eq!(Venus.equatorial_radius(), 6051.8f64);
    }
    #[test]
    fn test_point_mass_299() {
        assert_eq!(Venus.gravitational_parameter(), 324858.592f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_299() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Venus.nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_299() {
        assert_eq!(
            (4.760560067739733f64, 0f64, 0f64, &[] as &[f64]),
            Venus.right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_299() {
        assert_eq!(
            (1.1721631256393916f64, 0f64, 0f64, &[] as &[f64]),
            Venus.declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_299() {
        assert_eq!(
            (
                2.7960174616949156f64,
                -0.025854762996317376f64,
                0f64,
                &[] as &[f64]
            ),
            Venus.prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_body_399() {
        assert_eq!(Earth.id(), NaifId(399i32));
        assert_eq!(Earth.name(), "Earth");
        assert_eq!(format!("{}", Earth), "Earth");
    }
    #[test]
    fn test_spheroid_399() {
        assert_eq!(Earth.polar_radius(), 6356.7519f64);
        assert_eq!(Earth.mean_radius(), 6371.008366666666f64);
        assert_eq!(Earth.equatorial_radius(), 6378.1366f64);
    }
    #[test]
    fn test_point_mass_399() {
        assert_eq!(Earth.gravitational_parameter(), 398600.43550702266f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_399() {
        assert_eq!(
            (
                &[
                    2.1824469631563095f64,
                    4.364876473020098f64,
                    4.537995681525416f64,
                    3.0826877913349846f64,
                    6.240058221362807f64,
                    5.438253962996612f64,
                    2.355548718369107f64,
                    4.827877416989155f64,
                    0.5973563897875792f64,
                    0.2641381289968218f64,
                    2.0899096062155698f64,
                    4.188109526378113f64,
                    0.4372573375021394f64
                ] as &[f64],
                &[
                    -33.781483888495835f64,
                    -67.56296777699167f64,
                    8294.909972626925f64,
                    8504.459388212737f64,
                    628.3019668015924f64,
                    16833.15084472816f64,
                    8328.69145651542f64,
                    209.54947933396397f64,
                    1114.6285779726247f64,
                    -101.3444516654875f64,
                    2.301053255936537f64,
                    104.77473966698199f64,
                    8261.12848873843f64
                ] as &[f64]
            ),
            Earth.nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_399() {
        assert_eq!(
            (0f64, -0.011187560505283653f64, 0f64, &[] as &[f64]),
            Earth.right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_399() {
        assert_eq!(
            (
                1.5707963267948966f64,
                -0.009721483933608416f64,
                0f64,
                &[] as &[f64]
            ),
            Earth.declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_399() {
        assert_eq!(
            (
                3.3186912127896577f64,
                6.3003876824396166f64,
                0f64,
                &[] as &[f64]
            ),
            Earth.prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_body_499() {
        assert_eq!(Mars.id(), NaifId(499i32));
        assert_eq!(Mars.name(), "Mars");
        assert_eq!(format!("{}", Mars), "Mars");
    }
    #[test]
    fn test_spheroid_499() {
        assert_eq!(Mars.polar_radius(), 3376.2f64);
        assert_eq!(Mars.mean_radius(), 3389.5266666666666f64);
        assert_eq!(Mars.equatorial_radius(), 3396.19f64);
    }
    #[test]
    fn test_point_mass_499() {
        assert_eq!(Mars.gravitational_parameter(), 42828.37362069909f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_499() {
        assert_eq!(
            (
                &[
                    3.328804809897935f64,
                    0f64,
                    555.6129894920322f64,
                    5.809517398292802f64,
                    0f64,
                    668.125936040531f64,
                    3.3097152567180146f64,
                    0.22186491448462606f64,
                    11.523153020184504f64,
                    4.032588225058434f64,
                    0f64,
                    23.047098122619843f64,
                    3.8045796985836846f64,
                    0f64,
                    334.05316148477937f64,
                    3.4730520762801462f64,
                    0f64,
                    668.1268926511307f64,
                    4.357448194643978f64,
                    0f64,
                    1336.235189496269f64,
                    1.3857704297725961f64,
                    0f64,
                    334.054984682245f64,
                    0.751510868094019f64,
                    0f64,
                    1002.1811764929237f64,
                    1.3871248750853138f64,
                    0f64,
                    0.008801023466045386f64,
                    2.252727410236719f64,
                    0f64,
                    668.130317528175f64,
                    0.9890544553471146f64,
                    0f64,
                    1336.2285297823557f64,
                    1.8289772979888115f64,
                    0f64,
                    0.008801023466045386f64
                ] as &[f64],
                &[
                    277.80594525842264f64,
                    0.37470342287773584f64,
                    0f64,
                    334.05422022489097f64,
                    6.892873571600945f64,
                    0f64,
                    719340.2120445863f64,
                    2.120032883264378f64,
                    0f64,
                    11.536473384554899f64,
                    4.387288948439982f64,
                    0f64,
                    668.1113614443373f64,
                    3.424288764152381f64,
                    0f64,
                    334.0469780000094f64,
                    3.9495523217086292f64,
                    0f64,
                    1002.1807129125305f64,
                    4.645778664015252f64,
                    0f64,
                    0.008801023466045386f64,
                    2.136869016190709f64,
                    0f64,
                    668.1273150051017f64,
                    1.0064158213753553f64,
                    0f64,
                    1336.2354112473317f64,
                    2.9029314796567682f64,
                    0f64,
                    334.05659172556966f64,
                    0.6344650043848296f64,
                    0f64,
                    1002.1842799588599f64,
                    1.1757236496733376f64,
                    0f64,
                    1670.2877519268022f64,
                    1.664898441223219f64,
                    0f64
                ] as &[f64]
            ),
            Mars.nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_499() {
        assert_eq!(
            (
                5.5373921900749785f64,
                -0.001907216743164288f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.000001186823891356144f64,
                    0.000004153883619746505f64,
                    0.0000009075712110370513f64,
                    0.00000015707963267948966f64,
                    0.007313924403529878f64
                ] as &[f64]
            ),
            Mars.right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_499() {
        assert_eq!(
            (
                0.9500266243444937f64,
                -0.0010170216810942417f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.000000890117918517108f64,
                    0.000002460914245312005f64,
                    0.0000005410520681182422f64,
                    0.00000008726646259971648f64,
                    0.02777297060138025f64
                ] as &[f64]
            ),
            Mars.declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_499() {
        assert_eq!(
            (
                3.0726497570349416f64,
                6.12422041248567f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.000002530727415391778f64,
                    0.0000027401669256310974f64,
                    0.0000006981317007977319f64,
                    0.000000017453292519943295f64,
                    0.000000017453292519943295f64,
                    0.010202182516192693f64
                ] as &[f64]
            ),
            Mars.prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_body_599() {
        assert_eq!(Jupiter.id(), NaifId(599i32));
        assert_eq!(Jupiter.name(), "Jupiter");
        assert_eq!(format!("{}", Jupiter), "Jupiter");
    }
    #[test]
    fn test_spheroid_599() {
        assert_eq!(Jupiter.polar_radius(), 66854f64);
        assert_eq!(Jupiter.mean_radius(), 69946f64);
        assert_eq!(Jupiter.equatorial_radius(), 71492f64);
    }
    #[test]
    fn test_point_mass_599() {
        assert_eq!(Jupiter.gravitational_parameter(), 126686531.9003704f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_599() {
        assert_eq!(
            (
                &[
                    1.2796754075622423f64,
                    0.42970006184100396f64,
                    4.9549897464119015f64,
                    6.2098814785958245f64,
                    2.092649773141201f64,
                    4.010766621082969f64,
                    6.147922290150026f64,
                    1.9783307071355725f64,
                    2.5593508151244846f64,
                    0.8594001236820079f64,
                    1.734171606432425f64,
                    3.0699533280603655f64,
                    5.241627996900319f64,
                    1.9898901100379935f64,
                    0.864134346731335f64
                ] as &[f64],
                &[
                    1596.503281347521f64,
                    787.7927551311844f64,
                    84.66068602648895f64,
                    20.792107379008446f64,
                    4.574507969477138f64,
                    1.1222467090323538f64,
                    41.58421475801689f64,
                    105.9414855960558f64,
                    3193.006562695042f64,
                    1575.5855102623689f64,
                    84.65553032387855f64,
                    20.80363527871787f64,
                    4.582318317879813f64,
                    105.94580703128374f64,
                    1.1222467090323538f64
                ] as &[f64]
            ),
            Jupiter.nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_599() {
        assert_eq!(
            (
                4.6784701644349695f64,
                -0.00011342894808711148f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0000020420352248333656f64,
                    0.000016371188383706813f64,
                    0.000024993114888558796f64,
                    0.0000005235987755982989f64,
                    0.00003752457891787809f64
                ] as &[f64]
            ),
            Jupiter.right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_599() {
        assert_eq!(
            (
                1.1256553894213766f64,
                0.00004211479485062318f64,
                0f64,
                &[
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0.0000008726646259971648f64,
                    0.000007051130178057092f64,
                    0.000010768681484805013f64,
                    -0.00000022689280275926283f64,
                    0.00001616174887346749f64
                ] as &[f64]
            ),
            Jupiter.declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_599() {
        assert_eq!(
            (
                4.973315703557842f64,
                15.193719457141356f64,
                0f64,
                &[
                    0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    0f64, 0f64
                ] as &[f64]
            ),
            Jupiter.prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_body_699() {
        assert_eq!(Saturn.id(), NaifId(699i32));
        assert_eq!(Saturn.name(), "Saturn");
        assert_eq!(format!("{}", Saturn), "Saturn");
    }
    #[test]
    fn test_spheroid_699() {
        assert_eq!(Saturn.polar_radius(), 54364f64);
        assert_eq!(Saturn.mean_radius(), 58300f64);
        assert_eq!(Saturn.equatorial_radius(), 60268f64);
    }
    #[test]
    fn test_point_mass_699() {
        assert_eq!(Saturn.gravitational_parameter(), 37931206.23436167f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_699() {
        assert_eq!(
            (
                &[
                    6.166597313146365f64,
                    0.5012585611727715f64,
                    3.0962140930379407f64,
                    5.235987755982989f64,
                    5.523094417936056f64,
                    6.0248765778844255f64,
                    12.33319462629273f64,
                    1.002517122345543f64
                ] as &[f64],
                &[
                    1321.331180819591f64,
                    1321.331180819591f64,
                    -637.14117008679f64,
                    -126.11574641985825f64,
                    8.834856673595295f64,
                    -17.73778118801837f64,
                    2642.662361639182f64,
                    2642.662361639182f64
                ] as &[f64]
            ),
            Saturn.nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_699() {
        assert_eq!(
            (
                0.7084116900919784f64,
                -0.0006283185307179586f64,
                0f64,
                &[] as &[f64]
            ),
            Saturn.right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_699() {
        assert_eq!(
            (
                1.457995697238503f64,
                -0.00006981317007977319f64,
                0f64,
                &[] as &[f64]
            ),
            Saturn.declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_699() {
        assert_eq!(
            (
                0.6789330790257941f64,
                14.151023151973554f64,
                0f64,
                &[] as &[f64]
            ),
            Saturn.prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_body_799() {
        assert_eq!(Uranus.id(), NaifId(799i32));
        assert_eq!(Uranus.name(), "Uranus");
        assert_eq!(format!("{}", Uranus), "Uranus");
    }
    #[test]
    fn test_spheroid_799() {
        assert_eq!(Uranus.polar_radius(), 24973f64);
        assert_eq!(Uranus.mean_radius(), 25363.666666666668f64);
        assert_eq!(Uranus.equatorial_radius(), 25559f64);
    }
    #[test]
    fn test_point_mass_799() {
        assert_eq!(Uranus.gravitational_parameter(), 5793951.256527211f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_799() {
        assert_eq!(
            (
                &[
                    2.0202186091834364f64,
                    2.4729570171507653f64,
                    2.356718088967943f64,
                    1.0780898789568973f64,
                    4.351454891072263f64,
                    0.7655014099247129f64,
                    1.3554226970987964f64,
                    2.746450110938277f64,
                    1.776919711455427f64,
                    2.419724474964938f64,
                    1.784250094313803f64,
                    5.522396286235258f64,
                    5.3059754589879615f64,
                    5.388005933831694f64,
                    5.948431156647074f64,
                    4.522846223618106f64,
                    3.568500188627606f64,
                    11.044792572470516f64
                ] as &[f64],
                &[
                    959.7891933286942f64,
                    731.077582955928f64,
                    522.3307938967249f64,
                    449.1358738582876f64,
                    427.10754977009157f64,
                    388.83160660922994f64,
                    354.1171823199879f64,
                    290.6454915444109f64,
                    224.66977689099764f64,
                    140.70512817020406f64,
                    -35.32930378471962f64,
                    49.9855316454168f64,
                    -0.9065240134858548f64,
                    -1.626123264083117f64,
                    -1.314581992602129f64,
                    -8.810596596992575f64,
                    -70.65860756943924f64,
                    99.9710632908336f64
                ] as &[f64]
            ),
            Uranus.nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_799() {
        assert_eq!(
            (4.4909241515991285f64, 0f64, 0f64, &[] as &[f64]),
            Uranus.right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_799() {
        assert_eq!(
            (-0.2648537139901395f64, 0f64, 0f64, &[] as &[f64]),
            Uranus.declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_799() {
        assert_eq!(
            (
                3.557155548489643f64,
                -8.746893698960328f64,
                0f64,
                &[] as &[f64]
            ),
            Uranus.prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_body_899() {
        assert_eq!(Neptune.id(), NaifId(899i32));
        assert_eq!(Neptune.name(), "Neptune");
        assert_eq!(format!("{}", Neptune), "Neptune");
    }
    #[test]
    fn test_spheroid_899() {
        assert_eq!(Neptune.polar_radius(), 24341f64);
        assert_eq!(Neptune.mean_radius(), 24623f64);
        assert_eq!(Neptune.equatorial_radius(), 24764f64);
    }
    #[test]
    fn test_point_mass_899() {
        assert_eq!(Neptune.gravitational_parameter(), 6835103.145462294f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_899() {
        assert_eq!(
            (
                &[
                    6.245660728261709f64,
                    5.653470513060032f64,
                    3.848625533572696f64,
                    6.183177941040311f64,
                    1.3144074596769295f64,
                    0.6171484235051949f64,
                    2.4890140462691135f64,
                    3.104068074671915f64,
                    11.306941026120064f64,
                    6.20813614934383f64,
                    9.312204224015744f64,
                    12.41627229868766f64,
                    15.520340373359575f64,
                    18.624408448031488f64,
                    21.728476522703406f64,
                    24.83254459737532f64,
                    27.936612672047236f64
                ] as &[f64],
                &[
                    0.9130864514733535f64,
                    1092.6913034790819f64,
                    961.0515899766616f64,
                    812.7038395448996f64,
                    455.6949957202075f64,
                    250.02539666519567f64,
                    49.29857005183183f64,
                    0.9130864514733535f64,
                    2185.3826069581637f64,
                    1.826172902946707f64,
                    2.7392593544200605f64,
                    3.652345805893414f64,
                    4.565432257366767f64,
                    5.478518708840121f64,
                    6.391605160313474f64,
                    7.304691611786828f64,
                    8.21777806326018f64
                ] as &[f64]
            ),
            Neptune.nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_899() {
        assert_eq!(
            (
                5.224817648770225f64,
                0f64,
                0f64,
                &[
                    0.012217304763960306f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Neptune.right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_899() {
        assert_eq!(
            (
                0.7585200929167356f64,
                0f64,
                0f64,
                &[
                    -0.00890117918517108f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Neptune.declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_899() {
        assert_eq!(
            (
                4.362939157550385f64,
                9.444670799468602f64,
                0f64,
                &[
                    -0.008377580409572781f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64,
                    0f64
                ] as &[f64]
            ),
            Neptune.prime_meridian_coefficients()
        )
    }
    #[test]
    fn test_body_999() {
        assert_eq!(Pluto.id(), NaifId(999i32));
        assert_eq!(Pluto.name(), "Pluto");
        assert_eq!(format!("{}", Pluto), "Pluto");
    }
    #[test]
    fn test_spheroid_999() {
        assert_eq!(Pluto.polar_radius(), 1188.3f64);
        assert_eq!(Pluto.mean_radius(), 1188.3f64);
        assert_eq!(Pluto.equatorial_radius(), 1188.3f64);
    }
    #[test]
    fn test_point_mass_999() {
        assert_eq!(Pluto.gravitational_parameter(), 869.6138177608748f64);
    }
    #[test]
    fn test_rotational_elements_nutation_precession_coefficients_999() {
        assert_eq!(
            (&[] as &[f64], &[] as &[f64]),
            Pluto.nutation_precession_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_right_ascension_coefficients_999() {
        assert_eq!(
            (2.3211657321048187f64, 0f64, 0f64, &[] as &[f64]),
            Pluto.right_ascension_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_declination_coefficients_999() {
        assert_eq!(
            (-0.10756464180041053f64, 0f64, 0f64, &[] as &[f64]),
            Pluto.declination_coefficients()
        )
    }
    #[test]
    fn test_rotational_elements_prime_meridian_coefficients_999() {
        assert_eq!(
            (
                5.283024379324235f64,
                0.9837115923543857f64,
                0f64,
                &[] as &[f64]
            ),
            Pluto.prime_meridian_coefficients()
        )
    }
}
